%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: !_shablon.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: Stacy
%%CreationDate: 04.12.15
%%BoundingBox: 0 0 371 375
%%HiResBoundingBox: 0 0 370.4712 374.5154
%%CropBox: 0 0 370.4712 374.5154
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-12-04T12:07:55+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-12-04T12:07:55+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-12-04T12:07:55+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9NeYLia20HUrmBuE8FrP&#xA;JE4oeLpGzKd/AjIZDUSfJyNJASzQieRkB9r5p/5W1+Yn/V6k/wCRcP8AzRmn/NZO99O/kDRf6mPm&#xA;f1pVrf5v/mTG0Xp67OlQ1eKxCvTwTInVZO9tx9gaL/Ux9v60s/5XJ+Z3/UwXP3R/804PzWTvbP5B&#xA;0X+px+19eeWrme68uaVdXDmSeezt5ZpDSrO8Ssx28Sc3eM3EHyfKdZARzTiOQlIfamOTcZ2KuxV2&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:6096e1c6-ff95-4406-b098-6b3675ed7588</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:6096e1c6-ff95-4406-b098-6b3675ed7588</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:7e86dabd-0cfa-477f-937c-e409ce33c39e</stRef:instanceID>
            <stRef:documentID>xmp.did:7e86dabd-0cfa-477f-937c-e409ce33c39e</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:7e86dabd-0cfa-477f-937c-e409ce33c39e</stEvt:instanceID>
                  <stEvt:when>2015-11-23T19:46:04+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:6096e1c6-ff95-4406-b098-6b3675ed7588</stEvt:instanceID>
                  <stEvt:when>2015-12-04T12:07:55+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -374.515 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 374.515 li
370.471 374.515 li
370.471 0 li
cp
clp
47.4465 2.89107 mo
47.4465 14.1029 li
10.6378 14.1029 li
10.6378 2.89107 li
47.4465 2.89107 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.113771 .910887 .81622 .0202945 cmyk
f
51.6774 40.3344 mo
6.40695 40.3344 li
10.6378 14.1029 li
47.4465 14.1029 li
51.6774 40.3344 li
cp
.989349 .831296 .261204 .112734 cmyk
f
51.6774 40.3344 mo
51.6774 54.7194 li
6.40695 54.7194 li
6.40695 40.3344 li
51.6774 40.3344 li
cp
1 .874632 .347845 .257847 cmyk
f
47.4465 2.89107 mo
47.4465 14.1029 li
29.0422 14.1029 li
29.0422 2.89107 li
47.4465 2.89107 li
cp
.184329 .979278 .988983 .0842298 cmyk
f
51.6774 40.3344 mo
29.0422 40.3344 li
29.0422 14.1029 li
47.4465 14.1029 li
51.6774 40.3344 li
cp
1 .848264 .334234 .21503 cmyk
f
51.6774 40.3344 mo
51.6774 54.7194 li
29.0422 54.7194 li
29.0422 40.3344 li
51.6774 40.3344 li
cp
1 .857359 .431311 .447425 cmyk
f
35.3885 27.2186 mo
35.3885 30.7236 32.5471 33.565 29.0422 33.565 cv
25.5372 33.565 22.6958 30.7236 22.6958 27.2186 cv
22.6958 23.7137 25.5372 20.8723 29.0422 20.8723 cv
32.5471 20.8723 35.3885 23.7137 35.3885 27.2186 cv
cp
0 0 0 0 cmyk
f
27.6671 22.1416 mo
21.8497 19.9204 li
23.4933 26.0707 li
27.6671 22.1416 li
cp
f
30.4172 22.1416 mo
36.2347 19.9204 li
34.591 26.0707 li
30.4172 22.1416 li
cp
f
58.041 49.773 mo
58.2282 49.216 57.9413 48.4788 57.1775 48.4788 cv
57.0778 48.4788 56.987 48.4926 56.9035 48.5158 cv
57.0311 47.9734 56.7358 47.3153 56.014 47.3153 cv
55.777 47.3153 55.5863 47.3872 55.4408 47.5022 cv
55.1278 47.241 54.7764 47.0413 54.3502 46.9791 cv
54.3257 46.9755 54.2993 46.974 54.2731 46.9722 cv
54.3624 46.4534 54.0742 45.8592 53.4086 45.8364 cv
53.263 45.5898 53.0041 45.4114 52.6293 45.4114 cv
52.4866 45.4114 52.361 45.438 52.2515 45.4837 cv
52.1638 45.1021 51.8672 44.7768 51.3601 44.7768 cv
51.1619 44.7768 50.9963 44.8272 50.8621 44.9107 cv
50.833 44.9037 50.8023 44.899 50.7714 44.8945 cv
50.627 44.6423 50.3651 44.4595 49.985 44.4595 cv
49.8827 44.4595 49.7896 44.4738 49.7044 44.4982 cv
49.6076 44.1313 49.3139 43.8249 48.8215 43.8249 cv
48.4608 43.8249 48.2067 43.9902 48.0584 44.2231 cv
47.9438 44.1717 47.8105 44.1422 47.6581 44.1422 cv
47.3746 44.1422 47.1573 44.2445 47.005 44.4012 cv
46.8502 44.2747 46.6454 44.1951 46.3888 44.1951 cv
46.0577 44.1951 45.8118 44.3273 45.65 44.5233 cv
45.4933 44.387 45.2815 44.3008 45.0137 44.3008 cv
44.5154 44.3008 44.2097 44.5995 44.0952 44.9664 cv
43.6599 45.1017 43.291 45.3495 42.9638 45.6516 cv
42.733 45.5206 42.4699 45.4382 42.1772 45.4215 cv
41.4368 45.379 40.7014 45.8029 40.3854 46.4777 cv
40.3431 46.4726 40.2997 46.4692 40.254 46.4692 cv
39.6389 46.4692 39.3324 46.9491 39.3347 47.4271 cv
38.8301 47.6057 38.3831 47.8064 38.0984 48.3436 cv
37.9861 48.5554 37.9173 48.7927 37.8928 49.0349 cv
37.3612 49.226 36.9017 49.5665 36.6601 50.1242 cv
36.3757 50.7808 36.4832 51.5845 36.9667 52.0931 cv
37.0031 52.6002 37.4231 52.9369 37.9151 52.9737 cv
44.1162 53.4374 50.3451 53.4283 56.5449 52.9467 cv
56.951 52.9151 57.3101 52.6764 57.4423 52.3088 cv
58.122 52.5726 58.8873 51.8038 58.6592 51.0873 cv
58.8551 50.5846 58.6497 49.9088 58.041 49.773 cv
cp
.549706 .600061 .645899 .398749 cmyk
f
47.4465 50.8518 mo
35.2567 50.8518 li
31.7922 59.962 li
47.4465 59.962 li
47.4465 50.8518 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
47.4465 50.8518 mo
59.6363 50.8518 li
63.1008 59.962 li
47.4465 59.962 li
47.4465 50.8518 li
cp
.184329 .979278 .988983 .0842298 cmyk
f
47.4465 61.7003 mo
31.7922 61.7003 li
31.7922 59.962 li
47.4465 59.962 li
47.4465 61.7003 li
cp
.177432 .954711 .923247 .0728771 cmyk
f
63.1008 61.7003 mo
47.4465 61.7003 li
47.4465 59.962 li
63.1008 59.962 li
63.1008 61.7003 li
cp
.244694 1 1 .201633 cmyk
f
39.1413 48.6705 mo
38.3208 48.6705 38.3194 49.9457 39.1413 49.9457 cv
39.9618 49.9457 39.9631 48.6705 39.1413 48.6705 cv
cp
.568139 .636744 .665583 .523003 cmyk
f
52.9092 46.2208 mo
52.0887 46.2208 52.0873 47.496 52.9092 47.496 cv
53.7297 47.496 53.731 46.2208 52.9092 46.2208 cv
cp
f
51.2543 47.3953 mo
50.4338 47.3953 50.4324 48.6705 51.2543 48.6705 cv
52.0748 48.6705 52.0762 47.3953 51.2543 47.3953 cv
cp
f
41.6245 46.4557 mo
40.804 46.4557 40.8026 47.7309 41.6245 47.7309 cv
42.445 47.7309 42.4464 46.4557 41.6245 46.4557 cv
cp
f
41.4903 48.3014 mo
40.6698 48.3014 40.6684 49.5765 41.4903 49.5765 cv
42.3108 49.5765 42.3121 48.3014 41.4903 48.3014 cv
cp
f
43.8274 46.2208 mo
43.0069 46.2208 43.0055 47.496 43.8274 47.496 cv
44.6479 47.496 44.6493 46.2208 43.8274 46.2208 cv
cp
f
44.126 48.6705 mo
43.3055 48.6705 43.3041 49.9457 44.126 49.9457 cv
44.9465 49.9457 44.9478 48.6705 44.126 48.6705 cv
cp
f
48.5956 47.3953 mo
47.7751 47.3953 47.7738 48.6705 48.5956 48.6705 cv
49.4161 48.6705 49.4175 47.3953 48.5956 47.3953 cv
cp
f
56.2068 49.0447 mo
55.3863 49.0447 55.385 50.3199 56.2068 50.3199 cv
57.0274 50.3199 57.0287 49.0447 56.2068 49.0447 cv
cp
f
52.9092 49.0447 mo
52.0887 49.0447 52.0873 50.3199 52.9092 50.3199 cv
53.7297 50.3199 53.731 49.0447 52.9092 49.0447 cv
cp
f
54.6577 47.9322 mo
53.8372 47.9322 53.8359 49.2074 54.6577 49.2074 cv
55.4783 49.2074 55.4796 47.9322 54.6577 47.9322 cv
cp
f
50.4466 45.5832 mo
49.6261 45.5832 49.6248 46.8584 50.4466 46.8584 cv
51.2672 46.8584 51.2685 45.5832 50.4466 45.5832 cv
cp
f
48.2336 45.1806 mo
47.4131 45.1806 47.4117 46.4557 48.2336 46.4557 cv
49.0541 46.4557 49.0555 45.1806 48.2336 45.1806 cv
cp
f
45.6395 45.1806 mo
44.819 45.1806 44.8176 46.4557 45.6395 46.4557 cv
46.46 46.4557 46.4614 45.1806 45.6395 45.1806 cv
cp
f
46.673 48.9908 mo
45.8525 48.9908 45.8511 50.2659 46.673 50.2659 cv
47.4935 50.2659 47.4949 48.9908 46.673 48.9908 cv
cp
f
50.1106 48.9908 mo
49.2901 48.9908 49.2887 50.2659 50.1106 50.2659 cv
50.9311 50.2659 50.9325 48.9908 50.1106 48.9908 cv
cp
f
46.2554 47.0262 mo
45.4349 47.0262 45.4335 48.3014 46.2554 48.3014 cv
47.0759 48.3014 47.0773 47.0262 46.2554 47.0262 cv
cp
f
5.97203 34.5217 mo
4.92001 33.0831 2.9079 32.7339 1.43071 33.7513 cv
-.0726837 34.7869 -.451966 36.845 .583555 38.3484 cv
1.42585 39.5713 2.94476 40.0503 4.29134 39.6293 cv
16.1645 56.867 li
15.2911 57.975 15.1973 59.5649 16.0395 60.7878 cv
17.0751 62.2911 19.1333 62.6704 20.6367 61.6349 cv
22.14 60.5994 22.5193 58.5412 21.4838 57.0378 cv
5.974 34.5204 li
5.97203 34.5217 li
cp
0 .283757 1 0 cmyk
f
5.97598 34.519 mo
5.00686 33.0233 5.39777 31.0189 6.87496 30.0014 cv
8.37835 28.9659 10.4365 29.3451 11.4721 30.8485 cv
12.3144 32.0714 12.2205 33.6613 11.3471 34.7693 cv
23.2203 52.007 li
24.5669 51.586 26.0858 52.065 26.9281 53.2879 cv
27.9636 54.7912 27.5843 56.8494 26.0809 57.885 cv
24.5775 58.9205 22.5193 58.5412 21.4838 57.0378 cv
5.974 34.5204 li
5.97598 34.519 li
cp
0 .418433 1 0 cmyk
f
35.5435 225.154 mo
28.9772 225.154 li
26.9413 225.154 25.285 223.498 25.285 221.462 cv
25.285 215.207 li
25.285 213.171 26.9413 211.515 28.9772 211.515 cv
35.2513 211.515 li
35.2513 213.358 li
28.9772 213.358 li
27.9578 213.358 27.1285 214.188 27.1285 215.207 cv
27.1285 221.462 li
27.1285 222.481 27.9578 223.311 28.9772 223.311 cv
35.5435 223.311 li
35.5435 225.154 li
cp
.989349 .831296 .261204 .112734 cmyk
f
41.5253 225.154 mo
35.5435 225.154 li
35.5435 223.311 li
41.5253 223.311 li
42.5446 223.311 43.3739 222.481 43.3739 221.462 cv
43.3739 215.207 li
43.3739 214.188 42.5446 213.358 41.5253 213.358 cv
35.2513 213.358 li
35.2513 211.515 li
41.5253 211.515 li
43.5612 211.515 45.2174 213.171 45.2174 215.207 cv
45.2174 221.462 li
45.2174 223.498 43.5612 225.154 41.5253 225.154 cv
cp
1 .848264 .334234 .21503 cmyk
f
35.2513 214.255 mo
29.9602 214.255 li
29.4173 214.255 28.9772 213.815 28.9772 213.272 cv
28.9772 211.601 li
28.9772 211.058 29.4173 210.618 29.9602 210.618 cv
35.2513 210.618 li
35.2513 214.255 li
cp
0 .283757 1 0 cmyk
f
40.5423 214.255 mo
35.2513 214.255 li
35.2513 210.618 li
40.5423 210.618 li
41.0852 210.618 41.5253 211.058 41.5253 211.601 cv
41.5253 213.272 li
41.5253 213.815 41.0852 214.255 40.5423 214.255 cv
cp
0 .418433 1 0 cmyk
f
35.2512 260.066 mo
10.8652 260.066 li
7.83901 260.066 5.38582 257.613 5.38582 254.587 cv
5.38582 224.267 li
5.38582 221.241 7.83901 218.788 10.8652 218.788 cv
35.2512 218.788 li
35.2512 260.066 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
35.2512 218.788 mo
59.6373 218.788 li
62.6635 218.788 65.1167 221.241 65.1167 224.267 cv
65.1167 254.587 li
65.1167 257.613 62.6635 260.066 59.6373 260.066 cv
35.2512 260.066 li
35.2512 218.788 li
cp
.184329 .979278 .988983 .0842298 cmyk
f
35.2512 248.907 mo
31.5665 248.907 li
31.5665 229.506 li
35.2512 229.506 li
35.2512 248.907 li
cp
0 0 0 0 cmyk
f
38.936 248.907 mo
35.2512 248.907 li
35.2512 229.506 li
38.936 229.506 li
38.936 248.907 li
cp
f
25.5505 235.522 mo
25.5505 239.206 li
25.5505 242.891 li
35.2512 242.891 li
35.2512 239.206 li
35.2512 235.522 li
25.5505 235.522 li
cp
f
35.2512 235.522 mo
35.2512 239.206 li
35.2512 242.891 li
44.952 242.891 li
44.952 239.206 li
44.952 235.522 li
35.2512 235.522 li
cp
f
72.039 253.095 mo
72.039 267.123 li
72.039 268.973 70.5392 270.473 68.689 270.473 cv
54.9427 270.473 li
53.0926 270.473 51.5928 268.973 51.5928 267.123 cv
51.5928 253.095 li
51.5928 251.245 53.0926 249.746 54.9427 249.746 cv
68.689 249.746 li
70.5392 249.746 72.039 251.245 72.039 253.095 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
68.6892 249.745 mo
54.943 249.745 li
53.093 249.745 51.5932 251.245 51.5932 253.095 cv
51.5932 267.123 li
51.5932 268.973 53.093 270.473 54.943 270.473 cv
68.6892 270.473 li
70.5392 270.473 72.039 268.973 72.039 267.123 cv
72.039 253.095 li
72.039 251.245 70.5392 249.745 68.6892 249.745 cv
cp
.989349 .831296 .261204 .112734 cmyk
f
72.039 253.095 mo
72.039 267.123 li
72.039 268.973 70.5392 270.473 68.689 270.473 cv
61.8164 270.473 li
61.8164 249.746 li
68.689 249.746 li
70.5392 249.746 72.039 251.245 72.039 253.095 cv
cp
1 .848264 .334234 .21503 cmyk
f
61.8164 265.344 mo
51.5928 265.344 li
51.5928 255.343 li
61.8164 255.343 li
61.8164 265.344 li
cp
0 .283757 1 0 cmyk
f
72.0395 265.344 mo
61.8159 265.344 li
61.8159 255.343 li
72.0395 255.343 li
72.0395 265.344 li
cp
0 .418433 1 0 cmyk
f
64.5611 261.41 mo
64.5611 262.498 63.3322 263.38 61.8164 263.38 cv
60.3005 263.38 59.0717 262.498 59.0717 261.41 cv
59.0717 260.322 60.3005 259.44 61.8164 259.44 cv
63.3322 259.44 64.5611 260.322 64.5611 261.41 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
62.6859 257.858 mo
62.6859 258.339 62.2964 258.728 61.8159 258.728 cv
61.3354 258.728 60.9458 258.339 60.9458 257.858 cv
60.9458 257.378 61.3354 256.988 61.8159 256.988 cv
62.2964 256.988 62.6859 257.378 62.6859 257.858 cv
cp
f
60.2766 258.57 mo
60.2766 259.05 59.887 259.44 59.4065 259.44 cv
58.926 259.44 58.5365 259.05 58.5365 258.57 cv
58.5365 258.089 58.926 257.7 59.4065 257.7 cv
59.887 257.7 60.2766 258.089 60.2766 258.57 cv
cp
f
65.1791 258.57 mo
65.1791 259.05 64.7895 259.44 64.309 259.44 cv
63.8285 259.44 63.439 259.05 63.439 258.57 cv
63.439 258.089 63.8285 257.7 64.309 257.7 cv
64.7895 257.7 65.1791 258.089 65.1791 258.57 cv
cp
f
61.8164 244.808 mo
52.7427 244.808 li
52.7427 249.746 li
61.8164 249.746 li
61.8164 244.808 li
cp
0 .283757 1 0 cmyk
f
70.89 244.808 mo
61.8164 244.808 li
61.8164 249.746 li
70.89 249.746 li
70.89 244.808 li
cp
0 .418433 1 0 cmyk
f
271.309 151.149 mo
271.309 166.431 li
271.309 168.194 269.88 169.624 268.117 169.624 cv
260.757 169.624 li
258.994 169.624 257.564 168.194 257.564 166.431 cv
257.564 151.149 li
257.564 149.386 258.994 147.957 260.757 147.957 cv
268.117 147.957 li
269.88 147.957 271.309 149.386 271.309 151.149 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
229.406 140.824 mo
226.933 140.824 224.559 139.922 222.35 138.142 cv
218.709 135.208 216.621 130.791 216.621 126.025 cv
216.621 115.6 li
216.621 113.194 218.578 111.237 220.984 111.237 cv
224.24 111.237 li
224.24 113.08 li
220.984 113.08 li
219.595 113.08 218.465 114.21 218.465 115.6 cv
218.465 126.025 li
218.465 130.231 220.302 134.124 223.507 136.706 cv
225.38 138.216 227.365 138.981 229.406 138.981 cv
229.406 140.824 li
cp
.989349 .831296 .261204 .112734 cmyk
f
226.344 112.158 mo
226.344 113.321 225.402 114.263 224.24 114.263 cv
223.077 114.263 222.135 113.321 222.135 112.158 cv
222.135 110.996 223.077 110.054 224.24 110.054 cv
225.402 110.054 226.344 110.996 226.344 112.158 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
229.406 140.824 mo
229.406 138.981 li
231.447 138.981 233.432 138.216 235.305 136.706 cv
238.509 134.124 240.347 130.231 240.347 126.025 cv
240.347 115.6 li
240.347 114.21 239.217 113.08 237.828 113.08 cv
234.572 113.08 li
234.572 111.237 li
237.828 111.237 li
240.234 111.237 242.191 113.194 242.191 115.6 cv
242.191 126.025 li
242.191 130.791 240.102 135.208 236.461 138.142 cv
234.253 139.922 231.879 140.824 229.406 140.824 cv
cp
1 .848264 .334234 .21503 cmyk
f
223.474 170.545 mo
219.695 170.545 216.621 167.471 216.621 163.692 cv
216.621 150.773 li
218.465 150.773 li
218.465 163.692 li
218.465 166.454 220.712 168.702 223.474 168.702 cv
226.237 168.702 228.484 166.454 228.484 163.692 cv
228.484 139.903 li
230.328 139.903 li
230.328 163.692 li
230.328 167.471 227.253 170.545 223.474 170.545 cv
cp
.989349 .831296 .261204 .112734 cmyk
f
232.467 112.158 mo
232.467 113.321 233.41 114.263 234.572 114.263 cv
235.734 114.263 236.677 113.321 236.677 112.158 cv
236.677 110.996 235.734 110.054 234.572 110.054 cv
233.41 110.054 232.467 110.996 232.467 112.158 cv
cp
.184329 .979278 .988983 .0842298 cmyk
f
229.406 138.468 mo
227.485 138.468 225.608 137.741 223.829 136.307 cv
223.212 135.809 222.309 135.907 221.811 136.524 cv
221.314 137.141 221.411 138.044 222.028 138.542 cv
224.331 140.397 226.813 141.338 229.406 141.338 cv
229.406 138.468 li
cp
0 .283757 1 0 cmyk
f
229.406 138.468 mo
231.327 138.468 233.203 137.741 234.983 136.307 cv
235.6 135.809 236.503 135.907 237 136.524 cv
237.498 137.141 237.401 138.044 236.784 138.542 cv
234.481 140.397 231.999 141.338 229.406 141.338 cv
229.406 138.468 li
cp
0 .418433 1 0 cmyk
f
221.535 150.773 mo
221.535 152.978 219.748 154.766 217.543 154.766 cv
215.338 154.766 213.55 152.978 213.55 150.773 cv
213.55 148.568 215.338 146.78 217.543 146.78 cv
219.748 146.78 221.535 148.568 221.535 150.773 cv
cp
1 .857359 .431311 .447425 cmyk
f
220.061 150.773 mo
220.061 152.164 218.933 153.291 217.543 153.291 cv
216.152 153.291 215.025 152.164 215.025 150.773 cv
215.025 149.382 216.152 148.255 217.543 148.255 cv
218.933 148.255 220.061 149.382 220.061 150.773 cv
cp
.989349 .831296 .261204 .112734 cmyk
f
248.006 144.333 mo
248.006 144.333 li
245.969 143.679 244.848 141.497 245.503 139.46 cv
255.078 109.659 li
255.732 107.622 257.914 106.501 259.952 107.156 cv
259.952 107.156 li
248.006 144.333 li
cp
0 .283757 1 0 cmyk
f
246.31 149.612 mo
246.31 149.612 li
248.533 142.694 li
246.959 142.188 li
245.242 147.532 li
244.962 148.402 245.441 149.333 246.31 149.612 cv
cp
f
248.006 144.333 mo
248.006 144.333 li
250.043 144.988 252.226 143.867 252.88 141.83 cv
262.455 112.03 li
263.11 109.993 261.989 107.811 259.952 107.156 cv
259.952 107.156 li
248.006 144.333 li
cp
0 .418433 1 0 cmyk
f
246.31 149.612 mo
246.31 149.612 li
248.533 142.694 li
250.107 143.2 li
248.39 148.544 li
248.111 149.413 247.179 149.891 246.31 149.612 cv
cp
f
257.565 114.584 mo
257.269 114.489 256.952 114.652 256.857 114.948 cv
246.478 147.249 li
246.383 147.545 246.546 147.862 246.842 147.957 cv
257.565 114.584 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
257.565 114.584 mo
257.861 114.679 258.024 114.997 257.929 115.293 cv
247.55 147.593 li
247.455 147.889 247.138 148.052 246.842 147.957 cv
257.565 114.584 li
cp
.184329 .979278 .988983 .0842298 cmyk
f
257.921 119.203 mo
257.889 119.203 257.855 119.198 257.823 119.187 cv
254.674 118.176 li
254.505 118.121 254.411 117.939 254.466 117.77 cv
254.52 117.6 254.702 117.507 254.872 117.561 cv
258.02 118.573 li
258.19 118.627 258.283 118.809 258.228 118.979 cv
258.184 119.116 258.058 119.203 257.921 119.203 cv
cp
1 .848264 .334234 .21503 cmyk
f
257.18 121.51 mo
257.147 121.51 257.114 121.505 257.081 121.495 cv
253.933 120.483 li
253.763 120.429 253.67 120.247 253.725 120.077 cv
253.779 119.908 253.961 119.814 254.13 119.869 cv
257.278 120.88 li
257.448 120.935 257.542 121.117 257.487 121.286 cv
257.443 121.423 257.316 121.51 257.18 121.51 cv
cp
f
256.439 123.818 mo
256.406 123.818 256.373 123.813 256.34 123.802 cv
253.192 122.791 li
253.022 122.736 252.928 122.554 252.983 122.385 cv
253.038 122.215 253.22 122.122 253.389 122.176 cv
256.537 123.188 li
256.707 123.242 256.8 123.424 256.746 123.594 cv
256.702 123.73 256.575 123.818 256.439 123.818 cv
cp
f
255.697 126.125 mo
255.664 126.125 255.631 126.12 255.598 126.11 cv
252.45 125.098 li
252.28 125.043 252.187 124.862 252.242 124.692 cv
252.296 124.522 252.478 124.429 252.647 124.484 cv
255.796 125.495 li
255.965 125.55 256.059 125.731 256.004 125.901 cv
255.96 126.038 255.833 126.125 255.697 126.125 cv
cp
f
254.956 128.433 mo
254.923 128.433 254.89 128.428 254.857 128.417 cv
251.709 127.405 li
251.539 127.351 251.446 127.169 251.5 127 cv
251.555 126.83 251.737 126.736 251.906 126.791 cv
255.054 127.803 li
255.224 127.857 255.317 128.039 255.263 128.209 cv
255.219 128.345 255.092 128.433 254.956 128.433 cv
cp
f
254.214 130.74 mo
254.182 130.74 254.148 130.735 254.116 130.724 cv
250.967 129.713 li
250.798 129.658 250.704 129.477 250.759 129.307 cv
250.813 129.137 250.996 129.044 251.165 129.099 cv
254.313 130.11 li
254.483 130.165 254.576 130.346 254.521 130.516 cv
254.477 130.653 254.351 130.74 254.214 130.74 cv
cp
f
253.473 133.047 mo
253.44 133.047 253.407 133.042 253.374 133.032 cv
250.226 132.02 li
250.056 131.966 249.963 131.784 250.017 131.615 cv
250.072 131.445 250.254 131.351 250.423 131.406 cv
253.571 132.418 li
253.741 132.472 253.835 132.654 253.78 132.823 cv
253.736 132.96 253.609 133.047 253.473 133.047 cv
cp
f
252.731 135.355 mo
252.699 135.355 252.665 135.35 252.633 135.339 cv
249.485 134.328 li
249.315 134.273 249.221 134.092 249.276 133.922 cv
249.331 133.752 249.513 133.659 249.682 133.714 cv
252.83 134.725 li
253 134.78 253.093 134.961 253.038 135.131 cv
252.995 135.268 252.868 135.355 252.731 135.355 cv
cp
f
251.99 137.662 mo
251.957 137.662 251.924 137.657 251.891 137.647 cv
248.743 136.635 li
248.573 136.581 248.48 136.399 248.535 136.229 cv
248.589 136.06 248.771 135.966 248.94 136.021 cv
252.089 137.033 li
252.258 137.087 252.352 137.269 252.297 137.438 cv
252.253 137.575 252.126 137.662 251.99 137.662 cv
cp
f
268.117 147.957 mo
260.757 147.957 li
258.994 147.957 257.565 149.386 257.565 151.149 cv
257.565 166.431 li
257.565 168.194 258.994 169.623 260.757 169.623 cv
268.117 169.623 li
269.88 169.623 271.309 168.194 271.309 166.431 cv
271.309 151.149 li
271.309 149.386 269.88 147.957 268.117 147.957 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
271.309 151.149 mo
271.309 166.431 li
271.309 168.194 269.88 169.624 268.117 169.624 cv
264.437 169.624 li
264.437 147.957 li
268.117 147.957 li
269.88 147.957 271.309 149.386 271.309 151.149 cv
cp
.184329 .979278 .988983 .0842298 cmyk
f
264.437 163.779 mo
257.564 163.779 li
257.564 154.248 li
264.437 154.248 li
264.437 163.779 li
cp
0 .283757 1 0 cmyk
f
271.31 163.779 mo
264.437 163.779 li
264.437 154.248 li
271.31 154.248 li
271.31 163.779 li
cp
0 .418433 1 0 cmyk
f
267.053 160.029 mo
267.053 161.066 265.882 161.907 264.437 161.907 cv
262.993 161.907 261.822 161.066 261.822 160.029 cv
261.822 158.993 262.993 158.152 264.437 158.152 cv
265.882 158.152 267.053 158.993 267.053 160.029 cv
cp
0 0 0 0 cmyk
f
265.266 156.645 mo
265.266 157.103 264.895 157.474 264.437 157.474 cv
263.979 157.474 263.608 157.103 263.608 156.645 cv
263.608 156.187 263.979 155.816 264.437 155.816 cv
264.895 155.816 265.266 156.187 265.266 156.645 cv
cp
f
262.97 157.323 mo
262.97 157.781 262.599 158.152 262.141 158.152 cv
261.683 158.152 261.312 157.781 261.312 157.323 cv
261.312 156.865 261.683 156.494 262.141 156.494 cv
262.599 156.494 262.97 156.865 262.97 157.323 cv
cp
f
267.642 157.323 mo
267.642 157.781 267.271 158.152 266.813 158.152 cv
266.355 158.152 265.984 157.781 265.984 157.323 cv
265.984 156.865 266.355 156.494 266.813 156.494 cv
267.271 156.494 267.642 156.865 267.642 157.323 cv
cp
f
264.437 143.251 mo
258.66 143.251 li
258.66 147.957 li
264.437 147.957 li
264.437 143.251 li
cp
.989349 .831296 .261204 .112734 cmyk
f
270.214 143.251 mo
264.437 143.251 li
264.437 147.957 li
270.214 147.957 li
270.214 143.251 li
cp
1 .848264 .334234 .21503 cmyk
f
244.858 161.333 mo
241.988 161.333 li
241.988 159.587 li
241.988 158.795 242.63 158.152 243.423 158.152 cv
243.423 158.152 li
244.216 158.152 244.858 158.795 244.858 159.587 cv
244.858 161.333 li
cp
.989349 .831296 .261204 .112734 cmyk
f
244.858 161.333 mo
241.988 161.333 li
241.988 163.078 li
241.988 163.871 242.63 164.513 243.423 164.513 cv
243.423 164.513 li
244.216 164.513 244.858 163.871 244.858 163.078 cv
244.858 161.333 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
240.522 163.484 mo
237.713 164.073 li
237.355 162.365 li
237.193 161.589 237.69 160.828 238.465 160.666 cv
238.465 160.666 li
239.241 160.503 240.002 161 240.164 161.776 cv
240.522 163.484 li
cp
.989349 .831296 .261204 .112734 cmyk
f
240.522 163.484 mo
237.713 164.073 li
238.071 165.782 li
238.234 166.557 238.995 167.054 239.77 166.892 cv
239.77 166.892 li
240.546 166.729 241.043 165.968 240.88 165.193 cv
240.522 163.484 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
247.292 167.921 mo
245.214 165.943 li
246.417 164.678 li
246.964 164.104 247.872 164.082 248.446 164.628 cv
248.446 164.628 li
249.02 165.175 249.042 166.083 248.496 166.657 cv
247.292 167.921 li
cp
.989349 .831296 .261204 .112734 cmyk
f
247.292 167.921 mo
245.214 165.943 li
244.01 167.207 li
243.464 167.781 243.486 168.689 244.06 169.236 cv
244.06 169.236 li
244.634 169.782 245.542 169.76 246.089 169.186 cv
247.292 167.921 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
264.491 217.686 mo
222.829 217.686 li
216.958 223.223 213.292 231.074 213.292 239.781 cv
213.292 256.552 226.889 270.149 243.66 270.149 cv
260.432 270.149 274.028 256.552 274.028 239.781 cv
274.028 231.074 270.362 223.223 264.491 217.686 cv
cp
.341833 0 .0318303 0 cmyk
f
264.491 217.686 mo
243.66 217.686 li
243.66 270.149 li
260.432 270.149 274.028 256.552 274.028 239.781 cv
274.028 231.074 270.362 223.223 264.491 217.686 cv
cp
.46537 0 .0847486 0 cmyk
f
243.66 217.686 mo
222.946 217.686 li
221.886 217.686 221.026 216.826 221.026 215.766 cv
221.026 215.766 li
221.026 214.705 221.886 213.846 222.946 213.846 cv
243.66 213.846 li
243.66 217.686 li
cp
.465644 0 .0940566 0 cmyk
f
243.66 217.686 mo
264.374 217.686 li
265.435 217.686 266.294 216.826 266.294 215.766 cv
266.294 215.766 li
266.294 214.705 265.435 213.846 264.374 213.846 cv
243.66 213.846 li
243.66 217.686 li
cp
.537926 0 .150362 0 cmyk
f
261.293 224.19 mo
261.293 225.127 260.534 225.886 259.597 225.886 cv
258.661 225.886 257.901 225.127 257.901 224.19 cv
257.901 223.253 258.661 222.494 259.597 222.494 cv
260.534 222.494 261.293 223.253 261.293 224.19 cv
cp
.341833 0 .0318303 0 cmyk
f
226.508 253.004 mo
226.508 253.829 225.838 254.499 225.012 254.499 cv
224.186 254.499 223.517 253.829 223.517 253.004 cv
223.517 252.178 224.186 251.508 225.012 251.508 cv
225.838 251.508 226.508 252.178 226.508 253.004 cv
cp
.537926 0 .150362 0 cmyk
f
228.971 247.765 mo
228.971 248.494 228.381 249.084 227.652 249.084 cv
226.923 249.084 226.332 248.494 226.332 247.765 cv
226.332 247.036 226.923 246.445 227.652 246.445 cv
228.381 246.445 228.971 247.036 228.971 247.765 cv
cp
f
256.87 241.944 mo
256.87 241.944 256.401 235.603 261.041 235.448 cv
262.587 237.768 261.041 238.696 261.041 238.696 cv
261.041 238.696 262.742 238.851 263.051 240.397 cv
263.361 241.944 260.886 242.622 260.886 242.622 cv
260.886 242.622 262.641 242.563 263.078 245.501 cv
263.515 248.44 260.412 248.987 260.262 250.57 cv
260.113 252.152 258.257 247.976 259.339 246.12 cv
260.422 244.264 256.87 241.944 256.87 241.944 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
238.6 250.045 mo
238.6 250.045 241.031 253.356 241.546 253.209 cv
242.062 253.062 242.165 251.889 242.165 251.889 cv
242.165 251.889 244.485 252.805 244.537 252.341 cv
244.588 251.877 244.537 251.103 244.537 251.103 cv
244.537 251.103 245.98 251.531 247.372 250.57 cv
248.764 249.608 245.413 249.144 245.413 249.144 cv
238.6 250.045 li
cp
f
237.182 235.448 mo
237.182 235.448 241.856 225.633 245.11 228.315 cv
245.774 228.985 244.027 231.881 244.027 231.881 cv
244.027 231.881 247.585 230.149 248.049 230.556 cv
248.513 230.963 248.364 231.002 247.275 231.952 cv
246.187 232.903 250.272 231.996 249.75 233.043 cv
249.228 234.089 247.962 234.56 246.691 235.159 cv
245.419 235.757 237.182 235.448 237.182 235.448 cv
cp
f
256.87 241.943 mo
256.869 241.945 256.867 241.947 256.866 241.95 cv
256.715 242.21 251.77 250.57 242.405 250.57 cv
232.892 250.57 227.94 241.152 227.94 241.152 cv
227.94 241.152 231.269 237.161 237.193 235.444 cv
238.815 234.974 240.632 234.675 242.629 234.675 cv
251.916 234.675 256.87 241.943 256.87 241.943 cv
cp
0 .418433 1 0 cmyk
f
237.049 239.624 mo
237.049 240.468 236.365 241.152 235.521 241.152 cv
234.677 241.152 233.992 240.468 233.992 239.624 cv
233.992 238.78 234.677 238.095 235.521 238.095 cv
236.365 238.095 237.049 238.78 237.049 239.624 cv
cp
.989349 .831296 .261204 .112734 cmyk
f
236.533 239.624 mo
236.533 240.183 236.08 240.636 235.521 240.636 cv
234.962 240.636 234.509 240.183 234.509 239.624 cv
234.509 239.065 234.962 238.612 235.521 238.612 cv
236.08 238.612 236.533 239.065 236.533 239.624 cv
cp
1 .857359 .431311 .447425 cmyk
f
239.244 248.422 mo
239.244 248.422 239.247 248.422 239.254 248.423 cv
239.23 248.496 239.244 248.422 239.244 248.422 cv
cp
0 .418433 1 0 cmyk
f
256.87 241.943 mo
256.869 241.945 256.867 241.947 256.866 241.95 cv
251.351 249.901 240.534 248.606 240.137 248.554 cv
244.801 238.743 237.182 235.448 237.182 235.448 cv
237.193 235.444 li
238.815 234.974 240.632 234.675 242.629 234.675 cv
251.916 234.675 256.87 241.943 256.87 241.943 cv
cp
0 .283757 1 0 cmyk
f
246.083 242.622 mo
246.083 242.622 249.589 243.113 251.445 242.622 cv
253.302 242.132 251.549 246.633 245.362 246.445 cv
246.083 245.844 246.651 244.813 246.083 242.622 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
251.117 256.259 mo
250.834 256.383 250.598 256.605 250.455 256.918 cv
250.315 257.225 250.306 257.557 250.422 257.874 cv
250.483 258.042 250.682 258.291 250.574 258.474 cv
250.474 258.64 250.209 258.727 250.077 258.876 cv
249.829 259.156 249.791 259.549 249.987 259.868 cv
250.064 259.995 250.191 260.11 250.316 260.192 cv
250.314 260.199 250.312 260.206 250.308 260.214 cv
250.206 260.429 250.113 260.624 249.984 260.829 cv
249.644 261.371 249.442 262.13 249.947 262.646 cv
250.034 262.735 250.141 262.811 250.249 262.873 cv
250.284 262.892 250.39 262.957 250.471 262.996 cv
250.397 263.072 250.298 263.181 250.277 263.198 cv
249.806 263.6 249.462 264.172 249.775 264.786 cv
249.871 264.974 250.019 265.132 250.175 265.272 cv
250.251 265.34 250.33 265.404 250.404 265.473 cv
250.426 265.494 250.451 265.526 250.475 265.548 cv
250.443 265.592 250.4 265.668 250.398 265.671 cv
250.309 265.8 250.21 265.921 250.123 266.051 cv
249.937 266.328 249.797 266.645 249.804 266.985 cv
249.811 267.366 250.021 267.701 250.308 267.937 cv
250.429 268.036 250.58 268.119 250.691 268.227 cv
250.729 268.264 250.748 268.289 250.757 268.302 cv
250.595 268.649 250.821 268.968 251.117 269.074 cv
251.117 256.259 li
cp
.989349 .831296 .261204 .112734 cmyk
f
251.117 256.259 mo
251.4 256.383 251.636 256.605 251.779 256.918 cv
251.919 257.225 251.928 257.557 251.812 257.874 cv
251.751 258.042 251.551 258.291 251.66 258.474 cv
251.759 258.64 252.025 258.727 252.157 258.876 cv
252.405 259.156 252.443 259.549 252.247 259.868 cv
252.17 259.995 252.043 260.11 251.918 260.192 cv
251.92 260.199 251.922 260.206 251.926 260.214 cv
252.028 260.429 252.121 260.624 252.25 260.829 cv
252.59 261.371 252.792 262.13 252.287 262.646 cv
252.2 262.735 252.093 262.811 251.985 262.873 cv
251.95 262.892 251.844 262.957 251.763 262.996 cv
251.837 263.072 251.936 263.181 251.957 263.198 cv
252.428 263.6 252.772 264.172 252.459 264.786 cv
252.363 264.974 252.214 265.132 252.059 265.272 cv
251.983 265.34 251.904 265.404 251.83 265.473 cv
251.808 265.494 251.783 265.526 251.759 265.548 cv
251.791 265.592 251.834 265.668 251.836 265.671 cv
251.925 265.8 252.024 265.921 252.111 266.051 cv
252.297 266.328 252.437 266.645 252.43 266.985 cv
252.423 267.366 252.213 267.701 251.926 267.937 cv
251.805 268.036 251.654 268.119 251.543 268.227 cv
251.505 268.264 251.486 268.289 251.477 268.302 cv
251.639 268.649 251.413 268.968 251.117 269.074 cv
251.117 256.259 li
cp
1 .848264 .334234 .21503 cmyk
f
254.596 250.412 mo
254.212 250.581 253.891 250.882 253.697 251.307 cv
253.506 251.725 253.494 252.177 253.651 252.608 cv
253.735 252.837 254.006 253.176 253.858 253.423 cv
253.723 253.649 253.361 253.767 253.182 253.97 cv
252.845 254.351 252.794 254.885 253.06 255.319 cv
253.165 255.491 253.337 255.649 253.508 255.76 cv
253.505 255.769 253.501 255.778 253.496 255.789 cv
253.358 256.082 253.232 256.347 253.056 256.626 cv
252.593 257.363 252.319 258.395 253.006 259.096 cv
253.124 259.218 253.269 259.321 253.417 259.405 cv
253.463 259.431 253.608 259.519 253.719 259.572 cv
253.617 259.675 253.482 259.824 253.455 259.847 cv
252.814 260.394 252.346 261.172 252.772 262.006 cv
252.902 262.262 253.104 262.477 253.316 262.667 cv
253.419 262.759 253.527 262.846 253.627 262.941 cv
253.657 262.969 253.691 263.012 253.724 263.043 cv
253.68 263.102 253.622 263.205 253.619 263.21 cv
253.497 263.384 253.363 263.55 253.244 263.726 cv
252.992 264.102 252.802 264.534 252.811 264.996 cv
252.821 265.514 253.106 265.97 253.497 266.29 cv
253.66 266.425 253.866 266.538 254.018 266.685 cv
254.069 266.736 254.094 266.769 254.107 266.787 cv
253.886 267.259 254.193 267.692 254.596 267.837 cv
254.596 250.412 li
cp
f
254.596 250.412 mo
254.981 250.581 255.302 250.882 255.496 251.307 cv
255.687 251.725 255.699 252.177 255.542 252.608 cv
255.458 252.837 255.187 253.176 255.335 253.423 cv
255.47 253.649 255.831 253.767 256.011 253.97 cv
256.348 254.351 256.399 254.885 256.133 255.319 cv
256.028 255.491 255.856 255.649 255.685 255.76 cv
255.688 255.769 255.692 255.778 255.697 255.789 cv
255.835 256.082 255.961 256.347 256.137 256.626 cv
256.6 257.363 256.874 258.395 256.187 259.096 cv
256.069 259.218 255.924 259.321 255.776 259.405 cv
255.73 259.431 255.585 259.519 255.474 259.572 cv
255.576 259.675 255.711 259.824 255.738 259.847 cv
256.379 260.394 256.847 261.172 256.421 262.006 cv
256.291 262.262 256.089 262.477 255.877 262.667 cv
255.774 262.759 255.666 262.846 255.566 262.941 cv
255.536 262.969 255.502 263.012 255.469 263.043 cv
255.512 263.102 255.571 263.205 255.574 263.21 cv
255.696 263.384 255.83 263.55 255.948 263.726 cv
256.201 264.102 256.391 264.534 256.382 264.996 cv
256.372 265.514 256.087 265.97 255.696 266.29 cv
255.533 266.425 255.327 266.538 255.175 266.685 cv
255.123 266.736 255.098 266.769 255.086 266.787 cv
255.307 267.259 254.999 267.692 254.596 267.837 cv
254.596 250.412 li
cp
1 .857359 .431311 .447425 cmyk
f
359.366 7.78852 mo
320.255 7.78852 li
318.373 7.78852 316.714 9.02059 316.17 10.8214 cv
309.149 34.0701 li
370.471 34.0701 li
363.45 10.8214 li
362.906 9.02059 361.247 7.78852 359.366 7.78852 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
340.105 14.6633 mo
333.478 14.6633 li
331.427 14.6633 329.76 12.9954 329.76 10.9452 cv
329.76 4.6318 li
329.76 2.58166 331.427 .913777 333.478 .913777 cv
339.81 .913777 li
339.81 2.75728 li
333.478 2.75728 li
332.444 2.75728 331.603 3.5982 331.603 4.6318 cv
331.603 10.9452 li
331.603 11.9789 332.444 12.8198 333.478 12.8198 cv
340.105 12.8198 li
340.105 14.6633 li
cp
.989349 .831296 .261204 .112734 cmyk
f
346.143 14.6633 mo
340.105 14.6633 li
340.105 12.8198 li
346.143 12.8198 li
347.177 12.8198 348.017 11.9789 348.017 10.9452 cv
348.017 4.6318 li
348.017 3.5982 347.177 2.75728 346.143 2.75728 cv
339.81 2.75728 li
339.81 .913777 li
346.143 .913777 li
348.193 .913777 349.861 2.58166 349.861 4.6318 cv
349.861 10.9452 li
349.861 12.9954 348.193 14.6633 346.143 14.6633 cv
cp
1 .848264 .334234 .21503 cmyk
f
320.255 60.3516 mo
359.366 60.3516 li
361.247 60.3516 362.906 59.1195 363.45 57.3187 cv
370.471 34.0701 li
309.149 34.0701 li
316.17 57.3187 li
316.714 59.1195 318.373 60.3516 320.255 60.3516 cv
cp
1 .857359 .431311 .447425 cmyk
f
370.471 34.07 mo
309.149 34.07 li
316.171 10.8216 li
316.715 9.02079 318.373 7.78852 320.255 7.78852 cv
359.366 7.78852 li
361.247 7.78852 362.906 9.02079 363.45 10.8216 cv
370.471 34.07 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
370.471 34.07 mo
363.45 57.3185 li
362.906 59.1193 361.247 60.3516 359.366 60.3516 cv
320.255 60.3516 li
318.373 60.3516 316.715 59.1193 316.171 57.3185 cv
309.149 34.07 li
370.471 34.07 li
cp
.989349 .831296 .261204 .112734 cmyk
f
339.81 33.9454 mo
339.81 60.3516 li
359.366 60.3516 li
361.247 60.3516 362.906 59.1193 363.45 57.3185 cv
370.471 34.07 li
370.434 33.9454 li
339.81 33.9454 li
cp
1 .848264 .334234 .21503 cmyk
f
370.356 33.6894 mo
363.45 10.8216 li
362.906 9.02079 361.247 7.78852 359.366 7.78852 cv
339.81 7.78852 li
339.81 33.6894 li
370.356 33.6894 li
cp
.184329 .979278 .988983 .0842298 cmyk
f
364.252 34.07 mo
364.102 34.5661 li
362.65 39.3762 li
362.35 40.3683 li
362.321 40.4675 li
362.021 41.4597 li
361.692 42.5501 li
360.898 45.1784 li
360.699 45.8352 li
360.598 46.1705 li
359.999 48.1549 li
359.145 50.9805 li
358.845 51.9727 li
358.113 54.3986 li
321.508 54.3986 li
320.775 51.9727 li
320.476 50.9805 li
319.622 48.1549 li
319.022 46.1705 li
319.02 46.1636 li
318.723 45.1784 li
318.028 42.8785 li
317.6 41.4597 li
317.3 40.4675 li
317.27 40.3683 li
316.971 39.3762 li
315.518 34.5661 li
315.368 34.07 li
315.518 33.574 li
316.971 28.7639 li
317.27 27.7718 li
317.3 27.6725 li
317.6 26.6804 li
318.028 25.2616 li
318.723 22.9617 li
319.02 21.9765 li
319.022 21.9696 li
319.622 19.9852 li
320.476 17.1595 li
320.775 16.1674 li
321.508 13.7415 li
358.113 13.7415 li
358.845 16.1674 li
359.145 17.1595 li
359.999 19.9852 li
360.598 21.9696 li
360.699 22.3049 li
360.898 22.9617 li
361.692 25.59 li
362.021 26.6804 li
362.321 27.6725 li
362.35 27.7718 li
362.65 28.7639 li
364.102 33.574 li
364.252 34.07 li
cp
1 .857359 .431311 .447425 cmyk
f
325.575 54.3985 mo
324.583 54.3985 li
324.583 13.7415 li
325.575 13.7415 li
325.575 54.3985 li
cp
.36173 .282292 .271336 0 cmyk
f
318.723 22.9617 mo
319.02 21.9765 li
319.02 46.1636 li
318.723 45.1784 li
318.028 42.8785 li
318.028 25.2616 li
318.723 22.9617 li
cp
f
361.692 25.59 mo
361.692 42.5501 li
360.898 45.1784 li
360.699 45.8352 li
360.699 22.3049 li
360.898 22.9617 li
361.692 25.59 li
cp
f
333.013 54.3985 mo
332.021 54.3985 li
332.021 13.7415 li
333.013 13.7415 li
333.013 54.3985 li
cp
f
340.304 54.3985 mo
339.311 54.3985 li
339.311 13.7415 li
340.304 13.7415 li
340.304 54.3985 li
cp
f
347.793 54.3985 mo
346.8 54.3985 li
346.8 13.7415 li
347.793 13.7415 li
347.793 54.3985 li
cp
f
355.032 54.3985 mo
354.04 54.3985 li
354.04 13.7415 li
355.032 13.7415 li
355.032 54.3985 li
cp
f
360.298 20.9774 mo
319.322 20.9774 li
319.622 19.9852 li
359.999 19.9852 li
360.298 20.9774 li
cp
f
362.321 27.6725 mo
317.3 27.6725 li
317.6 26.6804 li
362.021 26.6804 li
362.321 27.6725 li
cp
f
364.252 34.07 mo
364.102 34.5661 li
315.518 34.5661 li
315.368 34.07 li
315.518 33.574 li
364.102 33.574 li
364.252 34.07 li
cp
f
362.321 40.4675 mo
362.021 41.4597 li
317.6 41.4597 li
317.3 40.4675 li
362.321 40.4675 li
cp
f
360.298 47.1627 mo
359.999 48.1549 li
319.622 48.1549 li
319.322 47.1627 li
360.298 47.1627 li
cp
f
327.45 57.2261 mo
327.45 57.2261 li
326.907 57.2261 326.468 56.7865 326.468 56.2443 cv
326.468 52.5528 li
326.468 52.0106 326.907 51.571 327.45 51.571 cv
327.45 51.571 li
327.992 51.571 328.431 52.0106 328.431 52.5528 cv
328.431 56.2443 li
328.431 56.7865 327.992 57.2261 327.45 57.2261 cv
cp
0 .283757 1 0 cmyk
f
352.175 57.2261 mo
352.175 57.2261 li
351.632 57.2261 351.193 56.7865 351.193 56.2443 cv
351.193 52.5528 li
351.193 52.0106 351.632 51.571 352.175 51.571 cv
352.175 51.571 li
352.717 51.571 353.156 52.0106 353.156 52.5528 cv
353.156 56.2443 li
353.156 56.7865 352.717 57.2261 352.175 57.2261 cv
cp
0 .418433 1 0 cmyk
f
327.45 16.7176 mo
327.45 16.7176 li
326.907 16.7176 326.468 16.2781 326.468 15.7359 cv
326.468 12.0444 li
326.468 11.5021 326.907 11.0626 327.45 11.0626 cv
327.45 11.0626 li
327.992 11.0626 328.431 11.5021 328.431 12.0444 cv
328.431 15.7359 li
328.431 16.2781 327.992 16.7176 327.45 16.7176 cv
cp
0 .283757 1 0 cmyk
f
352.175 16.7176 mo
352.175 16.7176 li
351.632 16.7176 351.193 16.2781 351.193 15.7359 cv
351.193 12.0444 li
351.193 11.5021 351.632 11.0626 352.175 11.0626 cv
352.175 11.0626 li
352.717 11.0626 353.156 11.5021 353.156 12.0444 cv
353.156 15.7359 li
353.156 16.2781 352.717 16.7176 352.175 16.7176 cv
cp
0 .418433 1 0 cmyk
f
339.81 3.67102 mo
334.47 3.67102 li
333.922 3.67102 333.478 3.22681 333.478 2.67885 cv
333.478 .992168 li
333.478 .444209 333.922 0 334.47 0 cv
339.81 0 li
339.81 3.67102 li
cp
0 .283757 1 0 cmyk
f
345.151 3.67102 mo
339.81 3.67102 li
339.81 0 li
345.151 0 li
345.699 0 346.143 .444209 346.143 .992168 cv
346.143 2.67885 li
346.143 3.22681 345.699 3.67102 345.151 3.67102 cv
cp
0 .418433 1 0 cmyk
f
336.816 223.712 mo
329.284 205.256 li
329.284 205.256 314.618 220.981 324.495 233.071 cv
334.372 245.161 336.816 223.712 336.816 223.712 cv
cp
.568017 .483009 .477821 .146273 cmyk
f
342.157 271.06 mo
332.376 271.06 li
331.275 271.06 330.381 270.166 330.381 269.064 cv
330.381 263.143 li
342.157 263.143 li
342.157 271.06 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
351.88 271.06 mo
342.099 271.06 li
342.099 263.143 li
353.875 263.143 li
353.875 269.064 li
353.875 270.166 352.982 271.06 351.88 271.06 cv
cp
.184329 .979278 .988983 .0842298 cmyk
f
329.898 233.033 mo
329.594 232.906 328.734 232.425 327.353 230.736 cv
325.642 228.64 324.796 226.335 324.768 223.686 cv
324.744 221.429 325.323 218.94 326.488 216.288 cv
327.052 215.004 327.701 213.805 328.35 212.736 cv
333.022 224.184 li
332.874 225.123 332.59 226.691 332.126 228.324 cv
331.17 231.693 330.209 232.761 329.898 233.033 cv
cp
.64654 .568261 .56231 .337865 cmyk
f
342.153 267.611 mo
338.647 267.611 li
336.231 267.611 334.272 265.653 334.272 263.237 cv
334.272 254.685 li
342.153 254.685 li
342.153 267.611 li
cp
.638788 .555108 .526177 .275181 cmyk
f
342.153 223.213 mo
342.153 259.032 li
340.3 262.717 336.484 265.662 332.077 265.662 cv
325.851 265.662 322.799 260.615 322.799 254.389 cv
322.799 252.442 325.316 228.711 325.316 228.711 cv
325.953 226.201 327.848 224.276 330.225 223.539 cv
330.91 223.327 331.635 223.213 332.381 223.213 cv
342.153 223.213 li
cp
.494789 .410681 .411505 .0505074 cmyk
f
347.491 223.712 mo
355.023 205.256 li
355.023 205.256 369.689 220.981 359.812 233.071 cv
349.935 245.161 347.491 223.712 347.491 223.712 cv
cp
.664424 .593866 .580499 .411505 cmyk
f
354.408 233.033 mo
354.097 232.761 353.136 231.693 352.18 228.324 cv
351.717 226.692 351.432 225.124 351.285 224.184 cv
355.957 212.736 li
356.606 213.806 357.254 215.004 357.818 216.288 cv
358.984 218.94 359.562 221.429 359.538 223.686 cv
359.51 226.335 358.665 228.64 356.953 230.736 cv
355.573 232.425 354.713 232.906 354.408 233.033 cv
cp
.688991 .623255 .613916 .53872 cmyk
f
342.153 267.611 mo
345.66 267.611 li
348.076 267.611 350.034 265.653 350.034 263.237 cv
350.034 254.685 li
342.153 254.685 li
342.153 267.611 li
cp
.677577 .618402 .58056 .456641 cmyk
f
361.707 254.389 mo
361.707 260.615 358.655 265.662 352.429 265.662 cv
347.858 265.662 343.923 262.942 342.153 259.032 cv
342.108 227.092 li
342.108 226.84 li
342.107 226.039 li
342.104 224.084 li
342.103 223.213 li
352.125 223.213 li
355.125 223.213 357.781 225.046 358.88 227.767 cv
358.922 227.869 358.961 227.972 358.996 228.077 cv
359.071 228.283 359.135 228.495 359.19 228.711 cv
359.19 228.711 359.215 228.946 359.26 229.371 cv
359.33 230.039 359.449 231.174 359.599 232.604 cv
359.681 233.383 359.771 234.251 359.867 235.178 cv
359.918 235.675 359.972 236.189 360.027 236.717 cv
360.049 236.929 360.071 237.144 360.093 237.359 cv
360.11 237.528 360.127 237.698 360.145 237.868 cv
360.147 237.888 360.149 237.909 360.151 237.93 cv
360.169 238.104 360.187 238.279 360.205 238.455 cv
360.207 238.473 360.209 238.49 360.21 238.507 cv
360.229 238.687 360.247 238.868 360.266 239.049 cv
360.289 239.268 360.312 239.487 360.334 239.709 cv
360.363 239.989 360.391 240.271 360.42 240.553 cv
360.451 240.855 360.482 241.158 360.513 241.462 cv
361.12 247.434 361.707 253.449 361.707 254.389 cv
cp
.638788 .555108 .526177 .275181 cmyk
f
342.153 259.032 mo
342.153 259.032 336.966 253.142 338.562 251.945 cv
340.158 250.748 342.153 250.748 342.153 250.748 cv
342.153 259.032 li
cp
0 .283757 1 0 cmyk
f
342.153 259.032 mo
342.153 259.032 347.341 253.142 345.745 251.945 cv
344.148 250.748 342.153 250.748 342.153 250.748 cv
342.153 259.032 li
cp
0 .418433 1 0 cmyk
f
331.578 254.89 mo
331.578 255.276 331.266 255.588 330.88 255.588 cv
330.494 255.588 330.182 255.276 330.182 254.89 cv
330.182 254.504 330.494 254.192 330.88 254.192 cv
331.266 254.192 331.578 254.504 331.578 254.89 cv
cp
.714839 .654688 .644251 .716548 cmyk
f
327.987 256.287 mo
327.987 256.672 327.674 256.985 327.289 256.985 cv
326.903 256.985 326.59 256.672 326.59 256.287 cv
326.59 255.901 326.903 255.588 327.289 255.588 cv
327.674 255.588 327.987 255.901 327.987 256.287 cv
cp
f
331.279 258.733 mo
331.279 259.119 330.966 259.431 330.581 259.431 cv
330.195 259.431 329.882 259.119 329.882 258.733 cv
329.882 258.347 330.195 258.035 330.581 258.035 cv
330.966 258.035 331.279 258.347 331.279 258.733 cv
cp
f
352.429 254.89 mo
352.429 255.276 352.741 255.588 353.127 255.588 cv
353.513 255.588 353.825 255.276 353.825 254.89 cv
353.825 254.504 353.513 254.192 353.127 254.192 cv
352.741 254.192 352.429 254.504 352.429 254.89 cv
cp
f
356.02 256.287 mo
356.02 256.672 356.333 256.985 356.719 256.985 cv
357.104 256.985 357.417 256.672 357.417 256.287 cv
357.417 255.901 357.104 255.588 356.719 255.588 cv
356.333 255.588 356.02 255.901 356.02 256.287 cv
cp
f
352.728 258.733 mo
352.728 259.119 353.041 259.431 353.426 259.431 cv
353.812 259.431 354.125 259.119 354.125 258.733 cv
354.125 258.347 353.812 258.035 353.426 258.035 cv
353.041 258.035 352.728 258.347 352.728 258.733 cv
cp
f
354.025 241.263 mo
353.831 241.263 353.637 241.181 353.5 241.022 cv
352.667 240.051 351.842 239.582 351.052 239.625 cv
349.835 239.694 348.97 240.946 348.962 240.958 cv
348.748 241.273 348.318 241.357 348.003 241.144 cv
347.687 240.931 347.602 240.504 347.814 240.187 cv
347.864 240.113 349.057 238.36 350.962 238.246 cv
352.209 238.171 353.417 238.802 354.55 240.122 cv
354.798 240.411 354.765 240.848 354.475 241.096 cv
354.345 241.208 354.185 241.263 354.025 241.263 cv
cp
f
335.972 241.263 mo
335.75 241.263 335.532 241.156 335.398 240.958 cv
335.398 240.958 li
335.39 240.946 334.525 239.694 333.308 239.625 cv
332.515 239.582 331.693 240.051 330.859 241.022 cv
330.611 241.312 330.175 241.345 329.885 241.096 cv
329.595 240.848 329.562 240.411 329.81 240.122 cv
330.942 238.802 332.149 238.171 333.398 238.246 cv
335.303 238.36 336.496 240.113 336.546 240.187 cv
336.758 240.505 336.673 240.934 336.356 241.146 cv
336.238 241.225 336.104 241.263 335.972 241.263 cv
cp
f
359.867 235.178 mo
357.521 234.17 348.161 229.249 342.107 226.039 cv
339.021 224.404 336.793 223.213 336.793 223.213 cv
344.416 223.213 li
358.996 228.077 li
359.071 228.283 359.135 228.495 359.19 228.711 cv
359.19 228.711 359.215 228.946 359.26 229.371 cv
359.33 230.039 359.449 231.174 359.599 232.604 cv
359.681 233.383 359.771 234.251 359.867 235.178 cv
cp
.264164 .199466 .195499 0 cmyk
f
360.513 241.462 mo
336.793 223.213 li
344.416 223.213 li
359.599 232.604 li
359.681 233.384 359.771 234.251 359.867 235.178 cv
359.919 235.675 359.973 236.189 360.027 236.717 cv
360.049 236.929 360.071 237.144 360.093 237.359 cv
360.11 237.528 360.127 237.698 360.145 237.868 cv
360.147 237.888 360.149 237.909 360.151 237.93 cv
360.169 238.104 360.187 238.279 360.205 238.455 cv
360.207 238.473 360.209 238.49 360.21 238.507 cv
360.229 238.687 360.247 238.868 360.266 239.049 cv
360.289 239.268 360.312 239.487 360.334 239.709 cv
360.362 239.989 360.391 240.271 360.42 240.553 cv
360.451 240.855 360.482 241.158 360.513 241.462 cv
cp
.169863 .120485 .123751 0 cmyk
f
339.632 223.213 mo
359.459 231.268 li
359.791 234.442 li
336.793 223.213 li
339.632 223.213 li
cp
.040528 .0235904 .026154 0 cmyk
f
114.895 39.0547 mo
114.895 39.0547 li
130.399 8.22728 li
130.399 8.22728 li
133.464 9.76864 134.698 13.5026 133.157 16.5674 cv
123.235 36.2963 li
121.693 39.3611 117.96 40.596 114.895 39.0547 cv
cp
1 .848264 .334234 .21503 cmyk
f
109.35 52.7468 mo
107.209 51.67 li
113.824 38.5163 li
115.965 39.5931 li
109.35 52.7468 li
cp
f
103.823 48.1868 mo
103.485 48.1868 103.145 48.241 102.814 48.3505 cv
102.001 48.6192 101.342 49.1884 100.957 49.953 cv
100.573 50.7177 100.509 51.5863 100.778 52.3989 cv
101.047 53.2115 101.616 53.8708 102.38 54.2554 cv
103.959 55.0493 105.889 54.411 106.683 52.8324 cv
107.067 52.0678 107.131 51.1992 106.862 50.3866 cv
106.594 49.5739 106.025 48.9146 105.26 48.53 cv
104.807 48.302 104.317 48.1868 103.823 48.1868 cv
cp
103.811 56.9931 mo
102.966 56.9931 102.109 56.8014 101.304 56.3964 cv
99.9671 55.7243 98.9723 54.5718 98.5025 53.1515 cv
98.0327 51.7311 98.1442 50.2127 98.8165 48.8762 cv
99.4886 47.5397 100.641 46.5449 102.061 46.0751 cv
103.482 45.6053 105 45.7168 106.337 46.389 cv
109.096 47.7766 110.212 51.1501 108.824 53.9092 cv
108.824 53.9093 li
107.841 55.8632 105.862 56.9931 103.811 56.9931 cv
cp
f
115.658 39.2357 mo
115.658 39.2357 li
115.658 4.72917 li
115.658 4.72917 li
112.227 4.72917 109.446 7.51015 109.446 10.9407 cv
109.446 33.0242 li
109.446 36.4548 112.227 39.2357 115.658 39.2357 cv
cp
.989349 .831296 .261204 .112734 cmyk
f
116.856 53.9593 mo
114.459 53.9593 li
114.459 39.2357 li
116.856 39.2357 li
116.856 53.9593 li
cp
f
120.008 52.0298 mo
118.241 52.0298 116.804 53.4673 116.804 55.2342 cv
116.804 57.0011 118.241 58.4385 120.008 58.4385 cv
121.775 58.4385 123.212 57.0011 123.212 55.2342 cv
123.212 53.4673 121.775 52.0298 120.008 52.0298 cv
cp
120.008 60.8351 mo
116.92 60.8351 114.407 58.3225 114.407 55.2342 cv
114.407 52.1458 116.92 49.6333 120.008 49.6333 cv
123.096 49.6333 125.609 52.1458 125.609 55.2342 cv
125.609 58.3225 123.096 60.8351 120.008 60.8351 cv
cp
f
141.534 64.4031 mo
137.429 64.4031 li
135.796 64.4031 134.471 63.0788 134.471 61.4451 cv
134.471 36.5337 li
134.471 34.9001 135.796 33.5757 137.429 33.5757 cv
141.534 33.5757 li
141.534 64.4031 li
cp
0 .283757 1 0 cmyk
f
141.534 64.4031 mo
139.244 64.4031 li
139.244 33.5757 li
141.534 33.5757 li
141.534 64.4031 li
cp
0 .418433 1 0 cmyk
f
145.992 34.5989 mo
139.244 34.5989 li
139.244 33.5757 li
145.992 33.5757 li
145.992 34.5989 li
cp
f
145.992 37.0826 mo
139.244 37.0826 li
139.244 36.0594 li
145.992 36.0594 li
145.992 37.0826 li
cp
f
145.992 39.5663 mo
139.244 39.5663 li
139.244 38.5431 li
145.992 38.5431 li
145.992 39.5663 li
cp
f
145.992 42.05 mo
139.244 42.05 li
139.244 41.0267 li
145.992 41.0267 li
145.992 42.05 li
cp
f
145.992 44.5337 mo
139.244 44.5337 li
139.244 43.5104 li
145.992 43.5104 li
145.992 44.5337 li
cp
f
145.992 47.0173 mo
139.244 47.0173 li
139.244 45.9941 li
145.992 45.9941 li
145.992 47.0173 li
cp
f
145.992 49.501 mo
139.244 49.501 li
139.244 48.4778 li
145.992 48.4778 li
145.992 49.501 li
cp
f
145.992 51.9847 mo
139.244 51.9847 li
139.244 50.9615 li
145.992 50.9615 li
145.992 51.9847 li
cp
f
145.992 54.4684 mo
139.244 54.4684 li
139.244 53.4451 li
145.992 53.4451 li
145.992 54.4684 li
cp
f
145.992 56.9521 mo
139.244 56.9521 li
139.244 55.9288 li
145.992 55.9288 li
145.992 56.9521 li
cp
f
145.992 59.4357 mo
139.244 59.4357 li
139.244 58.4125 li
145.992 58.4125 li
145.992 59.4357 li
cp
f
145.992 61.9194 mo
139.244 61.9194 li
139.244 60.8962 li
145.992 60.8962 li
145.992 61.9194 li
cp
f
145.992 64.4031 mo
139.244 64.4031 li
139.244 63.3799 li
145.992 63.3799 li
145.992 64.4031 li
cp
f
155.951 17.0862 mo
155.951 26.0933 li
155.951 27.6212 155.673 29.1363 155.131 30.5649 cv
155.131 30.5649 li
154.589 31.9934 154.312 33.5086 154.312 35.0364 cv
154.312 45.8212 li
154.312 46.7982 155.104 47.5903 156.081 47.5903 cv
157.174 47.5903 li
157.174 17.0862 li
155.951 17.0862 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
158.397 17.0862 mo
158.397 26.0933 li
158.397 27.6212 158.675 29.1363 159.217 30.5649 cv
159.217 30.5649 li
159.759 31.9934 160.037 33.5086 160.037 35.0364 cv
160.037 45.8212 li
160.037 46.7982 159.245 47.5903 158.268 47.5903 cv
157.174 47.5903 li
157.174 17.0862 li
158.397 17.0862 li
cp
.184329 .979278 .988983 .0842298 cmyk
f
149.012 7.24131 mo
149.012 13.2007 li
147.988 13.2007 li
147.988 7.24131 li
149.012 7.24131 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
151.495 7.24131 mo
151.495 13.2007 li
150.472 13.2007 li
150.472 7.24131 li
151.495 7.24131 li
cp
f
153.979 7.24131 mo
153.979 13.2007 li
152.956 13.2007 li
152.956 7.24131 li
153.979 7.24131 li
cp
f
156.463 7.24131 mo
156.463 13.2007 li
155.439 13.2007 li
155.439 7.24131 li
156.463 7.24131 li
cp
f
166.36 10.9107 mo
166.36 15.0155 li
166.36 16.6492 165.036 17.9736 163.402 17.9736 cv
150.946 17.9736 li
149.313 17.9736 147.988 16.6492 147.988 15.0155 cv
147.988 10.9107 li
166.36 10.9107 li
cp
.184329 .979278 .988983 .0842298 cmyk
f
157.174 10.9107 mo
157.174 13.2007 li
147.988 13.2007 li
147.988 10.9107 li
157.174 10.9107 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
157.174 10.9107 mo
157.174 17.9736 li
163.402 17.9736 li
165.036 17.9736 166.36 16.6492 166.36 15.0155 cv
166.36 10.9107 li
157.174 10.9107 li
cp
.244694 1 1 .201633 cmyk
f
166.36 10.9107 mo
166.36 13.2007 li
157.174 13.2007 li
157.174 10.9107 li
166.36 10.9107 li
cp
.184329 .979278 .988983 .0842298 cmyk
f
158.946 7.24131 mo
158.946 13.2007 li
157.923 13.2007 li
157.923 7.24131 li
158.946 7.24131 li
cp
f
161.43 7.24131 mo
161.43 13.2007 li
160.407 13.2007 li
160.407 7.24131 li
161.43 7.24131 li
cp
f
163.914 7.24131 mo
163.914 13.2007 li
162.891 13.2007 li
162.891 7.24131 li
163.914 7.24131 li
cp
f
166.397 7.24131 mo
166.397 13.2007 li
165.374 13.2007 li
165.374 7.24131 li
166.397 7.24131 li
cp
f
230.892 355.176 mo
229.048 355.176 li
229.048 344.829 li
230.892 344.829 li
230.892 355.176 li
cp
0 .283757 1 0 cmyk
f
277.082 336.385 mo
277.082 348.574 267.201 358.456 255.011 358.456 cv
252.64 358.456 250.357 358.082 248.216 357.389 cv
245.875 356.633 243.706 355.495 241.78 354.051 cv
240.983 353.453 240.227 352.802 239.519 352.104 cv
239.057 351.648 238.614 351.173 238.194 350.678 cv
237.733 350.137 237.299 349.574 236.892 348.99 cv
236.849 348.927 236.805 348.864 236.761 348.8 cv
234.35 345.263 232.941 340.988 232.941 336.385 cv
232.941 324.195 242.822 314.314 255.011 314.314 cv
259.697 314.314 264.044 315.774 267.617 318.266 cv
267.647 318.287 267.677 318.307 267.706 318.329 cv
268.352 318.783 268.971 319.27 269.562 319.789 cv
270.073 320.237 270.563 320.708 271.03 321.201 cv
271.031 321.202 271.031 321.202 271.031 321.202 cv
271.715 321.924 272.352 322.693 272.935 323.503 cv
274.287 325.38 275.352 327.48 276.063 329.736 cv
276.725 331.834 277.082 334.067 277.082 336.385 cv
cp
.184329 .979278 .988983 .0842298 cmyk
f
267.937 322.425 mo
267.937 337.273 255.9 349.31 241.052 349.31 cv
239.637 349.31 238.248 349.201 236.892 348.99 cv
234.401 345.417 232.941 341.071 232.941 336.385 cv
232.941 324.195 242.822 314.314 255.011 314.314 cv
259.697 314.314 264.044 315.774 267.617 318.266 cv
267.827 319.622 267.937 321.01 267.937 322.425 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
269.571 320.515 mo
269.571 324.59 268.773 328.543 267.199 332.265 cv
265.678 335.86 263.502 339.088 260.73 341.86 cv
257.958 344.632 254.73 346.808 251.136 348.329 cv
247.413 349.903 243.46 350.702 239.385 350.702 cv
238.989 350.702 238.592 350.693 238.194 350.678 cv
237.733 350.137 237.299 349.574 236.892 348.99 cv
236.849 348.927 236.805 348.864 236.761 348.8 cv
237.633 348.88 238.51 348.92 239.385 348.92 cv
246.973 348.92 254.105 345.965 259.47 340.6 cv
264.835 335.235 267.789 328.102 267.789 320.515 cv
267.789 319.787 267.762 319.056 267.706 318.329 cv
268.352 318.783 268.971 319.27 269.562 319.789 cv
269.568 320.031 269.571 320.273 269.571 320.515 cv
cp
0 .283757 1 0 cmyk
f
272.937 323.882 mo
272.937 327.956 272.139 331.91 270.565 335.631 cv
269.045 339.227 266.869 342.454 264.096 345.226 cv
261.325 347.999 258.096 350.175 254.502 351.695 cv
250.779 353.27 246.827 354.068 242.752 354.068 cv
242.428 354.068 242.104 354.063 241.78 354.051 cv
240.983 353.453 240.227 352.802 239.519 352.104 cv
240.589 352.225 241.672 352.286 242.752 352.286 cv
250.339 352.286 257.472 349.331 262.836 343.966 cv
268.201 338.601 271.155 331.468 271.155 323.882 cv
271.155 322.988 271.113 322.092 271.031 321.202 cv
271.715 321.924 272.352 322.693 272.935 323.503 cv
272.936 323.629 272.937 323.755 272.937 323.882 cv
cp
0 .418433 1 0 cmyk
f
231.17 374.515 mo
212.661 374.515 li
210.123 374.515 208.059 372.451 208.059 369.913 cv
208.059 367.375 210.123 365.311 212.661 365.311 cv
217.131 365.311 li
217.513 365.311 217.823 365.62 217.823 366.002 cv
217.823 366.384 217.513 366.693 217.131 366.693 cv
212.661 366.693 li
210.886 366.693 209.441 368.138 209.441 369.913 cv
209.441 371.688 210.886 373.133 212.661 373.133 cv
231.17 373.133 li
231.552 373.133 231.861 373.442 231.861 373.824 cv
231.861 374.206 231.552 374.515 231.17 374.515 cv
cp
.714839 .654688 .644251 .716548 cmyk
f
250.866 365.192 mo
250.866 365.192 242.434 350.46 228.237 352.321 cv
214.906 354.068 217.131 365.192 217.131 365.192 cv
250.866 365.192 li
cp
.494789 .410681 .411505 .0505074 cmyk
f
250.866 367.357 mo
217.131 367.357 li
217.131 365.192 li
250.866 365.192 li
250.866 367.357 li
cp
.638788 .555108 .526177 .275181 cmyk
f
244.161 356.88 mo
244.161 360.467 241.253 363.376 237.666 363.376 cv
234.078 363.376 231.17 360.467 231.17 356.88 cv
231.17 353.293 234.078 350.385 237.666 350.385 cv
241.253 350.385 244.161 353.293 244.161 356.88 cv
cp
f
233.39 347.354 mo
231.11 346.237 228.83 346.237 226.55 347.354 cv
225.94 347.652 225.2 347.441 224.836 346.867 cv
223.703 345.082 223.703 343.296 224.836 341.511 cv
225.2 340.937 225.94 340.726 226.55 341.024 cv
228.83 342.141 231.11 342.141 233.39 341.024 cv
234 340.726 234.74 340.937 235.104 341.511 cv
236.237 343.296 236.237 345.082 235.104 346.867 cv
234.74 347.441 234 347.652 233.39 347.354 cv
cp
0 .283757 1 0 cmyk
f
244.161 361.288 mo
244.161 361.627 244.436 361.902 244.775 361.902 cv
245.114 361.902 245.388 361.627 245.388 361.288 cv
245.388 360.949 245.114 360.674 244.775 360.674 cv
244.436 360.674 244.161 360.949 244.161 361.288 cv
cp
.714839 .654688 .644251 .716548 cmyk
f
228.525 344.241 mo
228.525 344.739 228.121 345.142 227.624 345.142 cv
227.126 345.142 226.722 344.739 226.722 344.241 cv
226.722 343.743 227.126 343.34 227.624 343.34 cv
228.121 343.34 228.525 343.743 228.525 344.241 cv
cp
0 0 0 0 cmyk
f
233.218 344.241 mo
233.218 344.739 232.814 345.142 232.317 345.142 cv
231.819 345.142 231.415 344.739 231.415 344.241 cv
231.415 343.743 231.819 343.34 232.317 343.34 cv
232.814 343.34 233.218 343.743 233.218 344.241 cv
cp
f
138.127 166.365 mo
110.874 166.365 li
110.874 120.371 li
138.127 120.371 li
138.127 166.365 li
cp
.989349 .831296 .261204 .112734 cmyk
f
165.179 166.365 mo
137.926 166.365 li
137.926 120.371 li
165.179 120.371 li
165.179 166.365 li
cp
1 .848264 .334234 .21503 cmyk
f
133.05 166.365 mo
115.911 166.365 li
115.911 135.242 li
133.05 135.242 li
133.05 166.365 li
cp
1 .857359 .431311 .447425 cmyk
f
130.622 147.527 mo
118.339 147.527 li
118.339 137.788 li
130.622 137.788 li
130.622 147.527 li
cp
.46537 0 .0847486 0 cmyk
f
130.622 163.794 mo
118.339 163.794 li
118.339 150.345 li
130.622 150.345 li
130.622 163.794 li
cp
f
161.055 153.036 mo
137.926 153.036 li
137.926 135.242 li
161.055 135.242 li
161.055 153.036 li
cp
f
171.733 127.047 mo
104.32 127.047 li
109.11 118.922 li
166.943 118.922 li
171.733 127.047 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
104.324 127.04 mo
104.324 127.042 104.324 127.044 104.324 127.047 cv
104.322 127.099 104.32 127.153 104.32 127.206 cv
104.32 129.068 105.829 130.577 107.691 130.577 cv
109.552 130.577 111.061 129.068 111.061 127.206 cv
111.061 127.153 111.06 127.099 111.058 127.047 cv
110.974 125.259 109.499 123.836 107.691 123.836 cv
107.039 123.836 106.432 124.02 105.916 124.34 cv
104.324 127.04 li
cp
f
117.803 127.206 mo
117.803 129.068 116.294 130.577 114.432 130.577 cv
112.57 130.577 111.061 129.068 111.061 127.206 cv
111.061 125.345 112.57 123.836 114.432 123.836 cv
116.294 123.836 117.803 125.345 117.803 127.206 cv
cp
0 .283757 1 0 cmyk
f
124.544 127.206 mo
124.544 129.068 123.035 130.577 121.173 130.577 cv
119.312 130.577 117.803 129.068 117.803 127.206 cv
117.803 125.345 119.312 123.836 121.173 123.836 cv
123.035 123.836 124.544 125.345 124.544 127.206 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
131.285 127.206 mo
131.285 129.068 129.776 130.577 127.914 130.577 cv
126.053 130.577 124.544 129.068 124.544 127.206 cv
124.544 125.345 126.053 123.836 127.914 123.836 cv
129.776 123.836 131.285 125.345 131.285 127.206 cv
cp
0 .283757 1 0 cmyk
f
138.026 127.206 mo
138.026 129.068 136.517 130.577 134.656 130.577 cv
132.794 130.577 131.285 129.068 131.285 127.206 cv
131.285 125.345 132.794 123.836 134.656 123.836 cv
136.517 123.836 138.026 125.345 138.026 127.206 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
144.768 127.206 mo
144.768 129.068 143.258 130.577 141.397 130.577 cv
139.535 130.577 138.026 129.068 138.026 127.206 cv
138.026 125.345 139.535 123.836 141.397 123.836 cv
143.258 123.836 144.768 125.345 144.768 127.206 cv
cp
0 .283757 1 0 cmyk
f
151.509 127.206 mo
151.509 129.068 150 130.577 148.138 130.577 cv
146.277 130.577 144.768 129.068 144.768 127.206 cv
144.768 125.345 146.277 123.836 148.138 123.836 cv
150 123.836 151.509 125.345 151.509 127.206 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
158.25 127.206 mo
158.25 129.068 156.741 130.577 154.879 130.577 cv
153.018 130.577 151.509 129.068 151.509 127.206 cv
151.509 125.345 153.018 123.836 154.879 123.836 cv
156.741 123.836 158.25 125.345 158.25 127.206 cv
cp
0 .283757 1 0 cmyk
f
164.991 127.206 mo
164.991 129.068 163.482 130.577 161.621 130.577 cv
159.759 130.577 158.25 129.068 158.25 127.206 cv
158.25 125.345 159.759 123.836 161.621 123.836 cv
163.482 123.836 164.991 125.345 164.991 127.206 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
170.138 124.341 mo
169.622 124.021 169.014 123.836 168.361 123.836 cv
166.554 123.836 165.078 125.259 164.994 127.047 cv
164.993 127.099 164.991 127.153 164.991 127.206 cv
164.991 129.068 166.501 130.577 168.361 130.577 cv
170.223 130.577 171.733 129.068 171.733 127.206 cv
171.733 127.153 171.731 127.099 171.729 127.047 cv
171.729 127.044 171.729 127.042 171.729 127.04 cv
170.138 124.341 li
cp
0 .283757 1 0 cmyk
f
117.803 118.922 mo
111.061 118.922 li
111.061 127.206 li
117.803 127.206 li
117.803 118.922 li
cp
f
131.285 118.922 mo
124.544 118.922 li
124.544 127.206 li
131.285 127.206 li
131.285 118.922 li
cp
f
144.768 118.922 mo
138.026 118.922 li
138.026 127.206 li
144.768 127.206 li
144.768 118.922 li
cp
f
158.25 118.922 mo
151.509 118.922 li
151.509 127.206 li
158.25 127.206 li
158.25 118.922 li
cp
f
171.733 127.047 mo
171.733 127.206 li
164.991 127.206 li
164.991 118.922 li
166.943 118.922 li
171.733 127.047 li
cp
f
153.626 145.845 mo
153.626 147.471 151.79 148.79 149.524 148.79 cv
147.258 148.79 145.422 147.471 145.422 145.845 cv
145.422 144.219 147.258 142.901 149.524 142.901 cv
151.79 142.901 153.626 144.219 153.626 145.845 cv
cp
0 0 0 0 cmyk
f
150.824 140.537 mo
150.824 141.255 150.241 141.838 149.523 141.838 cv
148.805 141.838 148.223 141.255 148.223 140.537 cv
148.223 139.819 148.805 139.237 149.523 139.237 cv
150.241 139.237 150.824 139.819 150.824 140.537 cv
cp
f
147.223 141.601 mo
147.223 142.319 146.64 142.901 145.922 142.901 cv
145.204 142.901 144.622 142.319 144.622 141.601 cv
144.622 140.882 145.204 140.3 145.922 140.3 cv
146.64 140.3 147.223 140.882 147.223 141.601 cv
cp
f
154.55 141.601 mo
154.55 142.319 153.968 142.901 153.25 142.901 cv
152.531 142.901 151.949 142.319 151.949 141.601 cv
151.949 140.882 152.531 140.3 153.25 140.3 cv
153.968 140.3 154.55 140.882 154.55 141.601 cv
cp
f
167.803 169.099 mo
108.335 169.099 li
108.335 166.218 li
167.803 166.218 li
167.803 169.099 li
cp
1 .857359 .431311 .447425 cmyk
f
153.319 106.218 mo
122.758 106.218 li
120.923 106.218 119.436 107.706 119.436 109.54 cv
119.436 118.922 li
156.641 118.922 li
156.641 109.54 li
156.641 107.706 155.154 106.218 153.319 106.218 cv
cp
f
123.981 112.468 mo
124.197 112.468 li
124.375 112.468 124.516 112.418 124.621 112.318 cv
124.726 112.218 124.778 112.08 124.778 111.904 cv
124.778 111.609 124.614 111.461 124.287 111.461 cv
123.981 111.461 li
123.981 112.468 li
cp
125.977 111.898 mo
125.977 112.388 125.832 112.766 125.544 113.033 cv
125.255 113.299 124.845 113.433 124.314 113.433 cv
123.981 113.433 li
123.981 114.886 li
122.797 114.886 li
122.797 110.505 li
124.314 110.505 li
124.867 110.505 125.283 110.626 125.56 110.868 cv
125.838 111.109 125.977 111.453 125.977 111.898 cv
cp
0 0 0 0 cmyk
f
129.89 114.886 mo
127.289 114.886 li
127.289 110.505 li
129.89 110.505 li
129.89 111.455 li
128.473 111.455 li
128.473 112.144 li
129.785 112.144 li
129.785 113.094 li
128.473 113.094 li
128.473 113.921 li
129.89 113.921 li
129.89 114.886 li
cp
f
133.204 114.886 mo
132.02 114.886 li
132.02 111.473 li
130.95 111.473 li
130.95 110.505 li
134.27 110.505 li
134.27 111.473 li
133.204 111.473 li
133.204 114.886 li
cp
f
138.375 113.556 mo
138.375 113.827 138.306 114.069 138.169 114.279 cv
138.031 114.49 137.832 114.654 137.572 114.771 cv
137.313 114.888 137.008 114.946 136.658 114.946 cv
136.367 114.946 136.122 114.925 135.924 114.885 cv
135.726 114.844 135.521 114.772 135.307 114.67 cv
135.307 113.615 li
135.532 113.731 135.767 113.822 136.011 113.887 cv
136.255 113.952 136.478 113.984 136.682 113.984 cv
136.858 113.984 136.987 113.954 137.069 113.893 cv
137.151 113.832 137.192 113.753 137.192 113.657 cv
137.192 113.597 137.175 113.545 137.142 113.5 cv
137.109 113.455 137.056 113.41 136.983 113.364 cv
136.91 113.318 136.716 113.224 136.401 113.082 cv
136.115 112.952 135.901 112.826 135.758 112.704 cv
135.615 112.583 135.509 112.443 135.44 112.285 cv
135.371 112.127 135.337 111.94 135.337 111.725 cv
135.337 111.321 135.484 111.006 135.777 110.781 cv
136.071 110.555 136.474 110.442 136.988 110.442 cv
137.441 110.442 137.904 110.547 138.375 110.757 cv
138.013 111.671 li
137.603 111.483 137.25 111.389 136.952 111.389 cv
136.798 111.389 136.686 111.416 136.616 111.47 cv
136.546 111.524 136.511 111.591 136.511 111.671 cv
136.511 111.757 136.556 111.833 136.645 111.901 cv
136.734 111.969 136.975 112.093 137.368 112.273 cv
137.746 112.443 138.008 112.625 138.155 112.82 cv
138.302 113.015 138.375 113.26 138.375 113.556 cv
cp
f
143.421 114.886 mo
142.231 114.886 li
142.231 113.1 li
140.856 113.1 li
140.856 114.886 li
139.666 114.886 li
139.666 110.505 li
140.856 110.505 li
140.856 112.129 li
142.231 112.129 li
142.231 110.505 li
143.421 110.505 li
143.421 114.886 li
cp
f
146.067 112.689 mo
146.067 113.537 146.361 113.96 146.951 113.96 cv
147.25 113.96 147.473 113.857 147.617 113.651 cv
147.762 113.446 147.835 113.125 147.835 112.689 cv
147.835 112.252 147.761 111.929 147.614 111.72 cv
147.468 111.511 147.248 111.407 146.957 111.407 cv
146.363 111.407 146.067 111.834 146.067 112.689 cv
cp
149.081 112.689 mo
149.081 113.427 148.9 113.987 148.539 114.371 cv
148.177 114.754 147.648 114.946 146.951 114.946 cv
146.263 114.946 145.736 114.753 145.37 114.368 cv
145.003 113.982 144.82 113.421 144.82 112.683 cv
144.82 111.954 145.002 111.397 145.367 111.013 cv
145.731 110.628 146.261 110.436 146.957 110.436 cv
147.654 110.436 148.182 110.627 148.542 111.008 cv
148.902 111.39 149.081 111.95 149.081 112.689 cv
cp
f
151.67 112.468 mo
151.886 112.468 li
152.063 112.468 152.205 112.418 152.31 112.318 cv
152.415 112.218 152.467 112.08 152.467 111.904 cv
152.467 111.609 152.303 111.461 151.976 111.461 cv
151.67 111.461 li
151.67 112.468 li
cp
153.666 111.898 mo
153.666 112.388 153.521 112.766 153.233 113.033 cv
152.944 113.299 152.534 113.433 152.002 113.433 cv
151.67 113.433 li
151.67 114.886 li
150.486 114.886 li
150.486 110.505 li
152.002 110.505 li
152.556 110.505 152.971 110.626 153.249 110.868 cv
153.527 111.109 153.666 111.453 153.666 111.898 cv
cp
f
160.734 371.187 mo
113.476 371.187 li
113.476 315.915 li
160.734 315.915 li
160.734 371.187 li
cp
.989349 .831296 .261204 .112734 cmyk
f
160.734 371.187 mo
137.105 371.187 li
137.105 315.915 li
160.734 315.915 li
160.734 371.187 li
cp
1 .848264 .334234 .21503 cmyk
f
155.479 364.308 mo
119.377 364.308 li
119.377 320.251 li
155.479 320.251 li
155.479 364.308 li
cp
0 0 0 0 cmyk
f
142.311 313.344 mo
142.311 310.469 139.98 308.138 137.105 308.138 cv
134.23 308.138 131.899 310.469 131.899 313.344 cv
123.022 313.344 li
123.022 322.285 li
151.187 322.285 li
151.187 313.344 li
142.311 313.344 li
cp
0 .283757 1 0 cmyk
f
133.903 354.814 mo
133.455 354.814 133.072 354.492 132.995 354.049 cv
130.307 338.522 li
129.213 343.237 li
129.116 343.655 128.744 343.95 128.315 343.95 cv
125.258 343.95 li
124.749 343.95 124.336 343.538 124.336 343.028 cv
124.336 342.519 124.749 342.107 125.258 342.107 cv
127.583 342.107 li
129.541 333.67 li
129.64 333.242 130.024 332.941 130.465 332.957 cv
130.903 332.969 131.272 333.289 131.347 333.721 cv
133.844 348.145 li
136.792 328.736 li
136.859 328.293 137.236 327.962 137.685 327.953 cv
138.132 327.946 138.523 328.259 138.608 328.699 cv
141.341 342.815 li
142.845 336.83 li
142.943 336.439 143.284 336.157 143.687 336.135 cv
144.091 336.112 144.46 336.354 144.602 336.732 cv
146.613 342.107 li
149.774 342.107 li
150.283 342.107 150.696 342.519 150.696 343.028 cv
150.696 343.538 150.283 343.95 149.774 343.95 cv
145.974 343.95 li
145.589 343.95 145.245 343.712 145.11 343.352 cv
143.912 340.148 li
142.118 347.287 li
142.012 347.706 141.627 347.995 141.198 347.983 cv
140.767 347.971 140.401 347.661 140.319 347.237 cv
137.813 334.291 li
134.815 354.031 li
134.747 354.477 134.365 354.809 133.913 354.814 cv
133.91 354.814 133.906 354.814 133.903 354.814 cv
cp
.184329 .979278 .988983 .0842298 cmyk
f
142.311 313.344 mo
142.311 310.469 139.98 308.138 137.105 308.138 cv
137.105 322.285 li
151.187 322.285 li
151.187 313.344 li
142.311 313.344 li
cp
0 .418433 1 0 cmyk
f
152.016 358.528 mo
152.016 359.949 150.411 361.101 148.43 361.101 cv
146.45 361.101 144.845 359.949 144.845 358.528 cv
144.845 357.107 146.45 355.955 148.43 355.955 cv
150.411 355.955 152.016 357.107 152.016 358.528 cv
cp
f
149.566 353.889 mo
149.566 354.516 149.058 355.025 148.43 355.025 cv
147.802 355.025 147.293 354.516 147.293 353.889 cv
147.293 353.261 147.802 352.752 148.43 352.752 cv
149.058 352.752 149.566 353.261 149.566 353.889 cv
cp
f
146.419 354.818 mo
146.419 355.446 145.91 355.955 145.282 355.955 cv
144.655 355.955 144.146 355.446 144.146 354.818 cv
144.146 354.19 144.655 353.681 145.282 353.681 cv
145.91 353.681 146.419 354.19 146.419 354.818 cv
cp
f
152.823 354.818 mo
152.823 355.446 152.314 355.955 151.687 355.955 cv
151.059 355.955 150.55 355.446 150.55 354.818 cv
150.55 354.19 151.059 353.681 151.687 353.681 cv
152.314 353.681 152.823 354.19 152.823 354.818 cv
cp
f
343.183 332.272 mo
332.557 332.272 li
329.572 332.272 327.153 329.853 327.153 326.869 cv
327.153 326.869 li
327.153 323.885 329.572 321.466 332.557 321.466 cv
343.183 321.466 li
343.183 332.272 li
cp
.341833 0 .0318303 0 cmyk
f
343.183 373.45 mo
332.557 373.45 li
329.572 373.45 327.153 371.031 327.153 368.047 cv
327.153 368.046 li
327.153 365.062 329.572 362.643 332.557 362.643 cv
343.183 362.643 li
343.183 373.45 li
cp
f
343.183 367.033 mo
330.035 367.033 li
330.035 328.136 li
343.183 328.136 li
343.183 367.033 li
cp
f
343.183 362.643 mo
353.809 362.643 li
356.793 362.643 359.212 365.062 359.212 368.046 cv
359.212 368.047 li
359.212 371.031 356.793 373.45 353.809 373.45 cv
343.183 373.45 li
343.183 362.643 li
cp
.46537 0 .0847486 0 cmyk
f
343.183 321.466 mo
353.809 321.466 li
356.793 321.466 359.212 323.885 359.212 326.869 cv
359.212 326.869 li
359.212 329.853 356.793 332.272 353.809 332.272 cv
343.183 332.272 li
343.183 321.466 li
cp
f
343.183 327.883 mo
356.331 327.883 li
356.331 366.779 li
343.183 366.779 li
343.183 327.883 li
cp
f
343.183 358.748 mo
330.035 358.748 li
330.035 335.694 li
343.183 335.694 li
343.183 358.748 li
cp
.989349 .831296 .261204 .112734 cmyk
f
356.331 358.748 mo
343.183 358.748 li
343.183 335.694 li
356.331 335.694 li
356.331 358.748 li
cp
1 .848264 .334234 .21503 cmyk
f
343.183 321.466 mo
333.367 321.466 li
335.168 308.138 li
343.183 308.138 li
343.183 321.466 li
cp
0 .283757 1 0 cmyk
f
343.183 321.466 mo
352.999 321.466 li
351.198 308.138 li
343.183 308.138 li
343.183 321.466 li
cp
0 .418433 1 0 cmyk
f
351.192 346.866 mo
351.192 351.29 347.606 354.875 343.183 354.875 cv
338.76 354.875 335.174 351.29 335.174 346.866 cv
335.174 342.443 338.76 338.857 343.183 338.857 cv
347.606 338.857 351.192 342.443 351.192 346.866 cv
cp
0 0 0 0 cmyk
f
344.693 348.416 mo
343.357 349.752 341.447 350.009 340.427 348.989 cv
339.407 347.969 339.663 346.059 341 344.723 cv
342.336 343.386 344.246 343.13 345.266 344.15 cv
346.286 345.169 346.03 347.08 344.693 348.416 cv
cp
.184329 .979278 .988983 .0842298 cmyk
f
346.034 345.554 mo
345.434 346.154 344.461 346.154 343.861 345.554 cv
343.261 344.954 343.261 343.981 343.861 343.381 cv
344.461 342.781 345.434 342.781 346.034 343.381 cv
346.634 343.981 346.634 344.954 346.034 345.554 cv
cp
f
342.847 344.171 mo
342.776 344.171 342.705 344.144 342.651 344.09 cv
341.679 343.118 li
340.484 343.089 li
340.331 343.085 340.21 342.958 340.214 342.806 cv
340.218 342.655 340.341 342.536 340.49 342.536 cv
340.493 342.536 340.495 342.536 340.497 342.536 cv
341.803 342.568 li
341.874 342.569 341.941 342.598 341.991 342.649 cv
343.042 343.699 li
343.15 343.807 343.15 343.982 343.042 344.09 cv
342.988 344.144 342.917 344.171 342.847 344.171 cv
cp
f
341.541 345.477 mo
341.47 345.477 341.4 345.45 341.346 345.396 cv
340.373 344.423 li
339.178 344.394 li
339.026 344.39 338.905 344.264 338.909 344.111 cv
338.912 343.961 339.035 343.841 339.185 343.841 cv
339.187 343.841 339.189 343.841 339.192 343.841 cv
340.497 343.873 li
340.568 343.875 340.636 343.904 340.686 343.954 cv
341.737 345.005 li
341.845 345.113 341.845 345.288 341.737 345.396 cv
341.683 345.45 341.612 345.477 341.541 345.477 cv
cp
f
340.236 346.782 mo
340.165 346.782 340.094 346.755 340.04 346.701 cv
339.068 345.729 li
337.873 345.699 li
337.72 345.696 337.6 345.569 337.603 345.416 cv
337.607 345.266 337.73 345.147 337.88 345.147 cv
337.882 345.147 337.884 345.147 337.886 345.147 cv
339.192 345.178 li
339.263 345.18 339.33 345.209 339.381 345.259 cv
340.431 346.31 li
340.539 346.418 340.539 346.593 340.431 346.701 cv
340.377 346.755 340.306 346.782 340.236 346.782 cv
cp
f
346.508 349.106 mo
346.358 349.106 346.235 348.987 346.232 348.837 cv
346.202 347.642 li
345.23 346.669 li
345.122 346.561 345.122 346.386 345.23 346.278 cv
345.338 346.17 345.513 346.17 345.621 346.278 cv
346.672 347.329 li
346.722 347.379 346.751 347.447 346.753 347.518 cv
346.784 348.823 li
346.788 348.976 346.667 349.103 346.515 349.106 cv
346.512 349.106 346.51 349.106 346.508 349.106 cv
cp
f
345.202 350.412 mo
345.053 350.412 344.93 350.292 344.926 350.142 cv
344.897 348.947 li
343.925 347.975 li
343.817 347.867 343.817 347.692 343.925 347.584 cv
344.033 347.476 344.208 347.476 344.316 347.584 cv
345.366 348.634 li
345.416 348.684 345.445 348.752 345.447 348.823 cv
345.479 350.128 li
345.483 350.281 345.362 350.408 345.209 350.412 cv
345.207 350.412 345.205 350.412 345.202 350.412 cv
cp
f
343.897 351.717 mo
343.747 351.717 343.624 351.598 343.621 351.447 cv
343.592 350.252 li
342.619 349.28 li
342.511 349.172 342.511 348.997 342.619 348.889 cv
342.727 348.781 342.902 348.781 343.01 348.889 cv
344.061 349.94 li
344.111 349.99 344.14 350.057 344.142 350.128 cv
344.174 351.434 li
344.177 351.586 344.057 351.713 343.904 351.717 cv
343.902 351.717 343.899 351.717 343.897 351.717 cv
cp
f
337.748 352.752 mo
337.285 352.301 li
348.456 340.824 li
348.918 341.274 li
337.748 352.752 li
cp
1 .848264 .334234 .21503 cmyk
f
228.337 16.6335 mo
227.763 14.6251 225.81 4.37052 228.233 3.14959 cv
230.656 1.92866 234.58 16.924 235.075 12.7001 cv
235.571 8.47607 234.42 4.58818 236.977 5.19933 cv
239.534 5.81049 238.509 11.7049 239.447 12.6377 cv
240.384 13.5705 240.642 5.14555 243.055 6.74003 cv
245.469 8.33451 242.54 17.1069 245.787 15.4155 cv
249.033 13.724 249.287 10.322 250.606 11.8797 cv
251.924 13.4373 248.088 21.6406 248.088 21.6406 cv
228.337 16.6335 li
cp
0 .418433 1 0 cmyk
f
226.396 17.3708 mo
225.342 15.5649 220.905 6.10476 222.964 4.32591 cv
225.024 2.54706 232.552 16.1183 231.992 11.9021 cv
231.431 7.68597 229.349 4.20007 231.992 4.16416 cv
234.634 4.12826 235.092 10.0937 236.236 10.7675 cv
237.38 11.4413 235.55 3.21149 238.296 4.164 cv
241.041 5.11651 240.355 14.3395 243.101 11.9022 cv
245.847 9.46482 245.254 6.10476 246.923 7.29067 cv
248.593 8.47657 246.882 17.8104 246.882 17.8104 cv
226.396 17.3708 li
cp
0 .283757 1 0 cmyk
f
266.408 52.5526 mo
266.242 52.8056 266.072 53.0556 265.9 53.3066 cv
265.894 53.3165 265.888 53.3264 265.881 53.3353 cv
265.777 53.4361 265.673 53.5369 265.569 53.6357 cv
264.762 54.4085 263.928 55.1527 263.06 55.8583 cv
261.43 57.0531 259.694 58.0908 257.857 58.9337 cv
255.702 59.7678 253.46 60.3341 251.181 60.7096 cv
249.97 60.6395 248.758 60.5149 247.553 60.3637 cv
244.941 59.9961 242.336 59.5781 239.716 59.2589 cv
237.501 58.9891 235.255 58.7983 233.022 58.9209 cv
231.671 58.996 230.311 59.166 228.985 59.4358 cv
228.03 59.6295 227.138 59.9556 226.25 60.3282 cv
226.385 56.0115 226.52 51.6958 226.654 47.3801 cv
226.712 45.5133 226.762 43.5892 226.094 41.8459 cv
224.159 36.7939 220.441 34.4122 219.88 29.1864 cv
219.799 28.4481 219.784 27.6536 219.844 26.7859 cv
220.015 24.335 220.724 21.8891 222.084 19.8276 cv
223.586 17.5497 225.777 15.8954 228.33 14.9536 cv
238.389 11.2387 249.27 17.528 255.091 25.437 cv
260.713 33.0771 264.289 41.8765 266.136 51.1503 cv
266.229 51.6157 266.318 52.0842 266.408 52.5526 cv
cp
.113771 .910887 .81622 .0202945 cmyk
f
265.569 53.6357 mo
264.762 54.4085 263.928 55.1527 263.06 55.8583 cv
261.43 57.0531 259.694 58.0908 257.857 58.9337 cv
255.702 59.7678 253.46 60.3341 251.181 60.7096 cv
249.97 60.6395 248.758 60.5149 247.553 60.3637 cv
244.941 59.9961 242.336 59.5781 239.716 59.2589 cv
237.501 58.9891 235.255 58.7983 233.022 58.9209 cv
231.671 58.996 230.311 59.166 228.985 59.4358 cv
228.03 59.6295 227.138 59.9556 226.25 60.3282 cv
226.385 56.0115 226.52 51.6958 226.654 47.3801 cv
226.712 45.5133 226.762 43.5892 226.094 41.8459 cv
224.159 36.7939 220.441 34.4122 219.88 29.1864 cv
221.453 27.3957 223.687 26.0892 226.274 25.3332 cv
236.865 22.238 248.319 27.4797 254.447 34.0703 cv
259.889 39.9227 263.508 46.5924 265.569 53.6357 cv
cp
.184329 .979278 .988983 .0842298 cmyk
f
236.864 25.1357 mo
236.261 23.0017 235.082 21.2046 232.907 20.4746 cv
228.602 19.03 228.008 27.3411 229.306 29.6052 cv
230.53 31.7396 233.182 32.3559 235.276 31.1166 cv
237.486 29.8092 237.486 27.3339 236.864 25.1357 cv
cp
0 .418433 1 0 cmyk
f
232.818 24.5446 mo
232.536 23.5454 231.983 22.7038 230.965 22.362 cv
228.949 21.6856 228.671 25.5773 229.279 26.6375 cv
229.852 27.6369 231.094 27.9255 232.075 27.3452 cv
233.109 26.733 233.109 25.5739 232.818 24.5446 cv
cp
0 0 0 0 cmyk
f
232.367 24.8824 mo
232.367 25.8098 231.616 26.5616 230.688 26.5616 cv
229.761 26.5616 229.009 25.8098 229.009 24.8824 cv
229.009 23.955 229.761 23.2032 230.688 23.2032 cv
231.616 23.2032 232.367 23.955 232.367 24.8824 cv
cp
1 .857359 .431311 .447425 cmyk
f
223.611 27.7227 mo
222.757 27.5281 222.01 27.9814 221.727 28.7926 cv
221.694 28.8916 221.658 28.99 221.621 29.0877 cv
221.605 29.1291 221.592 29.1616 221.582 29.1863 cv
221.566 29.215 221.45 29.4588 221.425 29.5092 cv
221.27 29.8118 221.097 30.1052 220.906 30.3862 cv
220.909 30.383 220.73 30.6301 220.734 30.6312 cv
220.649 30.7369 220.561 30.8403 220.471 30.9409 cv
220.245 31.1945 220.002 31.4333 219.746 31.6563 cv
219.687 31.7082 219.627 31.7588 219.566 31.8084 cv
219.651 31.7473 219.651 31.7478 219.567 31.8096 cv
219.418 31.922 219.263 32.0271 219.106 32.1281 cv
218.827 32.3072 218.539 32.4688 218.243 32.6174 cv
217.741 32.8694 217.191 32.9744 216.572 32.9022 cv
215.773 32.8091 215.006 33.6732 215.04 34.434 cv
215.081 35.3435 215.716 35.866 216.572 35.9658 cv
218.487 36.1891 220.376 35.1097 221.793 33.9243 cv
223.145 32.7929 224.105 31.2614 224.681 29.607 cv
224.945 28.8494 224.381 27.898 223.611 27.7227 cv
cp
0 .418433 1 0 cmyk
f
223.896 25.4026 mo
222.635 24.4463 221.069 24.9315 220.713 22.7472 cv
220.643 22.7521 220.571 22.7606 220.5 22.7728 cv
219.409 22.9591 218.36 23.6181 217.395 24.1386 cv
216.372 24.6904 215.396 25.3158 214.51 26.0708 cv
213.08 27.2893 211.998 28.9933 211.732 30.8605 cv
211.16 32.4312 211.174 34.1652 212.096 35.9766 cv
212.659 37.0812 214.083 37.6218 215.182 36.9673 cv
216.491 36.1883 215.773 34.852 216.502 33.7867 cv
216.849 33.2785 217.512 33.115 218.115 32.9903 cv
220.407 32.5163 223.413 31.7165 224.871 29.672 cv
224.875 29.6568 224.878 29.642 224.882 29.6263 cv
225.251 28.3777 225.173 26.6208 224.161 25.6307 cv
224.074 25.5464 223.986 25.4708 223.896 25.4026 cv
cp
0 .283757 1 0 cmyk
f
31.5639 324.538 mo
31.5639 324.538 20.0768 315.282 13.6689 314.428 cv
10.5361 326.104 11.8177 335.36 16.9441 337.639 cv
22.0704 339.917 31.5639 324.538 31.5639 324.538 cv
cp
.568017 .483009 .477821 .146273 cmyk
f
40.9573 324.538 mo
40.9573 324.538 52.4444 315.282 58.8524 314.428 cv
61.9851 326.104 60.7035 335.36 55.5772 337.639 cv
50.4508 339.917 40.9573 324.538 40.9573 324.538 cv
cp
.664424 .593866 .580499 .411505 cmyk
f
25.4976 326.329 mo
25.4976 326.329 20.0118 321.908 16.9515 321.5 cv
15.4554 327.077 16.0674 331.497 18.5156 332.585 cv
20.9638 333.673 25.4976 326.329 25.4976 326.329 cv
cp
.64654 .568261 .56231 .337865 cmyk
f
47.0236 326.329 mo
47.0236 326.329 52.5095 321.908 55.5697 321.5 cv
57.0658 327.077 56.4538 331.497 54.0056 332.585 cv
51.5574 333.673 47.0236 326.329 47.0236 326.329 cv
cp
.688991 .623255 .613916 .53872 cmyk
f
36.1975 370.278 mo
26.1233 370.278 li
24.9884 370.278 24.0683 369.358 24.0683 368.223 cv
24.0683 362.125 li
36.1975 362.125 li
36.1975 370.278 li
cp
.113771 .910887 .81622 .0202945 cmyk
f
46.2115 370.278 mo
36.1374 370.278 li
36.1374 362.125 li
48.2666 362.125 li
48.2666 368.223 li
48.2666 369.358 47.3465 370.278 46.2115 370.278 cv
cp
.184329 .979278 .988983 .0842298 cmyk
f
36.1674 321.905 mo
23.6616 321.905 13.5236 332.043 13.5236 344.549 cv
13.5236 344.724 13.5263 344.898 13.5303 345.072 cv
12.4215 347.055 11.7887 349.339 11.7887 351.772 cv
11.7887 359.364 17.943 365.518 25.5349 365.518 cv
26.1425 365.518 26.7409 365.479 27.3277 365.402 cv
30.0437 366.555 33.031 367.193 36.1674 367.193 cv
36.1674 321.905 li
cp
.494789 .410681 .411505 .0505074 cmyk
f
36.1674 321.905 mo
48.6732 321.905 58.8112 332.043 58.8112 344.549 cv
58.8112 344.724 58.8085 344.898 58.8046 345.072 cv
59.9133 347.055 60.5462 349.339 60.5462 351.772 cv
60.5462 359.364 54.3918 365.518 46.8 365.518 cv
46.1923 365.518 45.594 365.479 45.0071 365.402 cv
42.2912 366.555 39.3039 367.193 36.1674 367.193 cv
36.1674 321.905 li
cp
.638788 .555108 .526177 .275181 cmyk
f
5.93113 354.421 mo
5.5717 354.421 5.26826 354.143 5.24229 353.779 cv
5.21515 353.398 5.50185 353.067 5.88266 353.04 cv
17.5594 352.207 li
17.94 352.18 18.271 352.467 18.2982 352.848 cv
18.3254 353.229 18.0386 353.56 17.6578 353.587 cv
5.98104 354.419 li
5.9643 354.421 5.94765 354.421 5.93113 354.421 cv
cp
.714839 .654688 .644251 .716548 cmyk
f
8.92291 363.25 mo
8.69275 363.25 8.46775 363.135 8.33651 362.926 cv
8.13371 362.602 8.23155 362.176 8.55507 361.973 cv
18.0958 355.992 li
18.4194 355.789 18.846 355.887 19.0487 356.211 cv
19.2515 356.534 19.1537 356.961 18.8302 357.164 cv
9.28941 363.144 li
9.17531 363.216 9.04835 363.25 8.92291 363.25 cv
cp
f
66.5277 354.421 mo
66.5112 354.421 66.4945 354.421 66.4778 354.419 cv
54.801 353.587 li
54.4202 353.56 54.1334 353.229 54.1606 352.848 cv
54.1878 352.467 54.5187 352.18 54.8994 352.207 cv
66.5762 353.04 li
66.957 353.067 67.2437 353.398 67.2165 353.779 cv
67.1906 354.143 66.8871 354.421 66.5277 354.421 cv
cp
f
63.5359 363.25 mo
63.4104 363.25 63.2835 363.216 63.1694 363.144 cv
53.6286 357.164 li
53.3051 356.961 53.2072 356.534 53.41 356.211 cv
53.6128 355.887 54.0394 355.789 54.3629 355.992 cv
63.9037 361.973 li
64.2272 362.176 64.3251 362.602 64.1223 362.926 cv
63.991 363.135 63.766 363.25 63.5359 363.25 cv
cp
f
28.3034 343.619 mo
28.3034 344.907 27.2597 345.951 25.9723 345.951 cv
24.6849 345.951 23.6412 344.907 23.6412 343.619 cv
23.6412 342.332 24.6849 341.288 25.9723 341.288 cv
27.2597 341.288 28.3034 342.332 28.3034 343.619 cv
cp
0 0 0 0 cmyk
f
27.1642 343.619 mo
27.1642 344.278 26.6306 344.811 25.9723 344.811 cv
25.3141 344.811 24.7805 344.278 24.7805 343.619 cv
24.7805 342.961 25.3141 342.428 25.9723 342.428 cv
26.6306 342.428 27.1642 342.961 27.1642 343.619 cv
cp
.714839 .654688 .644251 .716548 cmyk
f
48.8315 343.619 mo
48.8315 344.907 47.7878 345.951 46.5004 345.951 cv
45.213 345.951 44.1693 344.907 44.1693 343.619 cv
44.1693 342.332 45.213 341.288 46.5004 341.288 cv
47.7878 341.288 48.8315 342.332 48.8315 343.619 cv
cp
0 0 0 0 cmyk
f
47.6922 343.619 mo
47.6922 344.278 47.1586 344.811 46.5004 344.811 cv
45.8422 344.811 45.3086 344.278 45.3086 343.619 cv
45.3086 342.961 45.8422 342.428 46.5004 342.428 cv
47.1586 342.428 47.6922 342.961 47.6922 343.619 cv
cp
.714839 .654688 .644251 .716548 cmyk
f
33.5804 359.652 mo
31.6114 359.652 30.3506 358.157 30.3325 358.135 cv
30.0902 357.84 30.1329 357.404 30.4279 357.162 cv
30.722 356.92 31.1558 356.962 31.3986 357.254 cv
31.4122 357.27 31.8826 357.816 32.6452 358.098 cv
33.6315 358.462 34.6744 358.228 35.7451 357.402 cv
36.0474 357.169 36.4815 357.224 36.7148 357.527 cv
36.948 357.829 36.892 358.263 36.5897 358.496 cv
35.4775 359.355 34.4585 359.652 33.5804 359.652 cv
cp
f
38.8811 359.652 mo
36.9121 359.652 35.6513 358.157 35.6332 358.135 cv
35.4761 357.944 li
35.4761 355.03 li
35.4761 354.648 35.7856 354.339 36.1674 354.339 cv
36.5492 354.339 36.8587 354.648 36.8587 355.03 cv
36.8587 357.417 li
37.0576 357.604 37.4366 357.91 37.9459 358.098 cv
38.9321 358.462 39.9751 358.228 41.0458 357.402 cv
41.348 357.169 41.7822 357.224 42.0155 357.527 cv
42.2487 357.829 42.1927 358.263 41.8904 358.496 cv
40.7782 359.355 39.7592 359.652 38.8811 359.652 cv
cp
f
36.1674 355.03 mo
36.1674 355.03 30.8243 351.997 32.4683 351.38 cv
34.1124 350.764 36.1674 350.764 36.1674 350.764 cv
36.1674 355.03 li
cp
0 .283757 1 0 cmyk
f
36.1674 355.03 mo
36.1674 355.03 41.5106 351.997 39.8665 351.38 cv
38.2225 350.764 36.1674 350.764 36.1674 350.764 cv
36.1674 355.03 li
cp
0 .418433 1 0 cmyk
f
13.7573 341.283 mo
14.0317 339.385 14.5415 337.562 15.2564 335.848 cv
18.3514 335.597 32.7326 333.852 40.1805 322.755 cv
40.2801 322.606 40.3798 322.46 40.4776 322.315 cv
43.4397 322.886 46.1957 324.034 48.6252 325.637 cv
48.6252 325.637 49.4682 338.39 13.7573 341.283 cv
cp
.040528 .0235904 .026154 0 cmyk
f
43.8061 323.227 mo
40.2213 335.001 14.045 339.7 14.045 339.7 cv
14.2007 338.983 14.3906 338.28 14.6137 337.591 cv
24.7293 335.745 36.1674 326.525 37.7614 321.961 cv
38.6833 322.025 39.5899 322.143 40.4776 322.315 cv
41.6197 322.535 42.7324 322.841 43.8061 323.227 cv
cp
.169863 .120485 .123751 0 cmyk
f
342.005 152.272 mo
336.34 152.272 li
336.34 143.581 li
342.005 143.581 li
342.005 152.272 li
cp
0 .283757 1 0 cmyk
f
348.053 152.272 mo
342.005 152.272 li
342.005 143.581 li
348.053 143.581 li
348.053 152.272 li
cp
0 .418433 1 0 cmyk
f
342.005 152.272 mo
331.497 152.272 li
326.409 152.272 322.285 156.396 322.285 161.483 cv
322.285 169.055 li
342.005 169.055 li
342.005 152.272 li
cp
.989349 .831296 .261204 .112734 cmyk
f
342.073 146.271 mo
340.203 146.271 li
333.188 146.271 327.501 140.584 327.501 133.569 cv
327.501 110.743 li
342.073 110.743 li
342.073 146.271 li
cp
0 .283757 1 0 cmyk
f
343.942 146.271 mo
342.073 146.271 li
342.073 110.743 li
356.645 110.743 li
356.645 133.569 li
356.645 140.584 350.958 146.271 343.942 146.271 cv
cp
0 .418433 1 0 cmyk
f
336.34 152.272 mo
342.005 169.055 li
330.254 152.356 li
336.34 149.492 li
336.34 152.272 li
cp
.341833 0 .0318303 0 cmyk
f
335.798 117.959 mo
335.798 117.959 346.583 122.959 356.645 122.833 cv
356.645 120.034 356.645 117.959 356.645 117.959 cv
335.798 117.959 li
cp
.688991 .623255 .613916 .53872 cmyk
f
353.644 122.286 mo
356.645 128.507 li
356.645 117.959 li
353.644 122.286 li
cp
f
327.501 128.507 mo
329.215 122.286 li
329.215 122.286 334.28 120.244 335.798 117.959 cv
337.316 115.674 331.649 114.114 331.649 114.114 cv
327.501 117.959 li
327.501 128.507 li
cp
f
327.501 117.959 mo
342.073 117.959 li
342.073 103.501 li
335.037 103.501 li
330.875 103.501 327.501 106.876 327.501 111.038 cv
327.501 117.959 li
cp
.989349 .831296 .261204 .112734 cmyk
f
342.005 152.272 mo
352.513 152.272 li
357.601 152.272 361.725 156.396 361.725 161.483 cv
361.725 169.055 li
342.005 169.055 li
342.005 152.272 li
cp
1 .848264 .334234 .21503 cmyk
f
342.073 117.959 mo
356.645 117.959 li
356.645 111.038 li
356.645 106.876 353.271 103.501 349.108 103.501 cv
342.073 103.501 li
342.073 117.959 li
cp
f
344.935 112.028 mo
344.935 113.18 343.634 114.114 342.029 114.114 cv
340.424 114.114 339.122 113.18 339.122 112.028 cv
339.122 110.876 340.424 109.942 342.029 109.942 cv
343.634 109.942 344.935 110.876 344.935 112.028 cv
cp
.341833 0 .0318303 0 cmyk
f
342.95 108.267 mo
342.95 108.776 342.537 109.189 342.028 109.189 cv
341.519 109.189 341.107 108.776 341.107 108.267 cv
341.107 107.758 341.519 107.346 342.028 107.346 cv
342.537 107.346 342.95 107.758 342.95 108.267 cv
cp
f
340.398 109.021 mo
340.398 109.529 339.986 109.942 339.477 109.942 cv
338.968 109.942 338.556 109.529 338.556 109.021 cv
338.556 108.512 338.968 108.099 339.477 108.099 cv
339.986 108.099 340.398 108.512 340.398 109.021 cv
cp
f
345.59 109.021 mo
345.59 109.529 345.177 109.942 344.668 109.942 cv
344.16 109.942 343.747 109.529 343.747 109.021 cv
343.747 108.512 344.16 108.099 344.668 108.099 cv
345.177 108.099 345.59 108.512 345.59 109.021 cv
cp
f
348.114 152.272 mo
342.24 169.055 li
354.2 152.356 li
348.114 149.492 li
348.114 152.272 li
cp
.46537 0 .0847486 0 cmyk
f
352.867 164.117 mo
352.867 162.851 li
352.091 162.851 li
351.316 162.851 li
351.316 164.117 li
350.05 164.117 li
350.05 164.892 li
350.05 165.667 li
351.316 165.667 li
351.316 166.933 li
352.091 166.933 li
352.867 166.933 li
352.867 165.667 li
354.133 165.667 li
354.133 164.892 li
354.133 164.117 li
352.867 164.117 li
cp
0 0 0 0 cmyk
f
110.347 229.77 mo
127.232 218.295 149.413 218.295 166.298 229.77 cv
166.298 233.152 166.298 236.534 166.298 239.915 cv
149.413 228.44 127.232 228.44 110.347 239.915 cv
110.347 236.534 110.347 233.152 110.347 229.77 cv
cp
1 .848264 .334234 .21503 cmyk
f
166.298 239.915 mo
149.413 251.391 127.232 251.391 110.347 239.915 cv
110.347 236.534 110.347 233.152 110.347 229.77 cv
127.232 241.245 149.413 241.245 166.298 229.77 cv
166.298 233.152 166.298 236.534 166.298 239.915 cv
cp
.989349 .831296 .261204 .112734 cmyk
f
135.269 238.162 mo
133.792 238.162 132.591 239.363 132.591 240.839 cv
132.591 246.183 li
132.591 247.66 133.792 248.861 135.269 248.861 cv
141.376 248.861 li
142.853 248.861 144.054 247.66 144.054 246.183 cv
144.054 240.839 li
144.054 239.363 142.853 238.162 141.376 238.162 cv
135.269 238.162 li
cp
141.376 251.257 mo
135.269 251.257 li
132.471 251.257 130.195 248.981 130.195 246.183 cv
130.195 240.839 li
130.195 238.041 132.471 235.765 135.269 235.765 cv
141.376 235.765 li
144.174 235.765 146.451 238.041 146.451 240.839 cv
146.451 246.183 li
146.451 248.981 144.174 251.257 141.376 251.257 cv
cp
0 .418433 1 0 cmyk
f
138.323 256.823 mo
137.661 256.823 137.124 256.287 137.124 255.625 cv
137.124 250.059 li
137.124 249.397 137.661 248.861 138.323 248.861 cv
138.984 248.861 139.521 249.397 139.521 250.059 cv
139.521 255.625 li
139.521 256.287 138.984 256.823 138.323 256.823 cv
cp
f
145.252 261.681 mo
145.252 265.509 142.15 268.611 138.323 268.611 cv
134.495 268.611 131.393 265.509 131.393 261.681 cv
131.393 257.854 134.495 254.752 138.323 254.752 cv
142.15 254.752 145.252 257.854 145.252 261.681 cv
cp
0 .283757 1 0 cmyk
f
141.251 263.009 mo
141.251 264.188 139.92 265.144 138.278 265.144 cv
136.635 265.144 135.304 264.188 135.304 263.009 cv
135.304 261.831 136.635 260.875 138.278 260.875 cv
139.92 260.875 141.251 261.831 141.251 263.009 cv
cp
.184329 .979278 .988983 .0842298 cmyk
f
139.22 259.162 mo
139.22 259.682 138.798 260.104 138.277 260.104 cv
137.757 260.104 137.335 259.682 137.335 259.162 cv
137.335 258.641 137.757 258.219 138.277 258.219 cv
138.798 258.219 139.22 258.641 139.22 259.162 cv
cp
f
136.609 259.932 mo
136.609 260.453 136.187 260.875 135.667 260.875 cv
135.146 260.875 134.724 260.453 134.724 259.932 cv
134.724 259.412 135.146 258.99 135.667 258.99 cv
136.187 258.99 136.609 259.412 136.609 259.932 cv
cp
f
141.921 259.932 mo
141.921 260.453 141.499 260.875 140.978 260.875 cv
140.458 260.875 140.036 260.453 140.036 259.932 cv
140.036 259.412 140.458 258.99 140.978 258.99 cv
141.499 258.99 141.921 259.412 141.921 259.932 cv
cp
f
32.9935 111.748 mo
32.9935 111.748 18.255 112.623 8.3815 132.62 cv
18.505 133.995 21.2326 133.359 21.2326 133.359 cv
31.0031 121.871 li
32.9935 111.748 li
cp
0 .418433 1 0 cmyk
f
64.277 166.413 mo
64.1787 167.06 63.922 167.689 63.5237 168.196 cv
61.9706 170.173 59.0375 170.966 56.6853 171.376 cv
54.068 171.832 51.4149 172.023 48.7452 172.074 cv
43.3499 172.177 37.888 171.707 32.5177 171.686 cv
31.8028 171.683 31.0903 171.688 30.3787 171.703 cv
29.0014 171.733 27.979 170.553 27.9206 169.245 cv
27.8598 167.898 29.0939 166.815 30.3787 166.787 cv
31.1728 166.77 31.9669 166.762 32.761 166.761 cv
32.876 166.746 32.9918 166.74 33.1085 166.746 cv
33.4209 166.761 li
33.7976 166.763 34.1742 166.766 34.5508 166.771 cv
35.9098 166.79 37.2697 166.832 38.6271 166.897 cv
39.0595 166.918 39.2878 167.098 39.5478 166.72 cv
34.7675 166.116 33.5867 162.618 32.0511 158.72 cv
32.0461 158.708 32.0411 158.696 32.0361 158.684 cv
31.2211 156.616 29.3563 157.54 27.4923 157.54 cv
27.534 157.54 27.5748 157.716 27.6115 158.028 cv
27.849 160.04 27.9265 167.67 27.1932 169.659 cv
27.1382 169.808 27.0791 169.925 27.0149 170.006 cv
25.7042 171.66 23.2486 172.218 21.273 171.558 cv
21.2721 171.558 21.2705 171.558 21.2696 171.557 cv
21.018 171.473 20.7755 171.371 20.5439 171.246 cv
20.5422 171.246 20.5406 171.245 20.5397 171.244 cv
20.1431 171.033 19.779 170.763 19.464 170.434 cv
18.7616 169.699 18.4624 168.669 18.7357 167.678 cv
18.8699 167.198 19.1132 166.781 19.464 166.427 cv
19.8181 166.076 20.2347 165.833 20.7147 165.699 cv
21.148 165.521 21.5954 165.411 22.0487 165.353 cv
22.2304 165.329 21.9012 157.918 21.7929 157.257 cv
21.7604 157.059 21.7171 156.865 21.6654 156.672 cv
21.1338 154.701 19.6665 153.014 18.9632 151.089 cv
18.1583 148.883 17.7633 146.528 17.825 144.18 cv
17.8891 141.749 18.4324 139.323 17.8275 136.92 cv
17.2509 134.632 15.7285 132.774 13.7721 131.514 cv
11.7631 130.22 9.61165 130.276 7.34771 129.95 cv
5.30708 129.657 4.09637 127.747 3.97138 125.78 cv
3.30978 125.378 2.734 124.851 2.32488 124.169 cv
1.77577 123.252 1.63995 122.207 1.64328 121.163 cv
1.64412 120.828 1.65912 120.494 1.67995 120.164 cv
1.70661 119.736 1.89659 119.375 2.19906 119.144 cv
2.43904 118.803 2.85733 118.586 3.28479 118.553 cv
3.59809 118.529 3.91056 118.505 4.22386 118.48 cv
4.78547 118.436 5.34791 118.393 5.90952 118.35 cv
6.83859 118.277 7.7685 118.205 8.69757 118.133 cv
9.13503 118.099 9.57248 118.065 10.0099 118.03 cv
10.1099 118.023 10.2099 118.015 10.3107 118.007 cv
10.3516 118.004 10.3816 118.001 10.4049 118 cv
10.4857 117.985 10.5641 117.967 10.6432 117.948 cv
10.664 117.942 10.6815 117.938 10.6974 117.934 cv
10.754 117.9 10.899 117.77 10.8524 117.82 cv
10.874 117.799 10.8957 117.776 10.9174 117.754 cv
10.8399 117.825 11.0515 117.562 11.0848 117.505 cv
11.154 117.385 11.2157 117.26 11.2732 117.135 cv
11.2815 117.119 11.314 117.041 11.3323 116.999 cv
11.349 116.956 11.369 116.906 11.374 116.892 cv
11.6456 116.191 11.9173 115.489 12.2647 114.821 cv
12.9413 113.523 13.932 112.276 15.2627 111.607 cv
16.7726 110.848 18.5691 110.757 20.2297 110.64 cv
20.613 110.614 20.9997 110.596 21.3871 110.592 cv
24.1019 110.559 26.8666 111.136 28.8172 113.177 cv
30.8578 115.313 31.3403 117.985 31.7994 120.694 cv
31.9494 121.58 32.0969 122.47 32.2952 123.346 cv
32.4519 124.041 32.641 124.726 32.8885 125.395 cv
34.2225 128.997 36.8897 131.822 39.8178 134.094 cv
43.5074 136.957 48.2069 139.227 51.2966 142.698 cv
53.5272 145.203 55.0296 148.254 55.8962 151.483 cv
55.9553 151.704 56.012 151.924 56.0645 152.146 cv
56.2811 153.043 56.4511 153.949 56.5861 154.863 cv
56.8111 155.547 57.0036 156.241 57.1677 156.941 cv
57.6952 159.182 57.9335 161.486 58.0343 163.787 cv
58.0409 163.916 58.0459 164.045 58.0509 164.174 cv
58.3792 163.967 58.7092 163.762 59.04 163.557 cv
60.0249 162.95 61.0931 162.506 62.2639 162.86 cv
63.897 163.356 64.4995 164.937 64.277 166.413 cv
cp
.568017 .483009 .477821 .146273 cmyk
f
31.7994 120.694 mo
27.934 120.954 23.0328 120.661 21.233 117.872 cv
19.5848 115.319 20.2522 112.628 21.3871 110.592 cv
24.1019 110.559 26.8666 111.136 28.8172 113.177 cv
30.8578 115.313 31.3403 117.985 31.7994 120.694 cv
cp
.677577 .618402 .58056 .456641 cmyk
f
56.0645 152.146 mo
56.0636 152.146 li
49.2543 154.549 48.9452 145.659 34.0112 136.278 cv
29.6673 133.55 29.503 128.773 29.503 128.773 cv
28.6231 122.627 li
32.2952 123.346 li
32.4519 124.041 32.641 124.726 32.8885 125.395 cv
34.2225 128.997 36.8897 131.822 39.8178 134.094 cv
43.5074 136.957 48.2069 139.227 51.2966 142.698 cv
53.5272 145.203 55.0296 148.254 55.8962 151.483 cv
55.9553 151.704 56.012 151.924 56.0645 152.146 cv
cp
f
17.6371 136.278 mo
17.6371 136.278 27.3471 136.318 33.4244 126.657 cv
35.1275 116.497 32.9935 111.748 32.9935 111.748 cv
32.9935 111.748 17.6828 131.654 8.3815 132.62 cv
13.1308 134.744 17.6371 136.278 17.6371 136.278 cv
cp
0 .283757 1 0 cmyk
f
20.7927 111.499 mo
19.2221 102.664 li
19.2221 102.664 27.0142 107.937 28.4118 113.088 cv
29.8093 118.239 23.8169 115.949 23.8169 115.949 cv
20.7927 111.499 li
cp
.677577 .618402 .58056 .456641 cmyk
f
4.22386 118.48 mo
4.1697 118.711 4.07721 118.931 3.94305 119.129 cv
3.34145 120.018 2.65235 120.796 1.64328 121.163 cv
1.64412 120.828 1.65912 120.494 1.67995 120.164 cv
1.70661 119.736 1.89659 119.375 2.19906 119.144 cv
2.43904 118.803 2.85733 118.586 3.28479 118.553 cv
3.59809 118.529 3.91056 118.505 4.22386 118.48 cv
cp
f
15.0042 117.178 mo
15.0042 117.577 14.6808 117.9 14.282 117.9 cv
13.8832 117.9 13.5599 117.577 13.5599 117.178 cv
13.5599 116.779 13.8832 116.456 14.282 116.456 cv
14.6808 116.456 15.0042 116.779 15.0042 117.178 cv
cp
.714839 .654688 .644251 .716548 cmyk
f
37.6955 151.79 mo
37.6955 152.185 37.388 152.696 36.9614 152.754 cv
34.23 153.123 32.0969 155.273 31.9644 158.058 cv
31.9977 158.239 32.0252 158.422 32.0452 158.609 cv
32.0494 158.647 32.0511 158.685 32.0511 158.72 cv
32.0461 158.708 32.0411 158.696 32.0361 158.684 cv
31.2211 156.616 29.3563 157.54 27.4923 157.54 cv
27.534 157.54 27.5748 157.716 27.6115 158.028 cv
27.4799 157.908 27.3824 157.754 27.344 157.573 cv
27.0132 156.016 26.7933 154.435 26.6833 152.847 cv
26.6241 151.983 27.824 151.525 28.3906 152.139 cv
28.8539 152.643 29.3113 153.152 29.738 153.679 cv
29.8288 153.549 29.9329 153.427 30.0496 153.319 cv
30.627 152.78 31.347 152.317 32.0144 151.896 cv
33.4893 150.965 35.2207 150.4 36.9614 150.825 cv
37.3864 150.93 37.6955 151.36 37.6955 151.79 cv
cp
.677577 .618402 .58056 .456641 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 19.1.0%%For: (Stacy) ()%%Title: (!_shablon.eps)%%CreationDate: 04.12.15 12:09%%Canvassize: 16383%AI9_DataStream%Gb",KBg^W9Zgdhsp^cdZ9+(m+Z44/e$_ar$:nXZ.BrOZ4Uh"8,p@S0"J,;;`P&34[iD<(Dn%$b)@6B]BUX<ae,`UsLF3S$d;Jhrc%RfBN?L93"rR\cCOUF[APh#.)nlFu0?_o\9>[h-s2kfcM446%5]eo3FRV/&o1cn+qVI\XO,DO15r-f;!_gRV=js4_<;45Lj&nW])`%Xk*EHjD&#s@W"BAD&jFn28@d[f=e?(1+L/"@k.>X"(e,br^O,?]Nkc`J`#hr>u36ucf]L9^6[LU.$14h)Z5rT/oqHtU$B3!5?q2u%VR#]:h`n/b\o"WTD)T*jJSMLFN&Q(@[lb.UG#f=er`Oc49#3abHF5B'7Z"A-BD75a2(U5h/Hg0o&5uOX$Y5'Cpg9I'!ePof2>mI[%D=AA@eeLP,WL:H5!]HbDmn?_T$bkm-?Q2lB!YU?k4nS'BRb.4H>]nlF^o6i(aF=J#(`L7q[S6V;<(jJqr2J?Z7u>7@s&o#EXXYuP%YN!%ect;%gKBiJE$r%,O<&o'8=7b28)V$IEMBU(&XP[_mr#0Z//6f3$1sAk<khdB=ctf9L?'*QJXbVjB<?,"dHIJp]]\bm[T>hi&%D>B1/k'Nh![m<>GDG:<UE>2,+1gm("N"&]B_iTUHe;6%jq4M19#%J1^EOT4:X#="F*FL\P2(kh3m:mr1;d5#hk[-`,`f^8`#63_*%6C5;i^EMglo],k0,k#J[k5^t,CfKuM3c_n9J)rq])__G1bqo>Nr(UOkGd#)u5^sljB``IcJT]8OTeF^]?EFI)[bAu4CV+T?S6O'8%RO>hTLW$P=]++OTY2n<McFIuJCt>1+E<Pfgf7G+!?!`9D=<cd*>>M,nXg$$RG2VD^[#t)t[H^oLCRnPM_jVJ64`!pnG)7P35hg`e%$iLt@GB2r#1(E4s>2u6l"pF]6'])4sn,7:9f`ou-;0GaL_]M\_/PaGsgFL1cK"j[C"L8OVV$6)5T)i^B_MMfQ1kP?KnK_$k.oi6Z%6sF/@%Xr]Znp.3\d[AloWS/13QXF.3qlADa5c.P/0/<M?%.8f[bmtB)Ti\F`cdS??W,t?in38-H.052a/-20RlR0q\[8W,S:P.p6%U"+2.5PX(!qXqt<JaEL:OAlBL2]G![>-fML7ZNh.[l(AJ[JP]l7'bpj_@T_'Ljo*9\/LKNVptu&q8u",g@Z]He#^%*KN&H,]p;I-%%PSF1$E[f?YN-F4H$T<cV5aCA_>>f$?]`aIQ11]W3k+ZgVt:2;#lIi(QI.8Qg:t[V=Ap"7Xk+K\Bc6!G>s7FpI?9#V\Wq!CmIanP%c`=HGgMc"o?!5hb?A7;+?esVle"sSY9i^AK-n>O!@H/o!o@'c537>!FV0bB-X5VS8#oXUn92jN!F2*$EhOWGY!:RpSd3SB93AV>\%F@sD<p?CXe`K5#NF4os@CoqjJ*GZ=8<NSs_%-$&e*tek4W%jK,s*$LQs#le@ha%dm'0%S4XkRW`JH+1Kq\)';b=q2N;"G.j6_?nu%UK?>)GJ0Vt!];+\hRjh?<,5r]::uToD#6GC0Q[VsZ4HoRqp]:#FK8fu:$br:cnJ:Y@$kEE2r5pP3YVD>p,frkJd"$I9;4L;&?Cd6%G2a_1+&5]:&[>h*4cMg*D2_@&nlgl@2_IF1Pu"%o4G(!HNn`VI7$opiO+V&J?1taPoHD&$,T2YIS."EDFNF?I3#2Dq!G$jYCjQ?`%6Y.ilQr8\gFdUD&@@Bg2n".F=g@i<<W4cnG4#?:[9qF-sj>'GiR%td%l7o+V;sH*6*`M>Y9r#a>h>rZd8KXhd@fiPPkPt0i#NoEi%q.l;j@[?]?FY4<SIeVWUa[UQR>:K>3X)qN"M8:QLhpO8M55I,hE];d1P?MnSg+n:ml^$/gFK/Xl2nE)>BXgg/(mP5mXE#8[/-4uA%'NsNU][0'@5ID06H$\37]41tl#,goBokB.-D@OiM4:5,doDHAK7sbR5,58^8+EAgUDHsCmn'?3(m8L4T+-aH,rJ4m[Zi!_Nj)Nc.%hP_mn?`*Tm]2+We$G+rlH0p!cdHPt:"J$D]E=;YWM>O^VDl_R\0@R,'`%5'ebEf/'k0!=BAkAs$hdl$PG8o%IM5\0Qcgm-!!IN(+%UK^>)8GP%B2uc-:^lhgVB?2:-S5Yl2_P^rCrX00s)2RENbG:`2dP")ci=bGgB+"%?MZcZ9i\kmT!j7ULSP6UQ`Ns`F<rfF0m@Mr.%DLrnIR90dpe>DGh7m+A)na:>b82#o)e(^8_[;:"Kb=dLNVuBN/No*%lO`rTlL*WAfGDc9INe$aaa]2?MQC]IlNq4N?r<.S`frX;h%^AksigH*f1;T>.VB[[l[9eo<.hE`#21\o13gT+;#$)UOLGOl="m*:tj'siqV-,4N@:FT!bI:hK"43_s7*0Zsg<a4$_q;2L4Pi-FE%WfX)d/l/Sf\jI9]Al9'icgkef)*Vi.jAsg<:>*a*T:%]$F2oNoc@+]oLE^Bp54N/fDT;)XT1n\#eEYVsGS`E_=uWhs7KQ@u<YgX^%]Z!$KdoDhC#nNWbeqs"?4d]DiPXL^1n!T<+eiT(lB'PFVlqcJNaIdg=L0m%3CQrj%_7%6HM4<B-R_/fDl#$rr\@#>2;!kW)?J3@h%)KrdE$nW3:&#u)2jZ(e^7J-A31@S5#rLDM9qN\iU%.J.@a3AQQZQuUJe?1Beq*$Sm/Ur4^gr,gS9m&3OJ2"BoTA]"k/>[2SU4fCe%,#8uL5;A:uAJUg`4,J#^Xjn&T/ZRXD&5F:_DDQjKd_$%;8(e[+p.L"M)]\,)pDn%a]\ep"!:urN[?F<-Nd0SIC&;GE:[Es?WDrDi%V9+.B0Q6rjb2frtl;>pr)kqai\)QV\E*8poH]nu@Qb?Q?*u(7#Ta:8PrKPE&kJTSXZ>p;Z>DTXF'$Qba\QA6Z3GfptQ\7GS<nV3!%=\l71'%SY&o3S1q:VuB]F:*LedmYiMZ[3+TS0!<m%GdA$m5#CV8<6'l>-KbJ\sjQu#BBL0U+3&G+o8cj]*BLBXEIOSA>BGRDKjd$%CunCe6&>(?+,!1Z8Z2;*`(]KfoH;*!cD1[gdXr*\eNjK.mN.$0cgX5V,cgdkXtAm(Lg/G0jn'\6ZlF`iU4fCe,2^[3LoK6bR%8:<%8X)JLah+BHS&GM:8PYtUI(t-E?g!^K).<?6,N+k+TDa^_g$Rf$jcDI9cC!DRX>gMq9%0BGj=]No\RR:G?7M@4Wh@?^./$^lW6)_J%'i_3+;?_34$>QmVJCK+<<W2"=n>5D!<DRgB4f.:>Wh*,]PcCX\;busBa74<?J'X.@Rb[6/[XgCW)d)>58MW["^N,'&mWCQXrmhrr%WJWS/lkf-SIZi_u''bIG89b$kPeH@sIVl:NrB@s@$\,LXaP)*V3V)>2N23K#'&<:X'0`2u+"l05C89d\<Z@f@/X2$fja5fM&eU=(%DnJT(QCOAf?dWRr#)e>O9(Q,[q(")4\1$("Xt#kDs&Km0h\uEIs/s0CjU[mN^D4pVH%(ZcZ!0s9]rjDu-a`o\qfjW2e/<bJ/!36u%FbdB&4<d"t2d8e0q2B0Q,h'*K3iC0;_rJAB5OfBa/^<ZuGu"=8c.\$@^DOBE+L)u-VXQXs705>gE>r(0!S9j7:*s89HCJAYf)`'\%m@Mr.DM$DT-J!fBC"/PQ(]HhBZ0B_6UX$j#e(g>`2/RNRm["U&ks'HVhRZ='/CPW_)r@j4c6R_BUH6jEbB1c[h6@q@F%UX-B4T%<%c+$!>'BtP=[97R\B;qqIaXk&GQSRBn*(#(b90%E_X)s\K$E!K7^K,.LRQ(_`lIgG!^+Yg-"lA>!kf9=43$O]VK4OeJA&qU$R7d/E%[+Fj>bm(["N<JiaTYQP28l.4RCWb_^?CbF"'O7qs1)@p%:3A\,Mb-f\]$#"LhMH2LqVkp%:.iDq'75tb+A63:BhTt8.1Prpf$<!`%hcKuUa'Sr9:d&TsrN%nmIWqp]=4WgWY;(&22@VSCq:m0X"+>V-r^[g+O\fuQSoH*$`VX#MhWp2JKhJ!r!TL4M3=8c,(JD:7gsuL_%!]TdF@Ki8FYm/a!#9th"+$;u@E2Vfa@:a<UR8`*(I^WXiBSl^8O*hD&R*$j&W8.<["kM::qA#8d@i&kG,)om(Z&@RnPK#6'fL6^j%R'#"pLfElrKa;3c#U>=79T:?^`\&UW/oG10\^C$1G;f)6+FK+cN4n#/9:0qb1B(kE'Rsi$jd,O4H6n'p8>"H`q$HKS:@"2C`.u[9%G9sb7fCAl?#5]@K2S4<BF_&:2L8+,C1t,fO'n?)45-8U'RU5,7f!<Jedcl'9D%"2004ej$R6.a@c-D&_EoBYias81hQ5ZCoPVRGG%$d6As=)%[19-9.\S9QBo(d+'2n7F#=3hmLD-U4,%)5RW#P>)#5K)?l:IIa^rKJT0n5ID06H$\37]-ul[^QM7sc-/$$V7umK[eCNV%nP0t\dkVDWm8;Kb&"7&o82JflM*h!<>"N`Q8>+dd*6:[tLN>]-)4M3+k1A;$_]uk?UnB[%M.Or#/8#:UkM%\_'@EDeJGq]9OatRB%fr's_WH<o-`eBf-8:WM.OamS1VicKYnK;IV)Q/^J^W-eSQ>oG?!IoWM1_PoHT7`\%s0M#;3JMVlpHqa2?FfCPhDD8>:.OnRP?8CG%4akEs)SPu"o_)p\H]U#Nc(@bT9[4JpicY0.g],[m)s%2lD'/V6GH!^Bd@EbuTNgfL8&[LML]O4j<bk8P/;AQDj)LUpXenm[d_)d4%SNB9b9MX!mD'iA$R^YP0ReJ,Qqf;(p\U/U/P#s,Hg6\I"\!ZmNDC&"K@Q^9kS+Qo",@O;p-Bp_-0feU.:O4mc\[*)199VP5ad&eM%52W`&/h_8T-]K/W&'Wg[F$rUrOId].jZ%.bAfZrDh)>G`V?E&?V'h*4:k&/a&ToH=8i%)ET6tfkL;N-=SVs,t`>CF,S\&r<,k[O&%O6K,G7-ZS)5#^`&V*<@Nqb32jVUT6NIAZYdOkc/BGL'pCCRX%He7hOGVUT<PSYjnN8tDjDF.00li%ubE6g?MaZI<pFCf\j8?319k%[3!f&2S2.O,22LWf9GWZkd1]PAERD+n(Z09qYKj(r=hrl2##jD":(CUmWHj+6;96?9WK*.mhl4F3Z_K-K9eaJ\p@9Gaqnh##;o^l%\_@"qRNsfDl2FHMgcJ$<q89.f*hT"Wfq+0#R@,6f'X&CC+WX0PQCi"3\l*^41jh:u1HSm`Da@%@id4S<cBDKV9_9[D1_fo`2]il2%-rgL`08UDV6_;0?L^+=Zbm(i_SA9jD06#sB9)Q]gZn@E'cbFRJm8L4T-^:kqG3U1K&S\i"M&t=*H!9'l4Lo(cC&.'gA91Cebr!'b%?f2TF#+q3rUD?nAr(YT0pLg+eT/q$Pk\bEfGHf";*,n^/YK_Q$c%^_9IRPP\M^>c5rgUli)D'K+_h"2C1MF%h#?D)AE/P=cbIuj4%='@"d^c2)&NJ[#:(q"W>Yo[n&rlW>ndM"%(MqcTI$!nGjKd)_`h#cht"1?Ui&pWeYpUooAakAlk/&E;e9c-"P55QsJ!mNPO`K33q%NH?cL>Lp(_$c99RAI5k1X_ZVO9^-X^S$n"n?-9$11&Vh[g$D+(doX&V@iYJu(7P?ms#C-mB^"n[L6B1@/lJ.iE@+SJgkiLr-Y=]n%_=7.lAm;6]:t=V8!n49)'ik/flrOI\fLbq)@/^CUdl_ECG33^/dE\+8:,=m"l/L.:\;<&%1]L4I%%-QrnSV\*RF/qRb;5YK@!T%,%5IIHmr_R:jL3p1PLMuV*g_K`;%)s"MBAAc9>00LTWL`,f4%HP:]Mj)CB5qus9COXo9Gt4('!7Rh+LgsHFDB7\3K<ppe8H/(mFqpj%9ZpO]]orTZ37WRA?(&?R6J[$]0JXG3^:j/#]gd9sL:"f<OJIi;W6/D2V6*^_DH)q/];q6<[rk)i>RJ,aH._g/S^R_`d&0C207/.1%%3/'*%62n(//PEmZXqVLJJ\bU6'\S&rb@MROoh&CbIaouH%2RY9>*;?TAA)Jj3:%>I!Gi\(.+&=1`Ld<"_CJ4k2;bZ<c,o"k2*K7%Mo3<reU$`R?$`AWDBW4uT(kp\h<UR]4'ofdo@qE*])op1s/,:HH*:8LT(03i?lh4q[2&I\YC&Opo?%^m_heEZA#*@NQUXdUUlQ_e%#sYJbRu4)CoKW7Dk6FthQ#)e:agSedQk?ha\+7,Xr7.H)@(Iq#)pO,3\S.tT!F`dCGYkNOC4:],._BcL=W75$K/XSeX826(rceT2%^'!R8F@Fk[5(?Fp$@kA-'B4eig^5(k"o/L4[Y[rQ)5&%LaY/u,"'Wc"f4I(RI2QX$3r`VJQ>OGKgMeafKccallP;fD?*bA6FN\ck%&)$#ld73b^\.$7fnTa%Ym<LS(g\%O9HRI/FgJW0R]&5?aTHC2:K0WsP<F_mKE8gCPPjWYJ'T**,&UXO:f+4M./'mVE68F/D/gDbj%W(nD#JR/u+<?r4L$[k)2>sE&SYaYS>WLZ"f7-0$O6F5IJK-sOc]&)6?nOi:0L^X2.YESI"["Jp<*4[[&C9TJlq'rP@rXfOZr:.;i%If=TN;5841dqa0Y-8"qAMss<PDFd>Hp=G7DkG6hI(R?Bh*!B5Kidp!86Yr.6+W5XkG5DR2^dLg+ct^hrKg.#I%8d^F?ISEDa52k5%U#qCLNGB8]2b=.%i^hAC6son\GcE"R/P@gAYMAGcS+YOdA:I>a=$%JW7C_K2l:<CbIsbQB9KWN$PGHuf=kYn728uWd/Ph!oX]h<=%?#8/.`j@Tgg@r;7ke8Bh99Y/;?dl[D?C;[(Zcl"S9(]\A;%^LFH(4a6M9UTM5Is30bq:P/-3(?agTI,BN/8,iK4SqIn1l?>X\!"]%l*)s^s0b"qChdQOBD0:39KN2I'`=P[je)/d&'`P7YLfKMBA,@ELO>@If(Ia0IMZf%$m0T"$VA?aYfn\g[BK9^[u/FRh4&X\*fs0u%21I/tXKODQb^8X?UoBC=Wj?i83Jhu*A)FElW0:7(^OG0D[e'=.Fq[A&8ack@9_ebEC,aJmI]$-CRAbHeoNUaP3_<!Ck]sRN2pjr+%U/&6e2OZ_SW^#o+[ogE)pp[>D*u*u>&np%rV)hbORP%@*DTu4k>-IoY=g1[gScUEVic9<S0o<CdESK!!;5.?jBq_MIqWkR]W;Bl(%icRas"\VOEq]G'I:_=XK8S4KG*4($52;bU18,5?KR9>ha$0&8FY2Zk$-V^dM;<ST+78qpV`7:76(a3LqTpGEk5J>>CbjRaOOknSF%AIhgE^\uV_%fLmhb%@L(ohMO7'".4Sa0/HhF_0J!1i#7ZEuB._WX*h:5Uq+4V-$)Bg$mb/m]I2iOD%\I;s_Vdh`4d3]h[0t$b;Rl%&O*<8/$[jp[X-a9AMc4(_'!kHYAr.bc?s3,g$5tu<pN]?6$ZjW]5PBaH_$'Y2Ki7u0oQ;EBPi$[8mb.lpH)9FW.@RARL*OL]<,Uj%h.G;"5J@\:pUb\8ZK8JK&!(b^Y#^c^Lc81)^n(mDh9o$R)3([e,,IcGi[QO`"f'eNepB8-@e[g`UkU60GnQ"J)ACS-^*jeWB)//-%12tf^#3.WD[0gC%Fa^4;V]ER+j@1D.,LH^-dR!Coak*OEjfk^p"_ui3"krV/"-=7hB;/N8'Skg_[#BB3q'*FVm+#j%i4es?*E;jj%p2F`*YK7#umA8EgZDD0dX5VRod.^u7GDHV0qX*[%N%'6?`5"LD3_Wc>-jh<c/'A52p42e$&(LUN[m4,X;6t-=gC<hIXGU!=1fPGK%^9q^n=$#/\o-1D%e-X3%:gb9lPf?F2,@p.FDL3l[s/04n8F&IZ/S/DQp6jFEfB?6MW7_i+L(UJg>4]\5mJF"lXV9!G3:j'\M0JKn%LWu.WD%s<[JHg&lo\1r[C*<kfUR;lJcmAq&r"D+!!Y6Q&P_s'X)eB`NEYJ2MrWVD&#2SO&ON,#LUH+!+jQ5>q8]c8>$_4niMF)AM%3TteFJTZ-\JaGM_DD)9\X77W0kjLRH^rpnsZG@GngU=7fPKAt%o.Z]U"<5>bFg1k<JATVMa^H-*82!=%m7+Y;X5J8.e-;ImXYQ^O%Q<+9!hQ42t^[loVf'/eA,E'3N_Re34FM1lXg,"C5jRA2]69We_`Hu]&[[JM0?$JOJ8t=B8[-V1W_nm"'MnG94&]XK+T]n/;gCeTH%oP:p>%_=d2"!CbBK7d]d+6VI2pCjC7=KVC0%k6I3$3c8dFMVqf;Pe37Wa;]e.@RgfJ^0MdA616l$,LR6<QYkiWL#*2%26TML"*WU%0W>V>>%je8,sWP)@/Wd;c%OIirhHLEE99qIB+18C'8hXDS4bc:%i+#"`FM/=\l\$5Tpf(YlQ<Tue.%V;6E^RfBSAo%ErJ(XIC%h=%i!"eB=$H!;%:'pI`U0=BEn[VR.;Nfk<Y=&2d_CD-+j8_ETD@2Wr>o&nLFhV/R?.MW=*`Drr]@J[1=D1aSqqGeD,ct=3dlCB0WMF6%)Bo`F`N4qMc>,eTH/CR6:R&Tfd>:X/[_$57LC:p:g2,k_]Aclr=f/:5Bm+!Y"1;>7.kL0(Jk[`J`3^_Gp8\/h26]kPrP/Ps3RXA!%JFC"up*s(\p:rZHT(P'MRMRHIi=&[^+c67.37G-u1hCasi6k?i;@2'gXQ)K)3^LG!'9S(ip#q"&24m<Q54f\'UR:<k7kZNsiI0At%NdIMQlWrJ?*/<=l"Si>QmRe1??2<>>adc>BFUr?f(s>6(bNQ(7qF0NL4c&7bBnd^.#Sl_4oX`Ygkk(Wc6YM<XhWsqj:?8O!Jh`Cj%!sBhl<r`_PbpO"><7*ruSSg#XiDl"A'.CHN[3E%EM^!"J:g92G\DXba@M2k08TjU!M]q)aJS_aJ!c8?u!Cnsr*(ng$3c'<o*?&rl%I2%up#"N`(@F=q6WI]u!%("\&Zd?#FnX/^BGt6E)j3$Aj!0RJ+VkT^Z<XN\_*SM`+$B$k(3Bc"]\W:$kOj<"4`i,o+,(&$sb50Hh%7[pV1Xu@7(Vgl\S<6lJGVkoG>Ue,MLNgG^*OV"A6j0<i8L[1RPEr_>4UG1?R>!#Xn,@@3"b0:,!FVj)<A%I2X@Dq3%#'S0,giatG%Xt;1OEE@92i[JR8o4IlL@5MUF(>XrjYD.>'B:6";-ZI#_CJ>h+71"Hq\gHG8*8ee3\Q(0[*j(&S::\ai-b4cV"[ahC-:de@7]GOX%-M'O]NM2mY+2<BsaDkB!YrW_5)(2S?`KbF"$-&WiG^$4EE40<LiE@*r6%.df+'1C2<mh:6j`[sf!Mot2Ze@BU:-`Sf2pE[,MD;=K%YMC'PC2mH#=um9=GGQod_Ni]5"9qOf7KVY4N!-X')8kU\Bqq/seAeOJNmha82?tFOrFhbY8ML%#@:Rf<NeVQ?Tlrg/Cdtce`sd&;%e*t\rDKs<9";41Qkqp[fWBiXK;&\K\WbH$biW^BV5.o1O#O\TVL.d?`G;2YE!89b/%';+AAIm8Ts0a\f=Eq2If8%oE2o<[,)MWMq%`*=C=-W[ln#@lD27X0;bA3;1i@UknG>mi=Jk);QA[`W*e$6aN2N&Vt[HD><m5j7iD,[S72X'NK.bdZo=@_COEY-^9SQOUemm5<$r%7#Bq0IkhS5iD^Dhf4Y<!_dfnt\HM$*A2Z#]p:#(bp1Bn1/n<(N7N:H&e\QEm%(p$(#9<B(Wf8`b8+l@7VK2Y03&<'OCj+-QGmB$u%)F,fF2F(?<%E/>Q4)gW!7d^5pYTh\&hXMd(^6cS)So8c5qR3tEW4RJiB1Yi^TS#Js\ALQg@!(I;&9fN9j;r?KnQh)3mi0MbK2AO*%BK&`JG8UgB@)^#.+n<SLR5Q4s0hf/&(Sb"=2VBI&/f6kkZ=>jj.jh"[)J9`]S'FI1"o^mL@e:(jBcLJ_)qO(na)AC:j22Uf)t[1*%0g8ZF2,CZsVAhElqKJtN)M)fR+'Rk9Ts_Ofha`0G4^%Wl#OD`'%F:3B=""FO7QVHJU,<m\r_OQ\X6fCQdO\MB<<INf*osf>*NK/q%;8G($oB(te8"UULO.JL@o0+_=1*5g8k;M$up%-_?`k>HmHV4a-o2RHmH-"jUgggpr2r8C7h_AK>QMu0BZdJ3+mGb"Wj32;9q*7qA%L$s`%-2$6:g=OQtNV0,KB;>'%?^[D@==`3C#=u&0\[.W@9,m2oIupitHX8=8169`cROV<$6@3mL3593Xg?KHfJ'"+NQC"oMAuV!M%53SRk5%bCP`IdpT./1FKph4QZE2pW5)-Y]\gHDt%^]"(+p+W+a5Is]0DtV;nqF0qt`bHl"?S!bQpPK>_Q.*9h@TN$RnSYOLqW5fD%eM_.a<_mf"h>Fh^8W0k6gS7)</,e+&J+<;if)m:BnmB_W2W<8_+,0+)p:]7eoDN+k@/3*@e*t2So]G;lmgG'8c*I"c+b+ANYH;I#%NCSo;2bW$D2tE$e(%ZnCl1=YQ*h9F!bMEF%W\/1\QHjd!R_%M3mHVT-X4=DW._4:2MoX$.`IE3ed_V\#8H4m5[9)P2gcSefs(*G0%-pOjf5204EZ0VEPX4m8>kL@S]bM1b1`Ms^)=>%8O]EbmuO+$oH:b/Tsr/(a>X6i#R=C1Q>21)OPHgn9s^QID[IrMd*jB<Q@QgN,c%_/h]qr49E;^@HPL5C)aPWdW`kLCQI[:ESMVHtGn8D$0V+4Ep=K/ITsR?R_u.QNoU+'lX%Jn_W9'2R^Kl_cNjl;!-ojPPa)]rEakX%>Sk0+O#C?do_d/"2dVpO;;VT*rLbc,J%iIh(LEUp'D3>.>@4FYJ+Jpp1*d_%gW`lq'gTpT$46J?&YL^<gIEOH,a`^-=#_O-(];Pd%PC6otbLseMpVk#6b3L.=T(i"gNh*h0lgE#IGaI72kOo7\#Lsn85JF4jc->FqO,(cGR@dUCe)mpDpc`>>aR0fOhiEfheaI<cmBf',%<m71"eUW4s^Y/=0V&?](*;lbMcL.!i^+L1m<*jY&"H;KK&#8$!A_o&RGjkUh*I?!NDe&1=HTulPWnSKZ=s%B'4p1uXTm\Sml2YGA%DSA1k^\OiaJ#7^"Io0%#s(iMt!peapMZo3&Vb;rYVYdcNXQ#b8#<!D)/ibT14$DR9oL7okX3t&Bpm";]ZbG'qqc6r]I@\K[l\D,)%-P*tpF$emQ@(h!?0.oA%4is>&rJSq>;Pk:&.SPAR:"1j%Rh_17%@C,f8'nXK:\&/]RiQjXr,+`7J'sDSa'e@Im<u)(qcfQ59.0/3%+`T15fD2uQm,:]N&N%^Q[u`+g]GO*i@7kcK+73!o1n2(VDj`\>P1/5;52!!='arS?II[-a\)k0rW*doPnnE*M@+dQK]_e97:.BU+%IYespXF+eHc$f%]lFC*YI5?4pro##"nTlpkTXD>[I%qK"/_co(qkrV<U"G]%3OW$NkM#JuiUlY5#1PQW\JEtJs5@O^_P)P4?Oi(T%`n@[/W8PE*:<`=)m(<(6-][pL]79Udk'X?aYEMG6('8.qqVHUrY3.DQ>1MX/QF7q#p.tQ]4dd\%Q:T/%;bq_/$dX8A74V*i=-2Ks%Y'gN8q$.#ZSSsF%gRV9if]<?=:@$FoB+M_ib)<H@p=mU`bBsLj^:ab':jSAT54srB#JEJ\qF\i%`rJrnBU;dBn^3N_kK:j<(VBKt%]mk@:TUgIYQSfi?HannfS_(=@V%*@q>^a#V4]D<CeJHrf6N0CZHQJH>Ru]60MLXbb($;J<rQ,OAqHNmoN0b"ma<N7V/'G(K(N!ru%Ycf-uC2G0;3[*OUKt7#@]Gr-/M<a'%@!hDn2F?DqLF(LW"f^0"P/?X!M3,8nl6bsR&nUOFgc7dT)H@Q\6<3Za-m6(8;>N)Mmm+5m%QDQEQpmo"d,%;jl'7$++NO-%%+U\d9T4'89I7"77+!7F)6[ON<kSj`R$87%UMX%'V&>.tKGXfB(rhR]RQFDUqYVEL<cR050-^fF;%2=a5sIr_dobs+fS7Z%?nQbm&tU,%s9oDp4_OBKnS?YSX*m!'<=)3K,u0stqsL(&IL3S)eVilPrJMAL8InmT^HVY_8XjCm+q,Y+UE%)qF,6e.Of_,!0>8XG%AVL!##U.=DbKT;oReX2iBkZ(/<p2%(9@V?!T2iRGN1)"JgVk7H727,pIPZmWKXMmFM;6,_fu5/g72VqJu^%Y8bH?a8R5aqPUp;@(=koXHdFpijYJ>X2TE]1U)aF^RS]>?[`9H9As@?keXm;I.cgq`b,&+a!8<_8`k]Vh&Gb,aC`KP&\0^UMo?\T%,.)<tr8\#?rV![lr"H2P0lK^5Yjq__Jt#!nm=-UuIf1K=G:7\%BD3@!h2R&jm1Z^3CE%CJhT@&<%]aNtg@>%1[pl]DlcT/RT>:h^%hqBV7*NnJUP.iLCNEYc2XPc>!Hl:U<BIUX[\Ii>)(&!]p/%KQ'&HT$`qR1:DfKA9Xfg#]_9IR@)>hRg1-]<(tV$,A\p$'4N-OF#k%[$:QbF-=<r&QW6eU!)(GmP;h1hldiYLZ6f=m?_8jhT]C5qrkqu*1=&DT;&@RQ=iLDFPos.r29$F`u[SM:JPqK2a0IN]q,2O-$'o'%Kft)bZ7eORs.$dJ'Xkd2?Gnbk/<Fk'rRo1`qgGSgR,*2b)T3Y.-Pt'aOASaVkN?p+Sq[nd.p$4nT?6r%Rucq95skP+_Uc]=&(Bk3%3X.Ian8##8e[g7i\r1@dRs;?;&PgLFA$07KZ3Rds74<TX6S%W?f[Vq;h/e:JHMGtpAmLc;S::Fc`In*a5PJ30i8`j*oY4q0],@"5%\Vm"IE('Cpc#A99U1<[MGG.75(OZRC?!XS^CFThCX-eslElI^rIkkFaG4FmbV[nZSN?6;9IGV(f>dBY:Y'bEZEp6TlmG8&K(*Dj\%"JNMio@^Tk%c3ta*IKjCD?q:B+0"s&mpo3G[5,.lcE?'mCK\m(^:(5Wjgk1`,`<W/pA$dkFm%rl26`sl=Smj0?!][:o@m1!]<0l3%SCu)bg=!UY^"=0LrgIu]?8%'U%a?)`C6j7Pc)$EnrDtY1:S02+TWX<j^KIQn@!10V(6>*C43*p2)s\kY)]M:c(E]cN0-4)$nT2I/%S4hR]+Fs!&\aZWtoGa.%6&E.]q4(rLo/B]QZIu:blm#[70b-!RrYeY\EW#0g#f51%Y$giX?gUf17MV4Rn#NWMJ)pKA9]5#*e\8^%%.sE[o%5;-qf*GqfF7+V(?[VEaYFBt=;601pI.mD2V,4/'97cRag]p(BKj)R4I)$PnjlX8>)'0(AdBfT\euJc;OY?M%Ec37*bNs"@%ks9sGNk'GligY/;Qd+Qoo:LU/Z[3WUEaKX"($duH44(S*iB2(rh8V>8D"D3!;`/I1ON.8n^:RLN94qW]fge-+KD=0F1$s*ne)1)7%HZBP'aVlY!djLXH7J3:S\_t1*oloJ9><k#`4P3bcna97_]3bH+Zeg2QAD]T,43R%6/qR`@28Ah'c<Y+K[VVu5"m+E0@Jb-1.2j0&%KEBkQrEpK4cJbOR#K>^.O$4=SJR>sVo5L\uC>m89))pO0-VNH8rW6WI]t\aenDJ[bUF%Odqjl!NVsIAhhJfQ"a18AmmiQ_b@ETr6%ij4!5>:T&n,[6%ljk-KOpXJTV>O/#@E.+PgmEYITe(*aD[l\!G/S0ioO"[+8lWO_C>+D'hqpPE?cT%`p:[L+&[G=$22?3!+$]:^]%^,]DuDD!e2BqQ=q/ULk?^MMH4:ELh<pHZV)8C<&"X<fskglQft5&B?<jPR`9P7=dDdD#>mbiU#E0ZY1t,jS9+V.P7k8$0=Ig&N!G%"rWf#Y8M[fr:+g@:b,\2&M+.Vl[sP<dt;S`I.dJ+$O#5>br2/32i#KdNXH3MDR8,=G>;5Hm-a0$l]&;W9=DJ:Aa9^Cm:Eb^3dDrc%J#U(0S@[TY2F%#n7t(;W^UG:,_Rfd?A%$Zsq\2"*(REEQU-J[7L^0Y\CeI[sr#%;F$&Eqjh)rp8mQR%ua+`!O*E\H7WY![oHr/%"%^RQ&1)e]%$+$S/^ZgPt)FuW+fl1^23LYH-T^!N%C!DWLMrl45cJ%"=Cg;ano*,Gcu\u.Ac+@UY?8UJV)]Qc$o>IC$uicBJ4-*/aa%5-95A#Kd$8\_4eQrEGADmuKB`T-!^%\t?<1]g?>GZFmI=k50jCSAW)Og&5A)0=G3(l1uW_hJ98(X'^haO)$9/rmu&hX*moYa33:F%iT8ZdVm(8@gg#@"E;gm!il<.OqX/E?:gW#8LZRj]'3\"Dg&gIuEun#__j/+'@2k_"os??r_!TF6Dd2hPH`oB^&&*2pVp0BsLqpU+%C7[T)]q#\Qr94S6RQeT<60#c#5V+k!M@Vq!YH#0VEF.:D54=,\iA)I,/\h>8$*.>^/o4ULd(0&ZFi9&e^]"sRL#-;"!!^%t`m]Vh%Nn%Gt!ip##HZiK6);o,A\Cao5hKg<j`P;n6?^2@_MeZnh'79`(grrsFYMZ(Kcj!\t,U2kr;*Q&3-J^>@)Ok<=!A,s;Sd]&Yj/d[5%;hQn#\<h&E:D\bp!h=c-N2g=fX=*[WF_B*PQ1XRn]gOY6-MDgl7L=M\Hrmp6M%:P.<I[kn$UXM\h(4%l>D8''XWIT7;A0L#`W^)B%j$o"d%Y]&1q!?P/<t]^bebPB/fc(IDPn4n&$o]!hV`iNGql@o<lg:pSEX6.;jV'LQX0o\73Ui/i8^$hLk)$\K=LR-VNJrA.eiY$u%,p(uVNLJ[AQF_dHh&hot;S)(G<6OS8[IS";I%Pff:Zbuq\EW@plo-hO]\G0&UV(bRJ+O$%p?sQ<Kn`\04.ri;1Gmb2ar$UWm:^Q\%p[KF]nE]X)]]V@1%:;>QQA_/>/^M[sD'*Vrf8<@7)n`qkK@09#VsocFRn`Vr/LZP'4.k;!3J+]X/j3E`qrAuJ-uW.d%p%;95oUp]%O)$6SF<mo(fH8BsZd)ULMd,)^`J%C:n+58FH=tK0I8ktcmluq=If?*;<[?tk(M,h6/ULX`Uie"9$)DN)^%G]`Xk-P(:4%H%?hH=L%(074DiPmPXc.kGYTt(D9D]][O)eU;S#JJ$tAGKftoF`7m&(gpQ3RY_b=l7=B/8`24S3:`1XcRL>Q@&@eZd*UR4rT*U:V:'qCA9g\%U/GFghgKe=fIueKoB2_rpX-mi^Tmdhpf_q@HMr<&=km?mm'3;ZBQI\Nb<%C>mC/"R^@\0/>5ltSXLY72m!d2?MCE!&_a`h2L\leW%Y7)!>#J&D>Kc9=3msVJPO*cksH,.Wg/"Bc/rq]O]T.53ej67n85u2tEf8F2`NM1e.<E#QSKHBFbVdf,Bij0*kIY#cS!$P_?p-GOc%%b>mjiRd0>\@GeBPRgi<n*+/][]CKeIJEH.!TVVQ7F=5Xo&f70YP@KXmi5,-4=8s!\Zp6idQkm+Xl;,RHo+T"QB,G3h^r@X-YJuH%\&E+[Wn1qoPg3CLWdPDtldm13nDcX0[C<j5/!mN9m,:&'0]JXMZ15L14g,sH6C,^SDb%$"[F@rP?%:=d@\UfBguJ(F_UIdBH%"r;%lWi"Dg;`t1<M;'&=$qUR'^(+b&Jj4M(fRtcG5(Z&gb(beLj[QZ,e^l%MhD%Tbr]Zh#OceHoD<oTdqr,E^OA.l#7>,>it1j$m+q*m%mm=pVMZ8X:]D/26f%_g_-WY-Jacia\fRCGgSp5`AqCSfG42o5_c4<-V/q7ugEorLh/<,,OldAr0Yg@[<I_>A\49OJc!M$35/`'f9%bL:)X?VXWTSe\t=5<b/3/Za`_H<>7RUT-$)k0Gt9bD#=erhsbW=7s'&4=Dhpc8dR2H_6Um;ZC6HE#*2C.f,dgk/lSZ'ktZibFd.#%GZg_jFV#_ljAJYTI:P^I`+(F#S)1XC9A.=CH[E_M$X\"G%0%#Jh)eU]nq+H6^TMGB^>*A%+5WPR?i6WP&OFp"[WnX?_<?N>pB2E0%7ul-+eH]Fo*A+SPj2K9672KRliY'J/_p2liq+I[Oh4rOgpYFupL[Nh-prG_R98q&,^1Io%b?^q6s.5"Dp#>/k$C$F,Nb[;<j/=_6%FH?A-[m@'SMd!$J.7^@3K4BPgN=,o^hiUYB?D2hLC9LGr/pa)VOalr9lMhcN1bq>YREMUik]lUTiTV3I@C%i%f"AM;ODTpD/0(8Y%*FJ?j^=#1='ld#Ikl_kbI\$?FV8Fs;HOXPu<pMoB1XfWUj\iqDd#-GkDpcD@+CeB*DV'*3KaniU<VsD];d)%,fk`'cV2AW9#[Z\^%=)BA9"r3nV7?^@O1`Ma!5gP^5'C.+E8sN02H:lGW@_XY$Q.P"5"#.&a#9P)[0Ek.$Y5^q5nTK1n^uc\7gcURpWHOM4irWTPb)A;"%NZs<"L5O1AC.l.^0P3;]j1\(i3@EYF*%,KVm:q%Sn(EXgeN#*uB\Y?AT[#^hbhjIg,q>(`>-jb-Y<%[$!4@:&obnQ*\(:`ePfDU;%MW*ua^L%,R-B4D&D`tX<qu3#%e:l53<%?LA8NUIk3;5'`Z,rn7hJ;Y?JlP#9IsHW1p^GVKUc([Dp6mZ_IZM%PP<?h7n7t0Q5B`KT%B)0*qXSW0g4T)UQr\Of=-PZ#8^=fI3rQsp=oV?e:*If%k-nJ\Vq`U)+'=4Np@ku/QT'd6MPqJK88]E_oDDtA(DTVeCLJu22+l8'=%4H:8?nO_RM0P5FXZ>nY#N<jPtPffL660,OLE+9\c?KtA0kW"te0dA):9`N1n\4N#HCZ_Ih>.TDMZA/[u'3LQYbsln!>J0U1Y!,Us%GCBSOc%P^!6cLipOV-;[bRMs=AYa,@78Ot3Wr-V?0D6dK=WLYL2#d@:aE"g_Bg,"P$n\_]GFJD1l(]EdfS1mbb/]'%"uEQEf=q(E%`p)f(OGq7#HI#JA*%>_sH^$[-r_0P@%9*+#X1H9iPhg)$^CNV*@ek/e@S:!R.qaL,eB1URkk^+c0J#,:-"GUG00>8q-ZR8(N2/lk%3@DcaG'R-^(JMtE.X+m)p(b:M2uAJ%jGk5^>`ZP#IsBhNT/=2q/V.=>^(3rj6ReqNYaag]D`3u@$bgR;SI[<nJI@2;hG8V+N6a!G%-QBhk[l3HE7W7q=T8]>](ME8ES+L/Afd(X-G\!1+2lnL;X(])>cl9iZL!\8ig]HGDrkD?@N\]X<LV/<2DS#md1WMW_>jc=,a+4+@%aP*I"9bGCGIp_SNVTW)YY]9HC`+&5N3E<mcN^*H1lg\&@1R_q.2SM*9C9$=PK?9.nkcnPr=*<+_J8UhlU?I?N+l^OR*e/@WN2sP4%ZDhK(C$8/PKNL^`!EPNK9IBohJ2n#NPU[-l;joe%?FZ#2R.uiN@q`HsO@5u1.ak>2\o!i*CX;e.Z\gn&)>p+dh/M/.B"1[>"9!D1%"lu(:"EU[N1lT5$4q(DDoHEZCgLLLHC7)G>>!rSm5_c>0%%trN'(L`c1XjoE&/Kk&';(4._?*nrJ0I=7dKZg7^dmIDCV.1Fi"*kJ%l/?@,0m/,?c441)(7aFb7J\>A.q9GiKoQXoN#u)0S*B/3jE8HrJ/"/0:lRl4CMK;*!10\[_]6LsYdp^iK/?kC,V@cDGJm3C1GjcP%VJYV>*YguL`$aIjJ<CFR8CnF"KRqX;ChrN?FB\ur2.[Y?EGaW34bV17K-5%#?WD6BIbVp\)G"/d?iVV$0g4R.0c]DOjd8ms+WtG(%$ABT)At%g0@4gu&l)#?+'EH9s+Z09Km!u%1^I)Rs@I-%]@"qTO/Ha_BL9=]4:^ajN)1F9$@&8TG\JA/N%-W]]>.caqYQe)_)eNp!%2X!5Dm9"3jN/AM:jkBP=@VnKaK8!k=j@$=Z?1M*<\SN-aV>[9]>)I+`%&ba^7GYs_<Fteh]P0AYMPB']I\@j7i45l-oq:D+3mA)b%!cB6f+?l)$4KKc`\LPafPB!"c.0)&%_]aPJ^jH,BA>Z@qJFX\1/3o*OQmSdN!5Mi)JAE*&S&&j-a"jN-+NVii.KP'S3X,U7ZVADm%n[06m!76f.oi&O9NbUTb!FPsGM@1&nJlY,:BQXD]dPI2I3naT8EFJ89!,A4BD-/%t(WHWE":bG%^kT4Tm1:uPdVX^u2U`WH!*1>[%YXBY*2[&g;-EgNQYtJ9?1)T!N=(,63>h&Vs!!6OB/1dUfmN]e,2&C7O'dA1J@!#Z'Cml:DauJ3_e(#WR!$'hQ[:h8@#d?1MrW]k7%%0;.H%(g&eHnfb30hBFf@-N]P^u0aaZ3UF>3IK,o3$;W>#6=K0@-Ar@Ke]-%JjFQ3?4XrQ7AF`]!WWRjjFl.-TX2:ilHmV(Uq!WI%_YA\I_<]W/N?J9IM+%E;c3BS;H43<QF90`S-)4Qrk&LI)&pZ%(g*FG+f,^Lc#7sp;!aqlk*'M?l_S;cb/*#oL&RiIo10:BgD-RTk%3-AIV!8uQr;'*oJWi-X>4,<uN#B/0NW=7E(/-;&U`Gl;jQZ.I>0I_5m/hdV4-50)"/;*e/U.XI);K_+ENi(N^(_`peg+:L)!76m[%"R@c^Yj&Z>5[b<,?mc8(gD5[HUC0eQ/JoUZ!3h/rW*oV`h_7Ad"Fu4`@#-&$BW*BU#T4Bf)9`[cN3fY6PQ29YBN%GOZ4?#Q'hGfk%Kj]r)N/KVC*ZGK\YpAIoDM&q_0LlO7S.Z#-QpJq!J8LqZfc]gX&i^.uD?+@E?4/6h5mU1hb\5g$iC8o$_MoZLHiVfXH@u9+1BKCF%7=[-/!kM)4#??g]'d/Gr#LLg".Tg!/'&^>^f70H-TLZ5^QkfqB3*6Hj(l99W*nN_U"d!FZ>gjUk9fRmpErBjk-N[Bc=4Xg4XKtW#%*^]&E%M49HRY1^.9;i:")V5CjB5iOI\Fqoei%BY.ZHud^;3Fa!K%;_Sfg?o]a'""?dA0?b+GN#Z'atS)M)_.43Il[,+_kln2lK0#%99=jL/q^=Y:dq$h;!e5_MB,_-<JADB.KN2-Y=POF&q_;<35i(=SQBXm%P9WD-o_?+Obn?e%NSJELI:A_>Wj+m!JlAd!:UkBlEgY.%$4ASqIi*_F<;)-Cl(!#-.iqf(oA%FdDf/T`S[u?+_eMYQS?9>J"9M6D`C1>"5g+^*=g^U>@BjV>!@$N.d(21n;CgZbJbYsC]e"<D%N@/-r)2W/WDB$JmZVC#,>RQL+)@`6l*dS,b`5WmBcoVKdQ[VL(KZO\H,04gg@X/6kj=j-d7eCf^M^YelU$3d'X^6-mFl+ir]uF4"%?X5f5P+oAq-/WMtr:[j+WV/BRX5Y^_L$clUY?$qGq\r]I"0no->1,b7Qq.uV`/96LN;aT-c18iWWg"!2./d<HO/NA\e/?44q:1PL%FjIQ+"-'@gTO3\0="JM@'%P/Z6,*j!'r=E[`t\Di[i8>k8GKXV@7%'Z?ji^fZS;^J*`fT0[CpmjUE-D0Nsr#39<V3lq<_iGVnZD4%*P/QOIgOpmYe1ieH\sY38"lW^6ml*<$5tsIdLT/FO\V0@dLaYYW.'J8iuth,8h!b4WD`SNPnLQq/EVHfLrous?5"nhL7UT/-VHBt%$HMEABIX@)LLr*k9k657Do71*P)5c!*Bb4n0oQB+!/c-5(hRiRW/q"@@qFrB;rK\AY\^;)rg#6#Lpjmsn\>QX>qQZ$>*]H=&-r;I%r*rR>`(4!48,t&3Uq+&hi?5pD;(Vl%@Ir].BhUps9Ug,\3&N<E+qOdVM!V'6fFOe)YU,;A^p0_.qA[<&_%0Qe>=>H,$34R`-Lb+L%6i`/>bB1gJ<^j^sB,U#SdCYVS>h*hj)YtAGL;CR1FP[0.P#BJlTc4T"!%K(4!t9,p.O5#D\8<1>KS'9RNn"b\M7B^>8@i\TcnX,6%RaRiR^sSkWN=(Almc`T@WMY?$!6pX@l#0-M:E_qoj>!e\%k7J%=<u-gR8Dlt`hH(h!rqE4"I8Vg6]En[K;6I4%O6TaPCs)?9GXP1%:aC&ir-ubIiAd!J%CAL/c+n99-dd)T8fW*.Np4%cL]Ai"/pUbq=@W55?$]spJ:R`39p_mDD^IZs_mZ>./jSAh%r)Ts6u<2#4MV6#%H-g_a1Xrjn&O&CVR:@GiTqLf\V*Z:+31OXuhdM?K#s]BoED=u?iOGbf8[\3"6t:,0NQ3oF@9>k>:okfC&]!OKDPjBI>S2YmJ7?;P%NtVaX%Yi)8Q,FW9eo;pcBb\L,%Gg/iW+1aq0S'L;)Ng>A$AE3sIT[S!&e4s_WKR78W-&3$@Qi;P%WbOSUiH`;V7+5r;;2r!eZB[G%bI7t59)@88[P9gXnHilu>gM=TR094u%3@?(2,k_bR/fLg?j`W$.'@-N;C2;/LdANFi'`R2N,@fQ.Yn(!Q`:N&8Zb&l_i7NL!4`L9%%10J\/.c5a=Nrk`*S31o&-5n/R\MX3Y/\-Y6VIiIK)jMc.d:jW>K6gSBQb6&rM]7]).AU6XU`h$Qj*ciClE'IW!l?_@lQHd\;P%9%P%WcJ7XYUD%&=dY+uXPskd5;AWB=hG:^3o(M(Ai0<],isK<8Qj&/WKf-AnTn`riP==H,]&UUXo%2:.A_ilhLTUOm,iC)H#T3JO;;%Csb#bfn2#pM<CU'B'G,)_h,L4[\a%T=Y:4:)5)L2U_6Z0q/3\g>b89`9[r\WWjj3h-l*G13?2M&Lg(]^`]9!LSjCONDJH14j&Hs4%a=fe`ZH-;+iPBh*+doiN!/3<\k<.o^g(M>6>oYt_Z[Hp(O+Mc;k9dQ)JVP)?1r@XP?sm_C)Jpjp7+:pEoCX/7V)E!:!&tB%V[\dj%lnhG`@(6V"QZ"mKk=giGj,2%,QuWlS%5Zdd!u0:>&N#%F]R.!rMp%oQ"po0/fc&b7!s$7+6kCP@_pJ^/:gM?Z9;fVGm;5AV_.MGr%d:P(;3\>q#;MRib@!'fOU6%G']&RZGMB6VfiYK.[4!PXa(BA[6;ucp(k\q\C@1]CJgjB29@RdSiNtMtuatQ<a?\V_GpZQ$lenK^T%aaB+mF0;h<7/:dIrT[\+&K_hug,36g)2:MGc;01^"tk'B%#2U:9dWqn1#2Q@)5REoFV?_Y6"!.E!ucbB<8B/KciBm%8jWV.lF&N+%_Asqs+FrNuBHNe4&6=s&\5`c#>`u%P?mlUH]HI^;"SpJ*`&3'd&qlI;T8Pt/6R<V'46Re(;;K"m'm5e[568mLHkrs7&DgdiHk..m%%dl&D_`4aoTk$Q&6Ppl<5pJ%73@J>bls[p\82/g2-ld+2,T%QP*=PD*5lf";*SR22&=!]5@/d46R2<^[gffn00)RdJl2VA*F9iGp%*Ru$HF-,RlWAT/#Q+B4BG,UN@qWk^$X.^4h[d-O>/ldKH(:3$$=?T6675.Q)QGI>D5e+M);GBI5\Bla(qt,)8VNN'u+`s&=B?.);%^`f!:(T#CeX(Y%F;+ZAh&7V'9*C?QA(Yss?!qs;i(DA?/;(W8F5"[[?M?`;tLI]Jcl^h\;=0P^FNU0"Gc]8V@!N_#KY(95G">e/,%1_9`.(P;o;#d2j&=s\cO<2pin>*EAE*rgf&_V-U.4`E'K+b7ML5eouZkeD-t>_`Y'(a.EM%Y)rDfC>R1b='7S-ZiD%5E^84iGc#K%FZah$(%Le:E)=:n#B(b,%LY.cf"+7Gr":=(a>e%grMLkRKDJ%WRc'*hJCS=/Nm;3i0_F<T4>IVM3#Ntu@<kTL"tHqp!t*9k[1I#^%LlMI5*i]U'l-**kNn9>6C5&KV10'JnW[*oaFma"sFTeBon>rnVlMM&*=HaAr'S5I!PoVg,LV]^Z=4BJ>7ag\r]E6[FAk]S!VaC-R%#8Y_i$^WQjCkc#"XI+GSVBpt3PHaC-=K5e-%?kOo<5\4;L'G.j(hL#;RLc"XLd8Iemna-M!',/#2',[7#)e@20[W4$YYe@gK8B1,%'h/Y]@1q$-!K5)mYd!4t"O`n.IuP@]Wgg7]306ml5_gPNTjgFA1?l;`"N3)(('@nZ_jPa'_pIlq)W5=+5dL_H!7;fQ;oMBa+fp>e%7k>$$QA.'uN)7)H'@ng&";u=/Nl(p=9/6c9F@PH1Gi^u61L5cR-#sVb8:E1c2$@AIK0FuSR73j$6*B=E3:;:P3>6Lg,hS'JkqVF7%<!]N2*a028Zbd2#[7qN*KUVgP)i"a6@T6H]&bf!GXBgc]^dKM8aqCs&YSJq?OamPn@k%RiAl*o(S2I:[p^#NL&iC8EIL+iR=,rC#%/T]+'Cd&^6'%<)"8^qO^+`t@gCF?D20%3&FdTjGE.*6&D?%kc@d[\Z;?/hm4F9bNt.rC$uaC=CC.+4).Q2rPF;#QO,C]#N#7%@um%PF0?cHj6XYJAmgbKUH_Z'16/*frJG16#IR8@_I8Z_h[hLS!%`6lL:V[hkd^OfTRC^GNggk`3kC=dior/dPbOe@B`]5V&Cc45cFrK%^5eQf*\GBajG'[G1o@fo-Up@lTDZU5!4Ig+_$nl0'Ig1/)+4O(`e+V_pE`.8)%.urW?qoq)D'3+0YCIs.R?4BV>sOt8-Tq:Pij6J%!glY>Y@^>okR\[SCbWE>[J<ggH45UBi&,?#[WnQB`cM2RdaS="[,XRs4,*q=<FZb4!'@\a'8'^_W2LW#Z-@N'!`GVR8.r.O?Sk+f%dQ+mk"<>B[4[bO.CEaQb"ERPu6GA)-`[&P[bS@(uN5n=6N[*Rd)0%&MW'pba;rtOqKUHp=;ith"1E`9lgm!>N49b?[=:reD9`mQ=%@uPt3NQ!pu#84-EdOeag`CRls!%]a=GWdR3">`gJ-"0M'8.ZsI"hdf>U/,ff@Fo)-6G/-PYd/gtQ7!ciQ(0Ze@p(Dj"('0iX.CK9%,f;s`D4#r7=PoAq'Ca"ldMXr:XtPfh=36!+WEk\@,r92#9_+,^9`)fg$>>5.)'2M0$4d<;.O\:_W=&LV<R?QFK%G$mKd,V:hMfr<%:p!Xhj9V\o]\B,ZeM>M6QR<4WNET4[Wgb.N%0JX,-JOJEq)L:qF=d\Jc(Ws3>3$S*5`--;9Q!0$#u\"A!#Q>SP(AiYg1Et,KSCq$%<>Xs/8-qTX\VTG\M#@cD(BPmp"\fEa?iF5l[Hi(>M`F1h$IgfcO4NQ9X<dsk\l"AtZ\I-u_,\u:4M?ak^bj:%8I+@"$^c]NI/uf]%jBRBk6TG>c`3d^l^e#Y\na!p)lj.9-4Mb_\#/n^p(=pM].ckd!/@m/.j(X'[BO^P[&-VY\E"Q'n4:qWf0d,=Vf6(gR.P:bhN,%$$%-9))F(N5<9aN1kb2e*sr2"i0t#2LfKJ9XYQhE4&qh*T*uQl?`C^fq)/BO8#BU`A1N7a=(B-?Va@]?H"m%.fM5#f20,L8IMZ(kD1p%`jTu+2q%2QUSH7"YV`H!,/K+d#3Pf%8T5Y]dLbDl$4FH`NIh.=2cZ!>+Mn3eZR>oB<1="'XeO<65YO6'BSocYM-0n!ejlhH+Mh;X%?%a$e+foORY@4I'/+#3SQurL@L_B#]MNHIm_`XY5a-&^G&L(g+EP\n7LCTr8,[a^g1Vcn*TbL+lBJN%BBei;r5lNK.PYD2uc4W7W%KLpe@&Cq*?__>Z7;@FDe:oUr-ZnYL94QTEH=b\OZ"pl!g`<[m:`<[<\,\Y$RF-6)1nc^h8Qndu?K*5n5oI/4?^dZ/ZKHQGP*#RDq%daV*K5t_o07_!On(3PFFfeP80RCKim3bb#gA:Ug=S@HGTdm1KU`7<?k?s#N$`#LG?Lk6fSraG"[`FS-9;^A(>:mnZnUQcW/SqRP,%PA?@I&^_b`L&b/iiZ%tfMX25kP_k]V!H/fecc1nb&I/P$/Y)n=:Nt>c?sK7<3D"!U^d-6)*4I@98Z3*oFHI:eMPQB^pll379V0R;%Xt0WC8lGcqC+cS=e:gbhP0T#"Mf`R\K2?1joQ9/FX\7Q)R=(AFY"X!)(:S'-B6scW9Ed?9pr!;[0VYpNkUnf:-n1K5Q7#/-X\nM*%pl*CVNS->u`%82^>b7jIMLmI%BR+VdRX>6!/tXPPc#"X=8B.b\PFdgXdThF.:)^jQTQ+83iO]9G"W^Cf!D(,Hs%Z8J#Z,tPrtAYN%+2Kg.G>@E^jI/eW$Y*GZX?S%5NY0lZaoc(n>XQ3I/6h6T,r[dB9LCs:q.2mi@E*@XbQsVkq,0m%k8>[^=<(J&B>@`++lt6EloIO8%$Vc=*4a;S\j3hOp:s1oarWieQ^S)QV;X0Lq:;\V@R-+eKZq@6+6P,,#XMQH$bQnaS5aPQKg*2Vl'oRf3HGDj94"[NC;iDSTP?SJ]%jZ/1/#VYO3<80ZFbLa(N6LtsU7M0->"@P*n4:K+RiMPBqL)sj!!+C(Z):M.S,!8PIA]JSE5S=_t+F/2YE[%RoF*D&E/")4q`*Fo[%?%a$f+f]CPYDMgtl1ce4_`W,]^,plV%+L%5CB2;K7=8"\0*P.c)]G\09]Lq#$5)>s3_WeH`S2V^/r`)AKBn;L5c>0b,bT?%1_Uj<%b`%FN[UIX*"DRs99$tA5B'LAsWg%F=#d?.EjSs2Pa?ak7r-`>&\2ihDXq]kP>S)(&8o>X)dJMF'AT#FXiP[&1C:&%b7K)8V>,!;\%'c;GQ"LTSig/9!sjN>E;(NM@F^1/q$@ITBp9iqt0WL<sCV,K6?,Z)O/U,<#3$;V!JN,kDg75[ooi&.1)*,,,ipDYs]DA+G"Z$<U\%-^.MFffW.'<%+jdfU04dm=mj806>)o%GDh"<Kk)(9,MMR(96/72"<O>>&BX7e'YZGa#)M_:r=jk9Solm1CO,+NQa*bTD6m/3]o93%ft+EKCj[H8dD-,H\K,<k%`$S/qifXD0V#/'g3ZVt[a]&]G,pT1YaXq;f)KQnTh_=Y(-Td<\H:6b!Wu.ehmu9BbGIE(oVoZ';KR5+%;a;1SQr9^HMQUPhV3Ms9WR3W!Rd,4Ec1'1/HtsZW&(4\FR"WgE1]c+r<3o?GG*:m"@:!bH;j=;D?F<1_NUb[aWCm.6#!/]_Wm^Sj%5''@-OHS5\17NBVW]Cn#1!SW!6T#%gL>ISRA7G1j$(5/Gkl$Q(D8SAHnM^S1Rge)5^h:5!(9ko&q"Z%bdWOSFZ>.f.>$MV<H7`7Z%O!b/u!12Or,rV0[``EIo\UZs?hW6V6mS]3l[1`l!B?-Yi%[a?9F96VgS.Pfn+F68(5^5:05ru\(:EY;83an+O1\d(=)`NZM=Y($.%/*Iu:i:;aJL[UU5\B1pW"EJY=L7p"RS^8`,-2C'(JPT9E'?h.bkd]Z++G9+$&/Muib;jE#[$>Rg*ePb6EA:*&1`L[m!C8CO/Io(R%VA"dU#68`ScVS=g$A#)!@1KWS]N@3ZZQQS'c;*.]f'*Kc+pBnCEG(5+B-pA]#U"^M^1E*Cb8)5L#d@"BKh0,+!2Q$&[3<&]lh!XM%UF0,[@];gm3c"LY!?TEN#^KTuN(`?s)mH!7#qT]!]V)7q"'@00L%,b]>Wreq0KPa]6B,Mj]L<U?)!;*?#LEP^inPPkrrBjn&DWAD%o-;U2eY)i="B6rRe813tWo%ui4r3grP&o9klQ\e)-L,cb*#mP%+TVm[=<X7b5cPl5iC!(d1DN\"+:NHGF=tQeBeZtc5gs^pmP;Bm%LDVMI#\)5Odg1Q)^h!`jAkk))"-&D06Xn,M*nUU9\-(!o4NR,#\ZVmT2<_8&E^4-AK9&:LjNE'K&"d5G1ck2[+Oq&E2,(`r8k!Hc%!"a8ViMd%G,FM&M]F7mN6SFJg3FDgp(2N]"H3?Wtl5Ch;/jT's2Lu]0UZ5`mJJ4$hQE+8s@R.cf0H6YUTg4=r$8eWB@WaE\WcO89%P5S*?b7T!/[M#06o`1dJ)BUZi1DAr2,FGR]'3n(uNnJ,="GBVg'H=(7;C=_P#Wrc]ck$t11D5Mh(6q<c4ZHT`$gKI\%:LRG0P61$%PW6/]dPa5Q2MY'9!S$pTi._6bXoN0RJ;)Um3/9A\;bZA./AYb[/m8hupNuFq/<r0;5kHl6@PlaU]mXE!%]c$Mn;q/0J4h7on_jJ\%VP]PI6l#nL@I/lT$C8]."CGX$-["VVF!_0$r:hhW1?/^()u&jtZfVII^rg5HSODW0\UkV&D2[nV?Im/n5&PBfK.BBOaPeR%'=ph1%"sD1W!(IMo%F?)!BL"Y0n.T+h4mV6nSD\)`c=))/OS6X*L.>V_UbU-p(UQ#t1rA5k$(.aCU?ck'[(-[epQ&Qce-mJ.b6S)h?1\Ne%9s>hgq`IiIK5+8b]4?ELTcE,XnjG>Td8:Y-1@c12&Dbd&#h*Kmh=/.Y*6ll__fHEJigf'<`a_t9$6Du2oi:0?Q(M=s5gjo:e16,E%!A[c-`H<<:d)JYs54V,H*I>G[dG[2u-bX"=cn'R1O$GVl"K[sb:10KV1e`HjLK`%adoZTIah\3<`N_i()N$RgZ"f)4BrDccR]@?Y%?l^??,`jN!VTLlKDZna\3o"1r_&?n(Un2=GW"SD4k;FV%os$:10L')c>8^[\3I`nU;dI0E_N/D8o]-nl<7_a2.[jV`?%tkE'KQ5n%g3eIF-c0Og5Thfs6/mP+q@)F#0RT(NE=fJ@5nO1Hb!^/tRCjZf:P+*#WY'/,dhHqm9H<$3"*_=9LhWSM'^I?GPIpI)R)V4!=gYco%G^dsm3Cq[[`"A:<'XV[r647nEb84n\2>d.n1QaYT(T$>='HM/0N.#gYe6GKFP*U/kJ>]s[7*gu=aIkJaFF"/;&kC(QLG(7SjJ0O%%;#q56*=?!?aLb.aJ929AK0Hg?&0L)=C@NN`Y\n-a.Ua!F+jO)=pi)goPl$k6[LoSEr"2G8_WG"pB[,%,5ml8H>bsME5S)[InKVCD%\OaWj\bmEj!]<UN%38/CCr12hf[Rr:jDo@gjEf+IM[L<+UK%hBL"I$B(>K7ZJW`AiVeGQ.@g"!`V<Pkrk<O#e7&0T&+C-GDPc+n.%n\eBN;F42_,!#kXjp&!$R**4`(ekmX5bh2)nZ*iPhl2H>.<.2@s5F?h?jQe8*mZZ^6YKHc/s^$DF%:-+cH7b5OsGCY8E/(hVipBm%k2Mq-ZBpplqP?i\8bV5tk'r66h8kR@9Od#N1`Fc$^^(dhL3MHto9,p)PN`0:a\[Vg>AtBU!+XUjGq>Vl-c:I4nLH)/b]sI=4M)EA%Y:o,T4qO@ClV?nkc_@ihH[:LK0AVHK+JD3IQkG7+0m+-D*st\a:o].G*L,i^rl;&J(%3/?6j-GqJX]G=-NNE]])E1c]sqdmn!)hZ%(WTNd"%RmaF;3-`=c!5'*_"R!;jV6W5[g_kA7GU]ctPpY18kYpFYN(<UMO]P&@NKR-fIK7$Yp^F/%X8ui6Tt'oS:!5pk@Qa&B"GP%0e?PUU?aA+`KWW!d`s2s]p%tcRl2V2b%(dca\)h'$cBZH,$0L8pM;e>VuW+GAE#qgW!?aJ"$P`S^h[o#TNK0m^3UmJ1(5'0Q%q0u%-KC1BIXjU#%*CD>>%S0Rf-+(R.Z6Zmc17A5A/V8lc<O<dbNO&a>\[5g\D.8+$)$&U;;72(EX#pidHkLr%-.i4o,`Y6-Y9k0lRS;k%8$gGW*o;<W\m1X3&Z!L`OQ<@GY[^P*&d'?;6G06%@;Q*0]q.lFZ879>PT,!?*LoWGRlU\<@R/&Q)sRe@e9PWk"llb"Ah6?d1J!@s%?`ERY)D>$#]Nj\d'ul9$c/OUpW+Hp@K;.?mJZ3*N'iV-"rbf\s%65$icG$G:mP`Hee2l\]1+h%>J0bMX:5ja.`3gEnh^tai_l+2Z%>88:k5I_sVl[qI8FFaZgkc@re3$;%4+T_sBb/68\obZ+6Nie>!Zcn#=]Y92c_9\2AR6=2^0o]$L`3['eGngLNS.hlb]^Zd[Y+d/7%?9GN3`H3BF_O4/e;M:([dA(;q\2@*<+\:1H+]-aP;W3GIY_<?.-qSRB+0lte*LZ36RFdT$foX-OUo7-]#O-L"[SFq,2*/^85Y("h%;t,#Y,n`JnUhNZ>7R4t#o``lVQl>&uebEo$Qt=(LoBA00S9-a3`&^;Pdl7o>A)PiS('j,,0bS.T;q,Gic'27.k9oo/N.mO]LNV\H%<K]o_8^,gIb(WSJAZ@2W>Z7Bh)MrC/r^Ubp&rP,S)[Zkg*sPe_GU"raPA@*LcbXEqVK)f".cnXVTk7RMULT\gQ7KC-+P)<."<C@3%8N3CEAF\9mTj:mC4!+GX9OY-9R-#^FP?0Ld;a$Q6ahL8?rqFd8$"fVTNr:`fi)al>g]?BFM;_GhOhSW.2t'_Ye?AF>,,XO5,%nGr%0n,>+TGq5@1(8qFY+[ZW=O_:h*_ICPf'(,5l0&34lAXVJZ;aSlKpRXAFVZWe=)V>m(M]TbJ$5S?S;PhEohe:u;FPj]MK4s6V4)F,%G!DIq[Un8oJ24C,KTWWaTq?p)=":4+?Igl"FOK:>U#PYPP[4Rc!:%.?fthfU'(J71:NibL9\a6dct_'EYM'\W0J%ZU&JH^/L+$em%qGKb-q<Y#YU.c<`?_Ss(4A0=S)AmL>ZoFg!R_sVXY)X<];4Z]P.t0,\e7ET*d)@!KbEsIqS7"rqK#r(=9a:0ta%RNFfAIlN0&>F(%a%^53#+n0.n_oZ;imR?h9[Fl3n>r[JfaR@12+jVH%Qdu.ZUpj*PT(kNnXQNfVK%HCL8Nq9+Jr,-":EnJ@=g6s/*,pdg35g]OM:=a%M+iY#Q/C?&d:c$CgeqE?c/`i%*"rn1`O1h%%(dc@ENl(3gZk]H@h,'K$m-r`\qR?>:iC4$Ei?UEgR-R8'TU7"a103XGX4@lf'"84%K<LdGO<0b+216>aDQmqNZlsuOb[.!"7q2=F[2@9/+:isD->:93=3k,?-:NI-0qniU1jk+^]#'&EOX+;qeE5Arc9i5)#u9JZS05G=%R<:4tejt.*ke_Y&&pJJ@^#TqOBM<LN:`JEA<i4>A<;Jlta0>*LWtRWh1e]^REE7]Ye<+@])^#W%0aWDU_8,4/0`oTJK0mgB"B^Q_%Kk?R=&/n=k-.Rt+m<d1^=G`d*WHq7gj7K=k90PC]H!c3,Q!(Jpa"Zn`0!Z&m0G@G8IilMg+VRNjLgb#1,DD2?L6/^N^4ahi79EU1%^`RSs&W!p;o+a\JH;@5;9+NYa78<'`h(G,$&5V_XW3*h(r+aguee9TQe+9)sma&1TnYU7*"FZ9=-P9mfFH?s<>>gn@bf"4*!j`HV%hbRd[A&n(`\rp04&P0:Ohg5c^3*0Aa/n@ctAfSe11Se%TLd,er:`&+[I0aU-kUWqJh]Oaie!DiE0h4>7/78sJJk^0Y'%7+S9,rO?%b1@A[b5<E$LMk(#GR!<_Mq8_q7&.C2!>+jUOeWN=`d#WgWDO-SccNNt=<[WO:&Va6?DkE,UtM,3R:;V0=;'Ya5n7#0Vhf]`L.,5L%EMkkul,n@%S!1L1,g1=?-l<<qg4'd%N\2d^RAr'Si(6LEFoLU#U&6/mLYgqsah[2WHR$[TI-"*:eS4rc'"srNMX!lm4ZF4kI2CDr%dQo6S,3`iidQ3V:(I>K\VZ?d.lWbWBZKYO(=Kq#::_H"88WDD`2*-AIpPX,c:Q!0tFP`m)COl\/*9sOk&'VW-&FTNe_8TJ?)'(BG%N,YrEcSY^O>[d_G3`U%r9XDmT<>Q_^KK8jlcH'0M#o`jb8f<C[q<GE-BkA39r_7!nCXUljb4E`",fOnYfrO+2Ud',=)A?TN_R^E$%6SBOknXDaPB^,Xpa*^8,:WK+VFMP\a4F\GULQp=gjTfTB9^BT/(A%^0)rs;E=G*T1\\+T*n^GA[V'O%5@Q<?YY@UWOR*-1"KtSl1%FDem'dSJ)b9eh$3_1n!/^"_F,27\R1Yj'P@U(/bdMQbd]#o08u-f<P:;?/s$jbuZtV]%m`79cL2T@`$2fI5im,(niIWlt1[/$gdu%;q'lA64hIbGd:#6o(_K4O/F3X'f').m6HZ[7ThF-/I!N6KI/S"&0RM7iio^U*5Z2>Wd"MEB&i=_n(D_aF[K:@dcVR(('5q#/:]-q%.gNUYJ4NEUA;"QQ4P-#rB5LJ8R*P<Yl38%JPS\WI*AanQ15N]6$sL]5nM#Bqb/F]$7mY`jo%/$o5'.48$:UJE'P^6-;>WqZ#$T1-%4G,NAV,KFT9?Pnac#6)l1tS)tiY`[EgPOkuo''Wu1&LEP6S\TA[7<fuq"a^c"siL+mOJX#:-2JW2c,N>LMK]e.at`o)Wf\=n6f!n%VB)]h"9jeU[t+XS,8,i&[Ga493/aS5!t]t(=ATgmL#!(dlgJMT\9R+JJ+9XOb1%?iS.((5iG[7NVCoAmJ3h`+3Wa<PR5uYCM"!Zi%D9[sg-A*Sp"[E==mqR_Z)kIRMVA<[4!--Qrl6<m>%q0;WI3g[)aJ(S1QIBPT-EJ33k)TQUco!*lJMbfP"G/)qT(&,j73Cn?%+#L8%pJL.CEDPb(\$!Pi7H8P*B&bi6=J+m`oG\Q04b/7o-&*e/b'8eF0\2X8#0+S_Fh-qIK^-Lb5X*I&d4;&_d4<hQj,G5tR8J@L)a,%`%C03MFUH_Of/tr6>SA7$I#7`">Nlb5UWgJs:$rg>gq6`R[2^K\,0/j4g'"pMi$^V\SR/)[Jp/>"P-+^dMF&>\o0,=sSU:X/cps\1e%c(J%\BL\'mM-DIb<jH^P_rW#\\@mnQ\SV^:f-VF=5a:CKm6:^!1%@riV>r?`$dXaBP`qW]:=nP5j#%H+0QgCp8/D+gmuK`FD?\_&%?.tu<M\rq[.(qS$W(2q@hCPMeFp3]d,(,/Ae<$Zs3rIr%!qH41]F_*#jO0nsjt11^dCEbAol4aPoC/-+gFUP]BFZ7s`"l-Cd#3\S%VEeJWLkumP9,6-s\a<*6RgBXMl!/W1g(B<"HIIuBHpOo(VB\D94SHt?AHHC&gj@!Cfqa?VNiD!,(RRU[*"RpC;W<,I3_`gm+E)/E%U?V6kFHNgLM,5p@4+]!l:\&>b3*d'u4V*oq;]ZbWRO0uc*.2XX5dnh3_o:)G*!/JR3940B+lN&R6Aea%K:mlMX@?8J$@E8X81/,H%F@pX2"$9+J$\DX>jRh`)DKD5o.:Imq(Bkc1i]p]YP.`q<LOd<`#f@l6bF!uQe\s$N2GY:;JX".q61hAfAZN'eOoHG/+<uuN>62DI%-5bo2PNcOc)$("UPE9b'5mG&M_R\a-Q>",h9eio?/t+K9Fs2r^"<\p7f[`%+_VF$r`omJ`f`poF78NFraAIp^lj]9l%E$uh[[8eP%`Ba\[9/HuLiuhR==+W],Es[LS8?_K$Nl*MrQ(<iHbsBQnK16lJms3[OoQ+lNR^smS%]7Sg()J89j"6RAqgdJVAP=>IC5hHi?/lp@%8n`rX0'rXLR?gr2<B:MK5Z?3$;9Xtn+Ihs]d%CXGs!N',ThheV!or[rO"$&dd12oZ9p(<Vna-K)VP7@DK1G6+d?nKO1L_gP5V<R&%Kdtfqk>#-OM?Y1df-%&+>jfh'MKVF'UmR%Z#:fA5MKVjf3&)08ig[2rT8Fuqa,6j0FA)d*.o\>hhW!7;.b_l9K45bQ'i3CQ.ba")%EoSVfJ[uFld0MM`R#4@pA+us9(Jbb_ZAQX1p0:sZ.N7p6lUG,Jj&6:#5MdM^ZqH=c.B@.KM9Fm.)S4%8AYG"$]_n'9;pd5/$!NsY%`^^;V-`3W#V(>Ha,#c7:[n,L.)Lu]jLeuJI78BM:\Vd7S%f/"=E1V_7da6WBUJF7hph5W>VkNX+.4_QpU%>]5e'Js2dBl(Hm>;.5%,Roa\(VW"c)VPo:7`7,?c31;464N>Q@&L*"?1IDV9LHF*9B\)>ND2)_VP+U_YW`LjZ5(j83+80pe'K_]/*cb@BR3d3`ABEW]MCm>%89aqf[#9.HRB3*E]iJB*'4jY*L5%lG^+>!Wg;OGfE=Iod3\EuY%8H:m`AP#<E\g56d&u=3TKkk3'<:3eBkRbM]rPl2&T8+bC3,.s%LR*blC$6RnVh"+fP"I*3n[UO#?lVR5'VB:eZ\Mk(_(k"S!Gl`f<AaM=:B7\&ZiRs8iZhJ<[ksHj]YLDTjF(HadrE;6Cs3L]9c$/.%6jC=`7o@eZLESkFAsjWPW[`MaK\jD;XcD=ND\5;<d/S%Qh0(>BOt3djLjt5I"pPN:_!dW1;/cXD#_744M;cp6#^0,J1-#E8DP@):%[[*=gp,P471*`QPQ(8kR7\*YlrGHLjDJkdZ/@.98K_Cko>n"`lGQUF(25CCcHBk0$2'Y?1i."1dDik/V7;\dmDVlc'/:1*6#!kQG%CidOJ)4E]a'=%2(1BN=jkAAq;>mlnpaQh21N'W6V7F[G8]qU*8HF"#7^5_GSD3J8k3b,KAh.M\fag9,G^'rK8fI81\s(F3t@cpuL%QBS49/Lc%Bg9e7KDB3bO)iaPF%PYo0f*jmhmLGre@/9R+M';STBS^qlQrQ9X3_JF'b;JV<]@WJ;:^2mX$E8t//K(I&:3dV$A@^hh%*/BfLEbUU;DU1EGS@>=Jj$Fo0Ji6eJ)g;]T)f69fG_C>mM@6URGeW+7RdTPCeOpq4b@IFf/(E5ValCZEou.T.1p/4M'W&.SbbmSR%ZK4kk4BF\_C,X-DW;*nW=ntuaL-Ag,40A".kA?WXI?\IcA=r4MLN?=uF2'!4GKBa%TW4/&dNbd(H?W:-bn.C%G/q-jW>O3X76;$A%J\\-2%/0.*BuUFI6(pB:UXYfjnHh9YMqUi?Q/IJ^Bim3[*Kee;UPuZ-S_KO#ala-e$=o(T]Ldp-4..IX/16Z.H93n3QZ(?+Shb!?%oo;D7Xpc55U0<GjTKrX]gb<E3%TN9W"s&gbX6g=aD@?Gu6%]Cmn!OS&@TX]_>0<L(SZ5T@(c3M>:_!mP#m$(q)FP@i%>.+u<Yl8T%3bnN0SO(/^.G#LC*?j/5"+uVYH`@;TNVTN*bo24(C-k+=/d;buY\`FIb[3=hqr#d;eR7daT90I8[KD"KGC)=?kCiRc^[l)Q&5,(R%B>-k.)[;9]o0[q:$p#Rk=#r$K]Vc5/Ikk[aJFNjK*V#lT%h'B"2j?gr6V!s"o*5bb'p&@0Td+Z^q1_9.4fmui)ImnQ*]S700!fT9%Tjdj7rQ_*l5L%3A,@[F-.u'[Ul?hO1Toljk%7iLdN/HS_%icKJ7bbF`.#/![*@HP\BZuXC2]Oklm^L0/0l9:1A/lN7\ALuM*B!*<%cCs9_pEt`.7_'HJ/Mp@73H/[0cpfC<`YtY%_kH$/RbH&\U!rDf^nKGfHGcF27JX`lOhJ!r"+u>R?u7h2)U+us(c3jrrkP1hJ@;j)%#*"K.rkP1<\VoqFim8bj9^cj;+-b@dQ3dTH/61=k0NNRU!j=6?P<a6-m0eh4ksG<4R#n$L&tr]pDmI8L%+go7&>^:`>C>K>Yl.7U%9$VIq0EA%>7bLSU,*eM$"dhYs(XHFCFaq)@I<ts1]E%I_%7=7%B:54r.1og7?nW$fo8**o`DT^PPGobI)ZXT`6E;l8PVf$*b6B-A%[d9nlF-:PI!Pi@F"*nKCKg3#"^$Jk:)aF51atAWb%Ch`7%#CYqP+[nuZZ/@6X3V:a)^B[^0b=*YEE/T=J`6@k&*/#.B#@qMVZ,Bi%_[$VXLU2,1`V\pr]<TLr(o2btN<rW%D%1gh\Q7FGD4q1iApDfc(L]3aOQSQgoOR2ffaU=:A1lg`,cIkS9t?'s+`!Jn[Oq*f#'J8G%k6AGco][^pIS"\Q-*Lod0O\2p@"Q7t-D-[`@O;Y&WgmpajY1L7/S!(.dhrNtXDX7+M]<.F['5q[m)Ju8hTQ&s[77MFEZE^7e2>n)%@fkB_"@/>TIa-))S,fLjP[AX(J?g78*<*s\T>q;9KtWEKbR;$G%/O'j^Uio^df#LC8VM+A/ZX;rJRZ[P:1`[0NF^GP*:SWQ+4eY0%nE"*(haTh?Nb8H8,t9hb:KQn1C>R!.Q0Ds^1q`Ur@=/%C8%PnkS!u2shG<S8iW>m/i9\V08b\GT^+#s()rfBX)3p>uAZ('d$1@'M%SsJgord!i%[L;e[Yg&MuIXKo;5N2%j;`dl8oG(bY8PLXV=<7[#5?5@/24anp1u`Q_%!/\C'W]a"1oL.o'pG,_P\j_\h[JOn(T&0I%=UO$&pbXLV@7OF"`B4<AfS).FIQEHA$F(Y(nd@i.`$LDH^k;?<j%dG%L4P2O/gE_5GBgOtb@\Nt"[LYE\X<Ko&`Y`q/"/bc,hpk&%?p[S:mn(O<"&ljTQrq^dFe?]u*YpO.":,6'W!3o8U6:4<HBmCM;tr\u"5Z61^sK-1I;g/nYHofjL1-K3/2sdK>s5Lkq41&.JL4*t%3g!A2.^M';?kK-]cKne%!r5e+K:oo(3"EA>V0G*t8jNs]fFF*HYSO>\-CL5cY!qd2g@;CZ)()$UYd>9`dIVnj1:00K*%5C=#"<B?%-fo2>9EO%]1'r6lng+!^461p6?YhMP[LZ'%;t,QJ[S>u@NSDCt?+UkcmI%NFM[.JF^1S2'=(CcB2@4tXjXqT0'TDn23(lnqe:A\U%5&cAn.X9McP=#J*VU<l$mj>KfqC$XkXce/r+eI"E6TjhpNF,#ZJ%T-qcelkLha],Fj@(cm*HRkM5sP8%%r@a!=nW7cb^P8.'$fXA%("e#e@j;*0lPh.rYX9B%iQ1!)7RQ\5,=<R"<o5HRL)nuued'bHHQ,fG]5ZuY_KPo4b+<%^<\Q^R<B3]=cUOpT;!3PG_:)/Ib>!,3%!g!9;o9V8r0B=d9r)/[:>L&cmk"b[AaQIVij@dhK'DZ6E44r,X&"cWDP&o#9=*TsW\ZbA]9/Bn@1bQ/>A5\KY47!V88C7M?lP)gP%Lu]s(EC2M*U7k*50^u*l=jt;OVFp8(UMd`9;$/Z02rsYj*^`ZTT)D^3N(>:BeH<&L?QU%oh>FWGF"FZ[3SrLNH1MOF9E+-o</GPh%C%)&b6GYue^JUp$NsjR%2:D8,-Pk979]Gd\%-q^*ke;?i_H3(K0/<FfS^K_ZZT!jmH+R=op($sfbeZq_EM(h+2.Ua+Ke.,RYf1Gq%2H\t=I;mH]LW+3#0PF!Gihnf]/;[GVhtgCN65IUIfODB!)^AOocV`TFc,F`WSpU"_Ms&sdgb4h/EEt62*TYt+/bsQ491fr;+boZE%i#Ss@`*5@a+Y^s7,8P;,;nUA"<_7EI,mU`6[fbC(gJu\_e5c/Cf`!5S=t_i!G)^$54@a`[,8[8k3:4\!02DBcl#u*oGM"P(:@9oL%eB+C"13r8=(9cOKAVdDX_)#./(:UupG2[V1S0I7"I7FLV?.`\t$QA&.Q-V2BcHO7I091C!gl(4LRHOL"J@gcNB[b3B+p8.-n-p;g%-Xr2=!sWqQm$$aX59`\l!5%K'Km2RT,Na^U4Kch:f3Ed*$Nk\1\iR'^PO?3`EYtL+QS^bNmUNu7kd80/G$pqUr8rppY_+s+%WOuu%&[)]MK=_gf<>3ePSX%NX^[(kR-H2Suk^e>i,7]bEE)",P=`)"(*hrkPSL0hh],r;V7"^Ih"p%DO#)oCoLDSeJ.17.O5m1Ld*+);L%@^!Z$,o4GbesI\(9LZ1lMU8ID=Y;E;dX;LQ=Wr[:e\J]CN>WM[*^tL`a$pm_0'j7RBOO970UT`biJ\'*^?#HM(bQ69[t=rcS,!&m%g-#U0,O^X]lTO6.]G5heHO*+<ET]/F1q]6)m8o<8qc,5\1SF)a66+]4RtMN.('OX^LS4V"7-<B9*/GP!KVQ\@a!'q]nb'\52K7\K%d(rp#PuH$hh5:?73$K=hl$'f8k'_I1Ij=be0)$)+pY/E&G-SW>Ap*RQNVrI4r*4H-#=L!h))@Z%V(eIV%g]>Bs/rJS_*q)FErUbq%p^/7PV@mH/I#QASS]5&F'[mBm2hJZh720_a/"N>pSig4JeC84f`Og=&hH:Bu-fDW+'\'Bi.WMR)Kd*(?+e_@dV@n!0*)PkY+8B-l%36JeJ^XB0g?bL<M_b"auTO\M/"tQ<N&ln21`0',2Gn6QcVd3iSLaCO"%0q;W-7j@#d&I7SUlV>V%$t)t`988$aGc5)OF"6&a?^eL%NPc%,[mU\mlBRQC2G<^$`UH#RRIi)u:-lB]**G:7:G_r#'2g>T0q$Pm&_8Q0::.nhb4<aS@7ob:JkX-mG;*/`f>@gP[KqN^(cN"m%M&MRH!)(NgZp?D%;Ou\JiJO,S9QE%=L<V(%/YODTR,#/'!F9GlqgA2`:"j`+r>H;0h@\3_TmuI_Q$S$+"tCp#aOlYg-jB*D#?t@c%^Rfg4q/P>89PK6cU7VsDW50Nr.%Db=6L!PaD!qu&YGVsW.j6YT=h4cG1.[J5k[Qf(8!gOoR'P3^@d"-.fq[a4jjZ[<:EF3g2,fNm%"HN7QCa+.rEs7D_c!XH1rMiAL$Ts%RP)=O39%;4ZHJh39<!o+?lF#Q[X$JV_XAD9ZLR]O6B9T57!2ZJ*-rT\ndi&78*5Y6_b@<.p%pHNnP8ih]4_Z_Q)``q4T>k!45`28-e6SFi)6,CO=N-/3@h)4\g2r-+$13H0>Il=^'+mSa)+Qt[1+X6d<jumqcKDtTdq,I5gS79:$%mJ'0k)oe$s)8Y1H1qZ"`M.1C3?F+dTaO0h[f(b&uE_0,LZ^M(qM#9RUAHmHgfG9`ooEpJC+Yt8_,pIo?B;c<*Rp\4ATBLg;McUqd%1I_'Q_r/UKaTRC'#0:fNRnuTW0uc)B_B3j!E':+Tf]cFANhRd$?0!\.:<X],jKo;lpG9P,;Bi&;E[mZ[Pt9&c$JAYqb$jlP%44up%(_I/B9i27$it13IP_(8QCqG'027RJU7B$`"U=9<!;<g@rn^]!^?1QK`9qHZ4]RXq642S\4oFX;<q<?F17^+0RG/1tC4buLb\`r-O%F:u#!&Z0UK%M+_JL.jq0ML0nKV3>/08!\c0ZHLE#QFm"M;?o9]JCX)Z"H/g>/ZO.J5q4FO^_7U$p*^&4"rXH<LJ`\U'g6gmJj7Xc%<&G]?JX#N2ZTu)5ee"gGLSmW6.``]b@iURfMO_>]=OG=uh%Tl6)oX3C+06UFJfUG:6,ohtW%f)\*@GUd9tt171hO>h6$iNCITJCZ%6UB9Dm9KDB%c.\n3Zd>#gDaYHWn'G"0hkYJ&RR#gU_Xi#ZAMoGZsX<u;B7H6QPPPVLfk>iPsP`H7T('<W$d="5cedV33+mInQ%Jn%DdYlp8O?:d;)D/NTq!\dM8r`"BFP0#k#=B=>nuDU2Zfk/_+M7Ojbf<Qai7;e$OBMr#EfL0bZI5+F&sLG#r9.*da2c#$5%-:7?cO5%'\o(IU;REJJVsi&\d45^#8@AqoZPQa[#aYgU0Q*t9ER^.h3JP^L1W\lF)l$H24'5QIAPo,.oQ"]?/;OVli_q(Vr]br,I!VQ10T^(%c-*p@SrcF.7ckDOX^p&1g4C&@[:E(TT^JAZfk\$D'>ZJm+.Q_[e'(#k?FXZW0e%d6@mBDVf'>!P+h?VpOgdhkjCf=Q:kW[6`JTCR%B#MU8Krt9@(J:A>L8r-[<b?c`c_/%C2=fu>lmPW@L4ib`VS-b9Hf]!%Fq#<W1bebfHM.ruCJ=SZ")$uc2dU_[iFY[1!kEI7"N8W!%\=4R>:3Tr/9ZpO90O'0\j`)qC0OtXj$b'fh\3g&%O>f]>$[OH(n6KUt%^dlZ)qC)ZA%^^41?]<Z4Z$o8hTn^Tk'-^,XL?lGJpqDD%T"=$0G6l7aq$'NK-Vdrk*'$`.<(hDf8q%q`,`a7Lj&[.`IB.+<fVFfQ?tL19]rjA\X3#5$=3p#QX8es#]4(!gEO-YdLQQK<o*s7^%DAH&XBNGR6WN5J=hPifLL:NVfG85\Pqk:G=6DI_)@1H-`pW=$[S8T=H;1iu`8*@>Lee"pkgQ?OS;ki!EJ&;K(G32o^B:'j0HTeM7%6VHTep^W_ig7b[+9[_fAV:D]F6.&npMt0ri`b1&=Bk;L@Holr2=0WmJ5[%h?;16.ZQ/E5uZlaGpNf\FjG<3#F*HkP?!bTAQ\#OUb%m%"SBEo6/N/$YPu<c%GFI^f/<._?Y^LJ8oXleHLW*AH;'=F,2DCQ[#H%m/5'aDu1Bn%=CifPB4bgO9B$2p>=UfN)4OC\qt>gV-lZ%YhEtbqE\'$93Geql"ZX"S6$^g#1-l45X;LHOlI!-^nSho=+i#eF@\T;9@q4k#W**4eAWRS>VnlXp*sPsf9e!$OV"PHG6p8N@Uo$8%CUES7dn%d8W)j!0=ZsGSdELQo`mq4MB?<kV9;nNs9=B5#Xm=4t5d/BP/[WUF>Y16q0Mq"i80&,UY.=4OR?ts'H1(0dNGcg+b=#\*%]af.[ejI`lg4gD0op1rK#P3C]Fi`TGI0L5q3/m^7ad^?WVjYmCm?O`&5f(uk!Tr6#f;cl+e(,;*2HOak*FZ/s'=-26ZckAhnBC)G%:ml'-7`$X57cXm#)]4\rOO6NSVdiAQ>+t::<XdUC47G\T4CiM=D--nL)KqQ7K%'#-O`h<5Zdue<(bV,?'lQnm,bU9*E=aZ9g3Q8N%6'S=6T^#uPW7Q#'f6Ef_g*%GK^/48<p@TlPQ?Zb,*5!o+oi;s2fNf:mJP3'Q<G(KMHD!b\,NYXt)4l_+)bkhsH0K2=8?jk]%=Sk3%j]?J*DM._(,ssd.hpU.&HM85[3]C*)eeQ70WMd[<q`>^Ak(?AV,!7RCTo]I#CqQ8WGd,lgh!38`<'HtS^?=q,rg>-7B1a7XRLDLV%B*kT-5aE(]8t-d-b:CgGOqoVTL''LGbXp*G)4e@'J)Up6R>(4/Fh,tY]_kK=7<Hp>H5%GYQ<WCg-U_3h*Gr+LBkc:1>7u0b[$uEJ%?<]e2H-CVFRdW`:E]90PFo!,.YM[HgIcn>mn"a;h^S<kV0"s>&H6?nB9,@qeS7*Z7_6gd&X8B9PQ)/Hn(:rB%Z#bOMT;P0]c"rg@%1+D1.@Fd8a3nl@_FagoA!;Y*"ec)^RX)cu?*A&Hn@_E,WmQL:7i5#H)8J?/:V,Qa0K3/$TLS(`K-Tp6X/_4)j#%r=XM<Ao)MOnO]%I,XUVpn)flD6,3Cc\'6#`+"&&9nK9PSQ#-@pDn[k*AYQ)@2coU!;WtYI4o3RYWAk(fj&I!OAYG"m`UQOhr,[Q'iXq#nIkY5qF=j-%a^>#SM7D4m<r):oY><-]C`++q+VhUo7<.O*r3mC(n)rZBh&t\9d">a60_jJ_%)jeCOX]2>#J5cK$QDjf!^JYs"IF?5puJ)e9+1>'%O+uL81a0u5S3/%iA.ber'"A3K;@^PQ;Z0R'l66?sg=@+:b[Mdu*mOo7NcZ)F*9)ZU'ISdP5RMR+,0M3o^7Zh6qtpaqnUY:,J3&sl%R\[L!;]^'*:`s:!p7("J1Sd:W+W)2_GQJOR/=hH@@gO&:3>Ir$OlDI&0!HCD$,I$^Aqsf$B9=!XK#F@VNo`B_O8'tS"VC:AGaLtX%@os-bJ7M?hN7W^'#%N1*0k^E%?.:(]mrZMemR,4oCSZMIe[R:U'I&>u9*.L,_TXJ$0'LMHE/?WX&IXOHCeX]L'T5^f)DVR3W%tgr%&4b]D\a):'*iCI*-$nUY`)7a]Cd^LGA_Kp9PE.7.RWfL7+u)*F_$C]9-4td@>^=UA:qP=MWX\cZ3*R*BT^ouh"^=?+<EmWuBt4?s%7ucBUi8I4[H,,j<%&66pLVRS3GVc&Q&"":'6R=#,K]WnA#!mSAIh.F!.o7E&>#>'GdR.ZqjlEt(PnZ<HjEBLdUqcp7&WIc:XT%=T%R"T"D/cSTFs7[THWZMYc1P;GVM2lsJT22\X%?i538?I)jM3K6*;PBt6@%d'#obGEF:r85H91EU'KbT/_TJBF!L)"qc@%'RPUM'=L%rP<'B&%:9)A>W"3qT[,U?iNY>f3JMRc9+fNZH[fpI+0%cetA?5m>PtJ4Mt2sQ'ejJ3Rq9<NXWViBDi_R_#i"Z/!Pd]]Tj^a6_GGN%'Ohh)5NG<1\>j!ZANA7@MZ_A]VhcRGqhh9:-6?nr$X)jKD"MJnZuu=bLf=/;s+Hc,Eia<N=[[mE(5=OHPn'L9mqG;#YtqGD`LpP(%XequA8R$Or]^h@/@SPTYKi.Ks<msCDYto30C=Y4gIQP9Q%d?46*7I,j-f[Kq*>5Jud-@X(?.0HEH4toh!]l)P2paA7#ZJ_s(3n^K%VJrD?4"qYM&2QLe:f>j3Wglr'EOLl[%,c9olG-`O])N4odnV1`n(;UUj*]4J.]7b82UfEQ,c>"sAssT_^ZOVUncF<AB%%h>3:@<r%-Z%MmY`f6^nX[E)09SC9E_1^60Db(8:VShpFSTj&m1&!/k!?`#Vj&cO9(iK"A'c1mAJRCZ7_s<7)FW0Sn6fAU-#^UU@XMr@0%P'J%QLBC4'SHan8)@_-J[s^<Oq(HlkQs(=?JOZ%/f/a-iOMU:[P8f5MdZkYd[ieWld@>1!mQlEGIb6,`Edq7mK+>.(QS6aJaM6H(?[La%=[c,Z=n:Q)(O*F"b7Dp)P!1iG\;Oc#mLiqIEju=E6*oXk>qYPcEL.c=]?#FRrHL+:fR^YFUjk@/K?g,mo&;8<GIb6,&'nNBgmW+u%7YVqn$Tuc3nJZKNc&rle\[]i%?%-n`!ZT!YN]3_amG+N_]Ke#0.li5oac!c9gu[NJ5<O-UU^WTNgr6K"GDWO9NX&U*!mQlEGIb6,%`Edq;mK3*ENn1cD4)gPa<"K=`B-eqP/9u6%Mn<6LjbN"OLgO8&DFT@$\4_2>Li^&3OqVMp]XZ/(>qYR9UN76]7@*61NN81m0*`$h%[G0XeFH4V_(Q5h+bf+$D(A"BZN8>]rA2nUn'BiYK)(u280pmm8I.%JUO-=8aWP";"_QUNq7!N9VgCaR?I(I\R*o])rXGHh*#<!55%,,dtcdnrJ3m"HUT1EpI[g9LJg/,Zq>,P$"D)?Rf(5lsAd#u[/l)rVuYThg?/k8>.t_;.5FY)nSNI[6ZM`9'D7;f)qC]eEsu6jGpC%(uha0W*Lf?,F_+i=[tD,ZUP?+Feu"QU_s:3ZsdGg5+PBm-]K\4&oq\1OE?7b.&([ghADQcV%EBod,#saq%6ZXGF?sMq,V$uD+!Gj%(M%AsqckB>1':se\\<Vk:IVq_Z;3BA+X1+fRd>lIP<H-uZ6qOX)lHe$9Ql_a]6@$DEF.KsQ1LS@3T%DB&@9+qdN(Z;+`,<a%EjP7%&_'$)5G=5rBU!m)WU8O)3g/1i\,>gsL<aqFH0MKLrAr`KUViX%>C61_gI%1LN1c7oNu?Tq:_4c_;)ln+S]fg>GB'%/b?S<7#NmiJ%UWc\N)jcuF`_ecA2oTiSj"biO?!QOO1)H;QdCBYu)s-+.Bjs.o6(msnB]h+Z[9YoWi\;71q6>4h2sT@RMbaeM$Q4U=6"`FN=F.!D%6AN!XjXD>jG&U-=!RV2+TlLkNC$q'BDBQ-qIPKgNJ3Hj!;jl9\?qXj;FYCNkn@IkKXIh-nID5jOIM>.[Y)E/2i.tIah6/DLECT&K%htefZp%+A+DV,c)],,+kYO)\=qa'!EVN(DRq7+AP976UG1F[a>$Rm7[JnJohi-^@mgWEo!hK^@qSNhRk3LOC]+mE#U"*Q?/h2?Kd%6K%I7^idrR`d?`Q;)I+3asSb9UfSWd/m\t]@_`c^rgR<20],F(*T%e`[W@[l,XV/DgU2.4oj(b491sJKR3/!C1usb0H#F\Tc;B[N%)s1^EfZn&Glas[N`FUYSo4)hZ\Mudl>2mh=(:H10mY!<e6]7Slf66\OMoT'bk""ShOTt)4LJ_Sp-:l!Vl8c:oQt'D<J%>?t`F"(1%rj&'+mbPO)5(@N"9gk?opS<Uu`dsg>67G^`_Z4+s00@h7;q<oj>ObX2(&oL>oPM2,kbX-#V:l9KVLk=@$Z"1hh!Lh/:SgI?`nOFR%.=;Oe4J`tN#/*3RNe[XLEVlo\S^AZrEQ%6!`[Xf6.M^XJ!Vtf=&Qu"&.FP%Bp@9I2a*7O)Qc<(t;b4;YL>(`Zi$8ZMFqNS.1?PLQ%2bnl/M\^&U.]p%2n<@u\8R^uqG-MW.[rX/QM<XJ8_;n_*4LnYJJqK>X+O](NMBXK1G#prdTl>pl5KS"oq$t^aC]S7a6OAET[Y_(f%$C!r]EZZ#IeOkQomCVA!="&$6"bNd08kR-P@%6u6H#ubAj<?$A(0Q+Scra,/S7%1L?.M^s(F2\#b3@$a7rMV[!F\Q2M96#k&]V.%%P+T#kYTVA`g0%F>IZY<E$=OHAVM*k&32%lk6)]kZ!&a5IB_1q#L)3:#74(4(d4Qe=5fkK?;HG7o+'GmA!E+N"]s.a?2\7Go$,mWG%WJ@9GcWUr`$kqrf-dY*"GQ#Y8MOkLbRG`a?FI1n,"=EA3oQ#`Oe`JsSKN-d5kd!T%[Xs@O+FKPFl]W<Q8Y@K<MYg1#r@'TUR5AH7%XJnlWoXrqeNS%V6nU;^tWcR71R3#`jU<#_`3aWaIFTZF0kmarkjGTtdn'D.0AbN*?&4fY*o\L)8jejT!;d'tdXe0F"B-mQjNVnKF%q@3D4&Gg<urgu2>_5L;`W'9V_l+e_Dj2p(sc$oY6+lu4;;^r-sYr>?g0)<LMK4P2(UgqE`4\6olT8A43pJ".Spmbtg+dPHpPSJ"+%(g]HI-YiIO0]h9rq6"\u'O9./9)e9>L%68986BYI8L@W>J5<g[98AK9DP*M(c!@<AA.VQ>]4FjDfo1ObM&0+X)l,T#W7BdQk;#+-%.-5Kh[%I@3R'sHfH6+ABnEaA_j?K_>VL0?IJ96rPS437E*)kN/`MTV:)EHGZYWX*:Y3[^\P#lNtOVXB:2$m.j468=/U;RNj,q8FC%%"*3em1>H.G8$D(N,LqqRr:M1q2u!eX=`ST,F,UR4lMIXnhV`>PnfM?aOW"A\G54h=J+Xu;olq9$d)piQS^caWpPbtU2CbjCSqgr%]W/E_D&"9%ZH90U92cmo>Lf8f?W#I;4XAqV4)$N5#Z2Js))IM*'=bobq3$R[WTnYh*Lsd!4YD!#<Cjfu+q@D!W[pm?m=7I46L!=n%+<]>U6\n'c'=mE(h/\dHFIAX'_nl/$(4=VO$1iuf%9J#g_GGqG*I$68%K^QBj(K#BOt95fP=-L(+1,^W.i^V7g;q9*>XPS==#C,i%,D.!.n2Dm(X6l0ZA`Z^.bdWh^Uk._'9*<Lm";MTI)BOs(.R]RE:P]f4J%1Q\kYmBNs,3sKKD7+\'6p*M?dP6/YQC$gDgp>UV*r&U%G[kH.>KQG-^gT;j\V$[bl(`0)82paW>U%/qNJ+`-fMdJo`J2K[8jZmMiVY7TJZ[<##qa98S,)2'YSUc^k&r/BObtV<,_P\I:sGND%*JAe_Q0bmn:jdZG)E$T$T994a8qbVjgV4.n,.XL:Ps_G8aI81kH0fS<X]6%1_M2@,/V6:7LZL9&[mSgc4rjtHS7dtBK`KQ,Iu[@.%K`]p.KO+%Qfi[B`)L83%R7*EWSLiFPWeMTZ4&D<.s#A)h&1)`aq#TL8%?meN@A>t_NCT:7lo5M2"4Fo"mB.6_i<iT+m*Ds[iJEk#%MmIEV3#8R^0./?!>%V23=>@9Y((nLT7jt[<+bA213M;am<B'p(]5u1bjNuZ<$X&C8c)n<5@Go>HIEu4pHM2A[j1BGr;)ffK<r^Dp%,JPAB<'V;K\+GrP*qI`Hri1:cY6m#g24.XM.:Es1@>(mi@"KffEQX*a;gmd_'62#mhDBV1#&Q],7`rSRp?rcDT=%C,[efj)K-H(;%\664j=nBA@>+La)l*P[#]5:rN[em<N"eK)L]ZN[XA\ESFIHF/H.tfpr]Op@s0flibpDZXUppetZU)7isP5B/q:tRV=$aA;)ht?1>%M):[oem"f,5uD;KH2klq(UDd*@DFH9ML))Me5fWa%K\SX=<3M[(,G(0@H@A=]OYg\'>_(H?-+i!!H$;mMTSO<(aErn<6B<*mmq"X%YBoPSQ(qq5ebFJ"Hn2QNBWHMSjOT#>h=iG"HED*$Hab$VV;';QCb+-X-q.%%:8C_BJ8:b+ZU)+1"@uMkk.?pbgFM"j[](PX.".F.%IG??:V%DnSd&976%t!L%G<9<=g?qH,qD#h!A2j(/T)[hV,-//'[*X/Ygj]]*+u+C>GqNV&PX[_.Pt:JJp^I9birPsP_fnq3VLGI\%6.W%O?!ur#MiQME;L@ng<XjA'fR()U[g$HPh2N/u$A'j([:3nY2K3cL6H5hr\q\dI1\TQPOK3ZunaKh2C:1Lf'J*peJfV3nYM/-c%<i^!C[bd#4%Kk26m`0X'5OH=.&iOK_501hIeW%UL*4fkC'`8Pj0).osA/2CK.:="^0<&%_>fHh_Cf">bIdjj!7GJJ%pp,IbnE-OO%>t=E`E%Coo(Q=56JlaL)Hm72?hUD/SJ'$C$T:?A4Tqs)k"Rc%>"`bqu9TCdj4lL6GV.46IP.HC)W0[>jF/$CYh(Y`5DL?+456W_&%F>9\O3F0kNQrC/Dmu6F'O7t!AkFk.H/"jK,pW.J]+;LO(;tda#m2RTG]Lq(#W!Rc4)YU,_I7Ea*nCosfYA+blE@;u2O#%nc*9uN[%h]7KhPmpn-Ve1]!=$Ei:HTZ"gT9JU!eA1h\dfINR9r&KY5f&gCSq#K!^?f70co)N,V9cAGpq:JMT(V%TSFB+jUU\(Kd`%Kc40CD#%!^&Scid8IM-PJW3R#]p-km)ZXJo-2p*qRW=`^c/'gM\@_gVm\U-M')gVSgauescr2>?e37--uc*8tbQ0[>LT.X8%%,5^;GYQQaHM%U=[Ws4.M5T>^Y[\j"hd@@P#<.[:^t`Men.!q4?`&ahRn$Jp:'AYT0SCAf.123hj1WPT1)l%cCW`)LUr@XQD9R%XBtA^uQSUTooZA%[p#E+-lcLm[d;2tZ1Hf5>9p[?9.JS)MB!Oo:SE,o&4sHb[,=l3nehbV-M/cV.nh/aiB(Jp1sXlk>L:sd!G(AD"Fh6h+I@"9g7Aot%Ps&HQ]gkr!U?Hqi`*9\-q`>qm2a(a8qr,/Cf4-=7@1WJg_Lu3f,kA'Eo6XTC'h;'No+rrs+@h3MrLALN'))A\=-$08em-4:b2q&a%QniV`#:.4.%Mo*AB0)N1e[,A.hWr&hAej*&<Lf0)p(do*qQN#h5$NH-Fkr&I6[Z#s>@@a_*p7DCFi<cZUMn12H*GK7ok*b+h)^8-%GB`@l16U)ucaq]?bVlrp>CE!uD>bQah2h.8r1;9s$7F3\ln$Lq#EEnCV^&Q!lZ/L8FH>QtgLk^DIF?BhiQSmaTLY4Cgru@lcW9LI%ATspI(toVE1Gu\2m'F0P3oh4<7D-s3Y<gl[iAc6>&#"@#2LTd"EAE]`&[/e.]W=$#q-/8OhlZn(g?uuV-+$,,WoMl.84NbL3V)Mo%1%Gis&i`Pn,"U44q!N$_:V(d3PZcTVn8*08R+\nCg$JU7l?7Os6W7sUXT!D"(2,L*@FTMZ6gt)"XrO>LSik@Umbcj%_;-M77QP<f%ZS>\=-Z/QlICFMdCV(PEQV\@DDUL:]T9g#:dId&Fk`iZu.p'DT5HfKAi4ql.X)222k4kaEBB*-;bu(Z&\(Oo4>MlR^ce@g,q&sk!%W5*\BUGTL(!]aiqM@t3s^k4]H_u.dWNMNW0GB[hB16U)ucaq]?bVn)ND1*A]hLDTnA=Q7t,&6p\(:AapT^+;M[m4G93(^P%ePqpf%iJfbG1.bc)_#RQ]Y`"XI'^VADp$c,"e&pV"O?g5"V&^g]"c)kKM:T[)\A-4rLe>]LBMp\ZWkH?m0Au"V]=UIONkR(_P+Sj\aK03m%R*8#1+Su@RoZ[R?.,9apR%Ib(,o;gD*>Gm*]>ZgeeXOq)CK9q;j_/]$!+-dB,i4kDZ2<Xac>Q<Wn%WL8[JMWm;U`D^QNl^&+FS/H%UeUdD\BMP4Cg?-%o(-mF"a`81oAVMAQasWMO3;+SV/50Hl[$25R/;g2bPbH=jhAHe^Kg]ui\*MKIp!TZNPd;aa2VQUocc&%lC"!F%3\N+,ELDa.r30F\C:Ma5ne7kJbJT0_lN"Zn"^T$j*o3oGpJ7q8[1@B6\MIdF%RNf;XnpV@6Dfnb!U1.2&34ZU.sZc?.8EYr\:445%EJ23&[KTg7Wdl1!<*m2g(>oPg&$6b'U8rLu]57tO[em<r8W&O_7\qFV3VN":0L.)KC>nJGF\._NqNuih2X$F*J4&9AG(#^N?qc?u%(1`D>5%"I)=A99fa/q6fM1`4OC=EfCK$^[FO(S,f9m=M)d3l<c[;Rcuot,h^P2nZj_RjblMQ#KVO%Y%['7>F:hZYEke"O2R=fY_J%J-`*<o&F$qi]r3BB[n4O]@"7dh&=24m;B"q!X+*Qa/!PZ2K3aV@J$9e#:`*"L]cTb2>2Lo9Fs75mPD)?D$Cb8q`HAJ"5DO7'<q.H%I^_d#._?cO-fEf5@8NkWP3K]7pI&"=Mu:I8FTZtN@/6dgY)I*14p=I@pI<MraXlh+QC^8qC/mW7btEAoUo3ZUH6U+>Hrc!ZF`iD,%Aqqe)Glp8o5R<7'GW.?Z)p&BpL75-`:UM7:NX/.k/=[,RJeXfZ]t4le2K0B1F9"fe_J4u^C%':E5i.Hko8=4V7$;S/L8!@HRiIaQ%c(t*s%.7nOdglfag>)<BIQd<h,bPu-%ekYsmV<U64Uga/kjH,@oXDg%rq,^WPnW6@P(o'89QpJ0dt46kT+><@d>Z(t#gU`11G2u8%N7U$KI\^^ZLXk]0>=</d7-heT#36BeeJF9SDIJ0h*rr/Pp[;Du+S&Gi#"8T;cFpt!i`EP9URd)Bf[c:@Z-Q"D%ihYoePahLckIsc%1T71<dIC&Sn.W6%=]:(Xj('oPLOo7ZQ@SHU9L+V_bdkb'e:+l/r<<>g[>jj01s;63((G:oqW0%>[<4J3e64[_mNLtR,=M8.,gpY?%U'lnc*Q&'u>Do8o*Od^[6sRfQh%Y2r)_0q8huA=,iSW&&<%\H%>=-PfgrD41`qOU]i*+#uq@(8>-mf1-e<N2;(qs&Z#C@@Q"\$4$%#-Qs`@)Pn`D`VtIc684)JUNX87`3KH+M5WfM&f!sn2)+KP7R=\E)'Du<MYKI)759=h)PX7#*;-[?&'u#Ie]6]0I-T#TN[dM/O4VJ%*Wu\F8%gN19a]e6\ooSIm^q2K#5&JIe4uthXc'/-Pd,(&<61qK5Pj&ET*pl_Nrc2sf0CH#PirQSqqW%!5C<]'ZXb(*#WW2^Uqt0@%(d&M*\(=!c;$M6DiMj:G3[]%MWMLOZK1acb)i+VC[;`FJCc;\na>SPQ6Ki8[B'b26gocX^@N.5Hbdp&97$jo#e&c:1,5N9LT2ODd%S[bVmn,?Tbb0s0iDM3'&f%lM;R.K=429N^fKUD:]&<r#A-oo<"4G#<\U>MqeHH+?2[3NYM%T=[O7<A,(FS;7F;$M<!bh"R[,<7D$%pD@\R5reF79Sn(a+;(6JEuV$IE8+d,.oQ.%qA^:dWtp[JA8l9h.pCA4g*.:_.f7)MG!stuY&a2Y[#2*F'lq.%iG]LDOrB^S8srZG%7S:AK(+mTBFG,<q<@bXG=/25-pLM<PKbg'SNSP)X*5eH5*2BcGg!WJ_Z.MA.kn8]lbq<jp:2Y:Gpg'1W.YF(3h7J;"8=N@dr`Q^Y%c,P`@#f@n;PruPqpHjJ/auHpRrU;6h7(X%g/'"i@C0$NP80Y4FER7FcE_^nE8!*C]:']1>Lbof9Lg;#2!!D;T=IX4U(1`ebZ5]sd%E=0ak%t#H][g'&5-,jUf)^>"YC4k*)eOXssE31+Y#kR8Kd9<Zp5)ULq>->\6erl!kC+8Q?aKlJJon9`f0#!CB7P,*.C'Ri-:Slqg%jpOO-fq?>"Eio$e^BneSOclF22o0X*XjUjLLUucJ5A/V"]8c7f]0?R`<%(2)q34",$6'huAQ6Vj9,tUQlN;f]6O**N:se"Pc@ir;%M:D$An&C4&6OGPKIGE.#F&iRW+21+2Kg$sg9?,]l;tI4j9umAiPrqitA:=u)Lbp1+%<a-B$W%_d%T>KhY%SKJUc,Yi[qD-`B"FuV%b.\=&dp,d8M(mURRfi%dK63-d0CeO;etYfPX7j3b>afN@Ci:f.UsZTCX"]hH!sn_mA4`\,hiJ2IqjZ,BT^Ys+(BA2Y&-/!^qjJC5%Y?X9HI^_n9Xt'[cgA<j"Q%(Wf5dEaU(/gc[G^AZS+r<4(2O5R9PGAj/_DlOm9rV_FeC/"&[mrBqCh1!%+h4f4\K;S]&RB5sPJ^I;%f"`Y+Gs%MNfAg/2,8s](LS3I12c/tHaHG2qqXFV;8EiL+*uA$=T"&78Na?,h7PZ+"^u?Z:j:-Csl\`/G[-k+:\6)e4EqHg:-Fe<E%Ch?!>n6uWZ?!j!YChsZr^@D`RgYk?!Y?aL8/#_(O_p%ZIH9[aSb1BJ@obGTi;VQ,ig?i]=B3\f+4fo.Pdd([939N!ZD*1Y&>&Es*%qT=1aP=>*>H@X$.o`4:M'b0Z7B3nq"T<\3G*1(MK?gibb]_rqN55F[Ink`(ZY&:D_J,^,NUm]Ddg#P<5OjX+jj&b!>QOQ<Z5F-cO%$D2pNoK+qK$1V365XG;M4FY+l78BdS2gi;fI<TGbGK#_/APBUSQ[319'DiL^;\8II]G3?f@S@SJ\eroj^mIkj$)+Qn8X%N3U/F/r%emg?Ppp,Ipa9oP]Q`^$3\.sM^PBhHE#g7HI*YAln135#`j1-#QGK>%$NVmGLB%3sq$Uf_8d\5Yph`3r*%mc1YT2K,f1V#.rI9nUa%8:ajV]G7A6`[=;u>2YX[WnAM1m[<P"8J>;Ip9J+\Y6Mg*91nJfJm7L:;8$Y-N0[qg-+2>G.`B-ZR*CNiZpWV\B,YdTIlUT?N\d#I%a5Cg;&9<C0T*EA5r@rSO!]4bE;Q_6e[.B"3Y';?FRQNU[UoqDmWDq,r*hFo2>X;2r<\+]EK.71!kG[0E2J1"=n193pAV6T)MBRq#%;$>Eg+F"t<Kfq!FZU+[AFE\!_-)[%23uBFKWGT$d*Hfiop<fm+c[8o>.IWqD,!3gbcZo?qIXk`\n+#'b'ulW88dS$S[QPa,hbC%1%I4QoY92l<.hI7ZP1HJ`Za_;0^k'F=&.jk[^CD.'?XjP)dO:s(G_/D(G(k^tRDTJNMY:cYmJZu#m7?(@QT9sqpq9J0H7d`sN/R[fs%Im[goR^07Xmlc:7\]Xi1BGF+PT;hI$/m?Eh>`AIRO9JJ'jJJu9<.aab!9fQFN8]X,P6%C<e[\S%D5l)je&O<_ib(.NYY\3bAX]$a%*46s?3_cpg7j/H7-U1OLlATQ2ikg\+Nrh7J:$g^^(YQ]N`nY6B7gA30Cf'=reY(s)agDGZCQ@<\6'm!]'F#`*jD>&rbtJLY,s<<A%T/fQ,OkCr--MMC/-X0n8+mGq8'eiY2>:KFkP_.7>?',Kj^quBm;UilaP'#.A2BE:&-\sJ7<oU($6Sg;jD%m-;l6,!MMdr]sqM?!P%pA,i/N<K-X/[PO>2?GcOpe^>i,q'78`]#sf2G^7gUM%1,S`bP_EaVE$^b262OAc3&Nq5LcYp7'1#9QL_qlTf!:D)'9;?L.F#s0+r%S2Vbb!'=(E-;nAaMAKfYCj6r=df\.P'@@&<cBj^]1RadR.pJ)mWc(i=/7V20g*3%<?)amPM5WLpp20\CNF5e12c=dS&NUH6j=m*C%l4C9e]N-t<DF._R65@KEg(uO>!SOMJ8bMQn/>dGLe@$K8eXi0Uke+>X.[(n>;E-LJO?T%kcHYhOEG9!.,Lm*VG\PDli705`JU'@^%+m(0DWNKC$U#+%'+9Go0LX/A_@c[EgZ3=C+b-qT]e!Qem126pc1M8IYe.<q<dC8r))SrNADPZP."PIfHc^94lS:/CHW]*o>diC:i%b*"E5mr0V6WO'__Zq\=;B:i7BF(D?%D$FV8`b4$37V2<=eZ>6)o7iu8-R&dR@<G8k&q/59=nl97Ael`6<A>2B+Mn,Hp/f5/$Bp8K%$\VXP<lTfd"8qck)8bo3(g&=C>JbG]'LB>rkh%&@/=C5E*rC&p@!boMj/TlP3D&@^lc+H]pC7`'j_PY"ce0H#&F=O(=<I&`>46rK%/9Nrl+Jo&aoFYFdKAi@Wpn+4?a=oo)b8]kK.Ie-!0$V?'rl<#!7$&-,e@,O@S)D<H-FOa+*`tgrXZPU*CS6ppPFLL.".5Yu%.%"&%:;j(`P4R7e!UX-0JhLcs\@C>5jXr00EOd<\F%*4:5*MZd=CX#RAHVJ'2$UA=jf/u5/,ik8';;,2hK_Y49mpT%'--1]kIKGpri0Zt%:P9VE9\lc?Fb(_j619u1`*;4u`sY=N]*u)59)uR/5OIBnhGt:g``l^dd-J6HFXi\_'%kP%6h#O(esl@ZL0\9@Dk0&j6jh4&I\e#B%'i[9(S)DTZQHEtuXJH`fTW(i$_`f*FToE7c9V(#)aFIUCeRte;[YraC]^Fd%(U#pZFVV1*3dG"!##;pa0,o_:A;8"umIg#[gkoH_%cB$pGf>[?mG^d-Wk1`&:2Vum:;sJJDgXKX64QslE%'JP]Fuedq>fA@Fp!#P'!/%7qfg9&Il8QPZrqbJ[S(tA*V_da]cA,Hj;t+6k%(N[0Te&@i+a[bArIoVWXZfcrrLrSu4/Ygr#B0(Te4jku#k.[NXK.uKeYno*k/[VMTqHf[I_Z01L;X(=$*BTLL)+k]ucM>,*#^;=0%r"1)<$I/?mH7GWNa.:s(o_JQoGD'#N53'T1_L,CmT[Duh_[ZlF5-QMh+ZR+Ip;=fkBEVu*eotn3UU'cZ^=$Qf)dQh'JEe^pKjVhc%fK?8b&L@OQB[F/i-KU1gi<@'H[=3e!Fl(mN2$PC*o6)5N*TO83S./d9W(W.EIY;BYN+i?Gqo\EG[)\M_H%Zu"23W=jn&@E*pLAU$%SS(f%q'U<Z8P_%UI&*$WV]C,:USX(KrBT8!4T&Q8_?3i)A,H]l1MEk3*MR@J-,P2uIoEShZR=2[,5)s(:5D>=79g^^#NMc`G6i2K%iismY/8ES_6pOGQr4$r]6EA".dA2V@pEgY44*!:2O.&O![70r*cjgcu%*MeMa.U79"pi;:C0jW:gDkJ\#F(T)(1cNj2s6W!PDkAA%2IiYnjLTo-3GSr<G5tI=_</%LQOGA;<R+Sn(V+UXeX'Okmi"MIX5?RNSWN3u^-Pr01Y(s=G;\2BI<a/djU1%rCp_!P7XkFelS_"G%"Set+BOrDtjUfRe7Zqi^I)4mc7N[Y(n4YT,DL4=bE4^,7$.8Y8=HrE[1n:j%2sV]*\!pC1=`$-]TSF!u3@(n\&`Zt-%MV:f5X:<C%`sM9aREedV.mt9ORFBrcDLI15<!tp!<<\;aTZQ\FHYQu>+d7gSUGTp0PA1BRiFRe[Moti>*p@`U0L`(%.H`^>deQCMFHA)J=6mtq%R.X_pG=Y=>MDh\))$h[RFU[ZZ75mNFCB<^1!u4s169Yjf5hXn@m$?LFp_B3rNN-5@Yeg!ALCi(EpW'tG:&M'Z^3j0.=kft:R*0``%ge%`hUhb.tk%NoJ<R9b1!m4X`S3YB.DJ!QS5XOggK0o[qVb!*:FE#+9U3a:[d![Xq[pZj1-14&=d_Y->[[&j#gK/Egn1Z6BXZdaZ%g`(jm:P5nT)bjM(6!?%@PjZ79jUUPhWA^tH)@UXeN0<;HT:gu@KR0l>]m,6uaMb[Uo@PZYg4VM'0V^,\%J9.R3'n3tc*8ZErmeGa%^KmM4VoZ<(2lfXs@-/Z"o[IcI]q2hg."rU2]'e)k`3iQt^:NeMBs!KA$!<@9ksZ'@!]F.sKaKqBUOei4h`3YV,Ti)/7nC!s;$ZB4%eYA`k\9ZATTLF4P7joQ:p0RBZLTjhb@sB=XH_j;qnP#nPLhI/Epc'BU'.]<LW9j@monB1T/X'$&W%T!+QFVUga<hJae7Oq]*A_'_%SE+@X<nH0:9mg#$UEak_1L3Tu18:ZYcL0=Y8s6M-D'7.RF65gK*=/9f)L[8NI'"cV%*)M[XqYgrN(dcV<enk0@,)fRTlpMG6LGm<%"p$q(NArLhS4\4TBoqp-:oWjuWjV4_[=?FH<MnhJ7T?MD/5*#nQ1dMc)=\+Ml#g2cX\EIhgC,p*XgYCf'f-T"dUNZ!:9kLGomKSS%2$,APV"RqEl;2bZp5a;1OYquumDubiVuWH4MZ!_[E*TW-+LJg"'($b%].Kb-=oIT)Y>3'4%\\8SD&4(*'k]q<d:T6(]]&qMkhSnK%lVju4&.@6_cPX?Q*U5u$6YV]<Me`!,cs;BNX(I^\iAY!UKX3@(_?E;qUR204`GN;q\t\1%VP*$geS3Z8:).fYYQa^=id>@O$:S/-%:9cbCP[W@m]<oq'U#U_fe%onrZb9.c$>3o<8:0j/N3n+)YiDMk'7q_$0L0&k$jK9hZ.c,a,,]Im4e`%&4*GQ-Ho^ik:VW^I#RH[A%E@9#059n/sY^j^78](o@,`.%ihG9!ECWdqdOmR\.nLuS\Tnn*W+UKJ`'pXmdf]tdH7-+SR?m%I=]SrE+326MJ#U1AJiTVp/"LqdU%JKO8J&]Ou?[,eA\8,,iD.gY'ip@;-7kS5*6Bg.1uVSZ=-$1Hf.PcUkX!m]@"i<KsU3>`$F@(lpKK!;/'BkKEe<:j'>`P=MOa^0;X%&A]&f1#`a6#LX%M`FhI/%-aW)(./OMZ9^<K,cq%j>>H"i432P".<*pMLHsM!mgKK;#nH_DK8rQp!SI]6pg3LKp@[r/-]@``kAHSO%8@F86d)(>V)@$F?7:9$9Jg27d!+bRr#U1Cp&n?R:nh`IT#/i5&&C(mjF-C3h$lV%6cr%T@'^0K=Gsgk23"lD",2g7H=O7bAe68al%H.C96;Ctio+HVC`@p$\MGhtDNO1a*mq!b"qcm&_1e.I?Q1`J#o"X9:KN)`]HgsR[ai-S/qatZFIk[.F+Bs6YWRNopR*)O.'K!:oO%,40YH"3?3>T.-`_[-g+=p`V^3]3JK%ArbL-ZHoA'+0smk1Eb0'N7K!;`k%;4IYH1k3lqlRUm[^KqkV&9HpgX2Gi:^)%8^\'N0V?f%%KT\*@:_J7-l0*4p&iO`74aa(gYmXchAm*8UneiGr]kK\UcCf@!ebcCDEMY7AWR$KbaKa$&3/P\8Q^HbXn$"EN,tVIH/(rAG_E4(%!ge$0/qV]!A9lN0QO=)$/5(S:>_jdM*B"c05t@mN,U]j<83e>^h%=;UTt/N9JtN*s#&l?`U!&C,";^7[0J^&0@k6I[OcKl^*T`Bo%!;iR9ckjE:ODb`Jf\nY6O2-Upi4k:EA]R@BJlcJ,H3'd=&+l\lFQ$VE:d+W-UJM?>CII;M[09Y`JgVhL==OgrM)#C59jaB5b^",K%:Z=kDR8Y%$V:(Q6O:9qNp1luoA<*q[mR3RNoUa%34"I$qGTq18l$c>hpnTdN\fJ#]K\U8-;oACgU?J+r<C&;]hs/6-\AgT1Bf]7"%T?>t<88h`RYLcWNjZVZ*h?`c7!Cih`7S(UW?Nl6X5@G'Li?tQqm`Id_`m>A%aaKh\r<`4.OhcS8V=(RE&a-pML'+1EeH-a"<R8G^%.M=-hbW(,@U`rE*eRHl:re)[iZ!"'EbS&>]+n\+?l6.UN)dJW_d1%'<8DDk!ooXT^29M?(1E:-7n5Ur;o^oA/^,h/?i*m-8"Moj:%Ab39dr2=A?Mnn/->?J_4T5kZ)K<R6/W\X?ri$K(&giM1AY[&gOLXgOgJrslQ(Bij91<EtPp_>Fd*FYXq1Yd&;kAQDfFjC=W?]<oP%"MY9gOBuOX*PsUAHXZ9>aA\][,B'>7hUE)bXQ=,R&-M@T8/g'M/hn.L.BO^P"rUsLG*pC3\ApjoOdWY>!M^PJX1!ROW)QM%`b,Yi%s%CrKp'Ifjk,[`9Jo"DS?3$,6^r7^55n">+Y[_0n<apUgb`&&\3>OGa\=:V4<%Jp/TK4*cK=H\TC4V6BZ1G75RER[EV$bJ"f?.[i%,FO\'CIjG0'uN+QBm!6/Q+9d+K0't1[5A;,[psd8Qf6tW.[gaXR"8doW>()L>6(Z`VUm'!m?X]L0PSlY7+_X^"i+nO)t!muQ*mM\%.PLYP"?M>M[Q"GpVSs,ZS'%X"5=V%Y5?_^]6E>qCo3.jdbhR909:\)]k$s8p[#;$-L(nF+4PgV:F_-:,]5Pdl/cBB_T4)@Wc1L0>%_hHB[p=f$r.+BYGN_JloFWigD&>1FS?cdi<339!6=F2s^MEt.Bb+>]3J7kad[qCN&2=&fjCA*&+F?;Z4*fEA\ZSup%Emhp#fWUY[%C(k\PANf\0:CK;hNX?*oi^"+51pYjq1Vg<<*-.'=rJHJ?KE;9d!hrju>cOMR2IN@2f4"e%,0]*O53B,LJY\M8BB*,#$o_W\4G:f@%,'R2ZEf's4OCF"[k(<a_1.JU`)"jrRXH/`<luTj7g)fsmNH-:Y6<ROa4Gps^=tj*93W^LQ![>X3krc5X29/_#$qI*u]/)ScGY*rC%LK-Or+NPk#(atde]])rVVR2`7XmmUUk7(f;>7anf/gH"`JD"";XZ.b0V[Yn2H:Clhabm@2Y*F?-]HOU`Z#ZjtJM%!_>@7WG2B_jt%JRj;=/!>g5Z[nRP>bK@QG@Y6e"QCC8W/-F'69u`oX?\=BAQh2o74hR0HlA+D,]i6YGYf)ofE(oiY..#o_tQS>%>=q>9L?751\PC?%7.a%XLM>3f26b$Qj]q01URH;(&h0%n<dP]>9"07m7CnB#G[LRLa426!j?U:"F./3AYpb6deT]A(o)QrrV__[<A`at=cCr&CM2**H%,aF)l+165=(/,mo2($TO5K6^sI[AgJo(-T4-mkF?hDnSG%?:r-OC<H.\p5Kq'!Rr3+Xg8O=14E6=P>BX)]g]QHK-oVZj$X6`4-9O%KEhXJ,)sD5P09B"SBD=DUQPAk9'2ABCFbOu?*tDc9]oN>Z7fak0/X=QE=*sIAqp]8[2X3$-mi.2)'X?D+fMkl"8aJc#Kqu1F4@>6%VfiqaP,X3:6m2OLT*QJLYeV9R/'?siUf2og"dq:FKd*'%MsOH@"d6sGZ'%0P#T/ia<8WlKY@f*(StK7b&oT&#Jp.QN_cWVV^=SUu%MNFOU#U5WdS@i0lh5*`o$-irkM_142?n8?UdL-<bR&F;+e3K/D5_)-qg_c<[8hj*J)-Bmb9ocMG:`V&8(sd\hW+ZmGE\T1ie76B@%;^IOBiSi.;d>(?3OR42RZnNcd*/b04!O6YIF3#7/LLB5(<;h-D_Zm`)Or=1$UfU/-Pqo)/*C>aM5P,N#q]S$+-[+EX!9G'N2pd@X%>D.A=&D<c2M[U_cA8,&rl9@HXLmAt%Q?p%4#`W)a_B"]e?Ij`(9)7HTqS8Zto`=f+528Ea`r!Shqg[QF[KmV%`#*aC3U./5<V@dD%"HQ4+'UeB=aJ`J]k4oQD7YPqUNfTMbWa8@Sgd]g;MDE?3(_s4B)L$=_$@9,$-_N=HUpBQH@GQ+b05mn`^XAIGn.CE`0D*(&JYO%@%D$:RdIDpigr=:G<Pd4O?>UgYeEDhj\bf$gF+O3Y2WIX@"-rYcbTY=S`^]p*Tr2(I>LMl!6iZR3N$g*@%1=]ig-soFLAXm'#*O$8s%X`mBb+f]EH7%d:a'o#Q&rb?QP6cK;i5AJBNEFHt'=#,NLV$l69/d,ntHr1gBlD>;',NE!0o7rIe3KZl:kK*)'n55+H[u,+S7-!nl%)GrlS.BXDq\$lqoNS(-6?GbKXO\n+CkibRRR!,:*.DkDgL*9VK?ctrtpW0<1rD!e&bk<WDaM/nEoIk/u^ca6_jkk(R2#QW&%Cdb+%-G1<;^,Rmq2lWleL4r]ZNNkd,`'&'P1^dOS#[5*<+WSf^@r@o^bZGu=jpkYeXqu#F14L-Vq[,C]Y+<!Rrq9@im;("O^V7nBf:J"P%A#rBN\'u(S1#qia+@pCZ(ao?'OQ@U^q/GoB7(4>3_k-la`%<'oh_;]9iaIdTCP;r?6=B/Qmo9TD_=/j'ZW2YbE;@?gb[mT("K_]`%5aj\A2;FsGh94Z&G\F=dO:G3uK\Q$OJT4<")8TK3V*^uNJ:*47/S(CSH%feO84_K:$0nnf<KnpGUuDY&i\QRA$Z*4b%H7_rard=u%ll*@B4S9uo4e'Xjp[d5-C(d1kf,bo#=dUaY)d2T5[IToW4]a@uk]tPcV'rf.WU"ZJB]i#%mt&Rq1oSg\=L*X^,s,L>1*YRn9*V1k%IonJ=DUmOO2=%KO*i?,GZ\>J<gFuhf]Jr8?\Q/f5^P-9<CX)&PTRm$\="mo/H!<'O7IToRAp@oV@)B<`GfhN#X4Q\_S-"h=VaYFP%!lG&?/Q<=p;cV066)?bUOddGumO?!eh!tsM)PaB]_S%aZ%81qiF-\n\_']bL985-rNpIh>gQ&'3_Ct[a0?KAU1uImLg,$@s!2B^2%0VRG2[LkUF2.%E7m=H3nikZ0UCHeAa>X4m$+N7J9N8g5;!14ZB,BFtY(SPhi\t^MBEs2hZGpj<iE?W#i-+&Z!*^IO9BW,%3k^,'(%bqUkqZ\R_p6lS<&7"etl&kE;jZ\BSX/7nT,=H#baUa-iZ.SqVFh(XXab=Dbf`7&MEB%db5OOC%+mF9,fVAaRT_Pm(IYYc&9X[0MP%e3$e2'i3;_20@(u;\U'[i]Vk$G<hs0B^kNVi766k0+3J@(##kmWCY*^2i"Pm.LKM#aasoe7Vk&ddg03_6DICcYhr)B+&97Y\XP^q%@*9Y*+6NR/K(UhrKQ>laN<lqdF)?W_5h-eE7KY:SSYiE0UD3272'+Ybl9d59O^)N;p:(\].(5+fV8J$,"u"F\R2#WOS]Bb[X4pBo%+ddZ'gP,`.>m]8g!`Wo!loegHjD&L.5f2a.mIVBr;.g\8BKK*C^d]E]#m-hfHRp7h&eBouN#?Ul"e*@PP:Hfp`kF0jl-Pmm\rg!*%Hf[M?W6=`gO[M4AZCr'P-aJ*lp)1f/fqm)@=I\<(=D>q&D<h07L/GDX"Xpk0%bhP&as3KA2_1O4>/$DrRq[7VO6egV#-cc1fc9&s%*j7fs(fmtAAq7c-?"YXYcjJ43UqS"U%t(pfC&c=#X]O7,>(F"M'ptW]O`GC5O'>%,3eJ9URPR@SX\OkZ<kh.!GGF3!fJamRGR+[N%q6nQ%_@iG;)lCko1m40S.!HVc+e5uELPM:H'p.'eY@muQegA=j'P`HioS`Arg=mN%KTe=*1qm/L*];a_maOu8(1KEIVI2^$gb=3"%DPmd8-'`GF)u@S`a"723m+,6,$^b5R0O*qH,,9sr\Oe_aVoDfEgS:LtTm[@"1^\0g3+WK(`Q"!l%i[ZJUR5"JPO;EEY<W(T][`Gd%Z=[r^[bP(]7M8pPPAms:NNZC/7nn3fRl2a@hG1-bO%"$2q91cS^0"/>U%l;B*jC"W!3/)0_=E^!Wjo*?4Wicep\ZF`A\>C6e9\^K%<abk<]G'aml8cr,Z,2CgR''aMh.-m1VeEl*Nm*p8`s8[mCJX$/N468>4'&b9JA$c92FKJiA/HsK#YEk5E585gj?"8L#4\];b]^+`%f2tu8g)M2)ctulliak+ZTr2CI_fS1M!i9"tbRFqe(/JR5F@^!T?U[\kM/*E48%uh[/?i#CoQNb'cX[h-pkr)k7t+['qc1O"!]OnY%;Wh5X6(=]J2O\d1=A-:spY=>'5-k>g,sSo2B"iC=/AZ-Uh-p\>SX@+?9Ru%U5HZp)Dbc5N9DJ@<a[P5rc]56;kD'M1Pps?O+PC1B%[cVN0J=22h>,1DFWXsp-[Cd/=_>AH0VuV"L[HpimO,fM9<$2<VX#[,Ob@"9)WIRPBO$q@FH=A+N%R9Qh'*1d!DJ0$b>hu@Z->WUb%P]mN7r6)MpgNmgF5@Z'tJ7WVAE#++(@rs&YqC#S6ce(3[IJ>nZA]e1XrUV[d'n?)An2g;l5pV($rTXbsV8I9I)h#i4Xo?JGI*?Xh%cDAn_7]FChEXThn@\A.J:V*N$qU"J>pji'XgbEaQ*7m"r/cl(3&N0m(H1G+(<h9Ugp!dP-KeD2IED?&P0TdO\R@NhW$l]C7n/"ld%!&R&A,34EqX5qR1q8eg7gCepk23i00AFL,@mik88TsIIg$%GcFmUi"C".;4j-BR^jJi?RHAd2*gZ6D6.C'5AI6#*p!K7?klIe[;>%#0_1n(;Z%;cX+Ws@=&la&&A]eT@?EJY?"!m6/tu`#_V)*aP5Wj$(W5W"*D[tA.KRG5@N\IM&(H:JnJUBKJ[4F;m0B+79/_"c+9UD%Jb7^=[_PaJ=Za#L:gb#YRLm]g5Rq+8K*n>8R$OiEUC)`o+fs`KQ;?Y6>f3s(mfA9&iN(_D!O8X1EcF;GcStPSrX4m_F(T+Nk51Hj%&IH(e%_h9PjG4XB#Ri54$MJC4KUD"<I7=%N_bo[t2\N4j4*W`rK)PY6*fb[mb[._[(C)"'_F2]&bpn/LIPVLt""mjk7kYp*nY#?>%#P%?\RtJ2Bb"M5VagcN^]F%-u$nsJ'\MI>)&<Uc@A1VUpJBA]0\"4[b&5h3IJb>RB#:B2AEaOj:L*@YN>\@XWZ%<4D$%?@5eUiR1%"i:\X(Pp9V!Fl\OAV2JlD7G^hf"gW/?I6mPngQO:H+u3_ZB^3S9Sn3LCW`#Q&:C>.ps!boO-fD+<m9uiDh#Ie#T(-QDtqrk2`^%_%Gj'6Ggn'.NQ[RT(an$(E/3(Cc`r#2:hfSE^q:O<Ge9<Kn?JOm&T)='5)!0)2kbZA5[F$r3PnBISl"^#DW>=NMq+F$@:)E[#6l>j?%A3h+r$6ORV@XU9cmJ'qKO.*^Yjen/Y>=-"(&QOLPU+c.Cij1#ijZK(A?$k@/.?p5+7.ZHE:+XgHbW9shlMJb-,Nq8I#O%e83aK*h%rMuV=dX2Qq7_U?3.F)+`!';Z\ZsV%?D>TVgO3)_*iN[dYd6DCh^tSQhL8S%$7&!BJ;todP/L=kjS)h4CH/BQH[r9"1gp_Gd7(4d"%0Ziflo^[hNr_nS$d1/bbA)oHWE,,ZT?4=#`\09?sUT)_Ys7*e](shVcFJd7KG[Ke+:QG<p9gdJ+rOOn\rOTFgn$oNKJ>MGN>((jX%d!(%r'7KrE_S@KK*``g!LFZjF%I!I:H8qUg5L'LjGORje^4f:NcS3I]_'7qM0N]<-]Ie9oij"b.k6t'>+cEs+n&Fb,!lM1Pf=!ur%WeMc@+S]JogaYs&XY7.Q#GaXWX`O*GD$X1qrCC95>8BPE?lO>Ima6Xd09Cbt,JVr-Cj9!\eec!<:$>SE`m`^aqbHEaJr6\=*Fc'Q%FFY+gRJCj+%8gclTi"7C<(>d3X).j3Wr%@]>/^#5PkLP"cqmG@0gN6a,H*8ennEWYXTdQ*[D-K/&:bgN9ul]>Z?rWg,1`V,S6/#b%PJ&F_)#/2ddNGBsdC&f+4t<W#DP40Kls&jFp@3(ZkV?tV(c1nO@m9b0>>d!q*(UjkM6<14AIDZTDud;l>A[k\X3id*>MnRUqlm0-%]9-iq!#W9FpO@H:p:=r]G5`Q^-j9hL:>P5D1r(W:4iTEDjFj!rHS7Pl+S*RT7)_gK/lBH2[tJphW)i.WU:RQ!_i,)n1A_>iNWG9H%!b1:8=O-(3#ijsDiQMo/,2HXo<>ZLd!Et`gYpVnc'25d>])f6A-m.b;"UhCkij"s\gW":AXt".@Sc,&9lK/;R!Su)aD.mLP>43(f%8E_lN@pCVh+o_Dt@E?QgHq%R2LdpS8)@`)^K\f\<q6-O=%iYf/.n4U5+BV5\54Jh#J4$/!q.cW\9tRWPA4!?7>L<ne-?dHkE\c5/%%hVS*L'.=@D)dX4PI.b-B0s)Fako"HXU/+L+>`?7OTBmkdV7F%huDr!6AkT]aBgn.%aij=U)4RT`fh'`O`A1T/&i%jN*&IcQ>%Pi%`!4$sKsL+V6>5sohZQHXTWJN&0DV%X\#p/'H0b(;UcJqi^Opdam6"6H$O[k9!LYUfqYY@6a4OE+EsD&EDZiSc4-%rAM=ZUt)mH=_%Qq'P[7!@bIH%b86TWO+k\@T2$ongn'CB;gK7@N$.@E:W^#%>#tO[=d`$8QLJ3Rkc/CN2:P/a`]'\5iuYn8fH^GWqNQ0\5.]K16PC%.&KI?gi9I;3i?r2;R/.+_nqVgM1?Rt*pujR@Ls,.2F4,RJApWn%HnD0I;<:elKj?NY>PqJ8k\'V&s9?9FJrr0f];YA#*.!B*5FRj%ftnZmh3:$OiFAIWWAdPaiJJ8CZH*2]eO4X9'a@Tr%WV2OfNOim.uClNq@Lp??uSgV[8krc=fYGBJd=nNE1pUG"iR<)(qG'r#,0Sp%]Cju"_lE*QX<3Vn%hr:!Zr.%%>.en%"k$6V'8G//[,?!Z2U44L6o3m)]or/\k."UPTjg'8XP+G#XhI!c+P_t7Vmb-1Rplh^<XhCC%e[tY5)T/ZDDQJfkM0)<`(Vlb0IQi9&Sh!G/5u4K:26moX_a%*5HKBSc9\6Ot#=%D:&%+"1>1M;1@-g@^UGeKRqf$6!+Pj]*GOrFp%?rl%<=EOt4Z63iT8kTlN#)4Q9M#<3ETlQ[`LbKY0Ah>-51XXJD%T2L`44H-\fq]BhTJ(V9C1Vr^QM39BJo]SMp!#B7DtAGuT8ji[%Q^'jR_]Iae=2b".l%ZcIEp\koHT7*6TZ"(m>AXI'N-kl<bG2@#WmTrmo$Ol<eNPC`l#)ldGKXK&Q#Y.J"^?/jE5,B,d(l,*.C6%<%R/RRE*T6:CQ&MpTq+#h^<?I$!b":[M$k"S#cKM4cTaO<miPN/`nfCbHa6$>/r2mg,kjB:7eiT3g%`QcZ(5]g9"<4'fdX.-@42Fp&%#l6HrOIK'BN8)Ja:8uEZ,UR8FlpiK8a"7$:BiJmL&HAH'6YE8K"]0q*2tCM0C.Q=;#VRlXkQ#=Q[/^!<[&gLF#1de;J9cM`2'k64%66Ki159enON(qL%MNH0e""K'a&/;/`WS8ns0*hUd(J6d)i/`g.f$$I7_*pafV(mAY]JU-)nbU%7bJ@d^p*la91OM"@2Ab'8X#2#^%l7Y+bd6E:$XqQccfLIrokirjI)2@Y'JP`k8I0qOAo9<4<i]uQT%0X@m_I?4u$*/sUoRX-To)fZKW0Eq?5T5'M*5_tq2l!oYaalP=%6Af1?F[iJXdaX8q0qL+<qJ^/AMbY<80rGk_.*t&;</AVq0VnG\N2>fq_c&8V5_Ft#*MnKg,Vnin@dlb/p;fX_;P\n<7sADZ-B\+(%P/1SHqtqdQF'U:*roJAF?rd@VVeNO5W_\1@E(FK'G(e/4]rS;LI"`]'2(=^8F!(R`NNXNK*i'qn%&*T1c`4a6D+"(&iHiX7^=[E2%b+c!QA25HsZhhFK7MZ5,i3e;9Xirp/UupesBSeC][M`)N"l#@64>n&Yb;5f4[S7Mp:BIe#2iL;?"bQ-[kifR-fSXP4f)USC5lss`%(jh&=SE"MWoVC&9c=pbq&KoCC!5BEpg),pgO:mX$_*5tu6sP.NMN4rkKtoKr(3G<%"QC@()?_g'S/T[+&d<l>#CGN'i1ok"B1-ts%9%60^N]k`T\s_RVfK51&=(C1$Q.oUYE>0X1pl_E,E',;\B2]$4j`0^UUJn(dcqc5IE/@CG6[G5Bc5-X@NWTm6X90>di6W3KH::+D%Enc]\$f_,"k[YoCV`D>>;-Ve5k-.>5nOib!B-<"*,achdd\n]&?/5+T/\uT/O]dRc<3jC$,NE!3,/Wk7Bt2\E`ucB<)He8ZHj%*U%db6%@=WhPuM"et5]#[j94`,3V*WR:ic=7[)Y+RX?Xi92i603J>8B<orOb$*b#m?o5huXnV3RD[mi6:tQ2tb&'e^0il4f]I(dm)io%"6.Bt]])R++-@k,JO8j#Fhr[)eC(I(_Nm_65s!@A7#p[U5[rAXO'q^E.702MMEEBN7D=7Fn.R!eiPrpM*F@4:99:BNXU1e+UB**c%CkS,u/HUgKTHM*!;Ijk<RYnc(7rlVReZTfZ)+[<(97S]4*$<$0ha,F?LbUSq&WRVqRtqT?j^\]IdNHq0@8^!V\K+cV+&,QooWCa'%(bc+bh_Q36VAU1=pqFGS_n"072Ik8RA\=O+m7^gkDF,U(2`$V\V5B@$(aIclVMla_1dFbEp:$eIFgBXh`#P9^'B0,IlS\9A+M8)C%:EYWlW!I5AAYDF]p]a'Af`7(2Lh%G5WD._A@1tOQU%?3%grY)@`N$Z-!m*Q#U!.&3(<&%5CM=rJ<eHa:3blf0?REuG(==2C=JerJ%e=ILb]GcAg#TZ&l.1"Q8A2]0]>6ohYWsG'*gpC&MZP6[*&l]Cu`gUn]!F_4&+r\Z0==iJ_"FC;=(I]o'V`0\ug(UHi><+Vh/gFOD%SisafdL<aYe!Q8ZR2#hO`VjJq7kId,B[/p98j!kL,Dado"G+?:rA1Ufp9NtA&OP\(fc6*Vj@<p^CU'al4trmEBlP7a3j-Q&M&B13%LHLcK_p"p7^k.)KRU[=.5T3EaC/AB:V.%i/C75hW&*![f)mVD@Bj>1RB_7=d#SG;(LPeDr6&=3q3#J"q=TtO;>pM^+6tIot0Z+"T%Z/n"(C::;i/C,IE0QB)b]U+3j0TVqPI)'9?I[s63d<J8=7q!ML/;A&1I6?]uL1,j39$mO\'\/>N"WU;c;Rig+-EQFRdSf)@?RSZl%AWIEUU4pGu\LQ#S-rRBT"i7%Lg'+8KA@r^N.?-n1NB\dm&OB+Re:E;u]beR#d)4NmoXu4G$lm'n;b([#X9U"<i^L*uXo]Xe9"/lC%,3XBsQHkfJj!qg:!*@0uk[e-NSPM()<?\HdC@n1P0R:r),X=lD,=^%H'+c[R@L.0H6\Wg4;8Yo0>I#FVrpU1Y'Wb9OV4PY@;UINR%\MHR[,"S_cO?Kfb;dinU0X($(OpX!siN/=I$BbLDR0-lR5C=JsYX8!GHD<mt$a'id4G[2G]rYO!]F(#Hrk-5,3FV*J`Nmti'S8Hj%3/KIZ5Z[s`pnZpkqM\km[iG>PDil^nWnq&_1Qp>I''t48MiO3R+SN9Z0=;K#Qu4G/1Msqo@^hZnR-U0dMDt(,K8FiGm_#&G,T%Ue%Ok]co>-DpE7.efa!/PS5<//PXSuEBb"#B]N3A/s*](?+HobqTFAt(J@;)I7L+Y6X1SKT_;/AK%@N+t>2JX/R_%2c"6iOJW,1(.+Q%;LO.T_*&`^rfu.:[./>SrE1:$]/8jXrpLSr0.C#!K*\SJU=R1?]M^!>KPVT^-c9i0"R2adZ>geS6b\ZMbD[>ma:Ks'l%'H"Ze6ft%4K#qVgiK*SMu2;2eJEnZ!'R9?dT@2QOD8ZB(a;s*S852UP:b]fd.IYS:cTL1FFQTqT%QOpEsC`II@sNjIU5&JADm@ar8e%S/nNs\%JqqPT9umg(kI_)6$)Vs>*_7Q1`^l3?3[8i+1NO"$D#)C"g7Wn4OE\;ILaONrcLt=^[+i94'3`S+.Ju!,(ei"G"emHqK"?`:Es]Jf%\NFa;NLC?f#rLJf*LEbF]9%o.\?6r!hVFabq/?1+ZX+3X3D:2%2\hNk]CZFuZS2Su@2K[(`(a0hLE.W2LJ?hE5r`<lGD>XQ$UYoc%RMKB"Z/!2O`8IaEk_36ngG@p`@I)J=C*/GdF>pq!b3^/B)]kR#g=WIkmILADd/>,.&J`k.N+aUF*Y>%p7C"7X"`NhHEk`cie.P/X%^C8(![DTt*NcKR08_GsM)6qI(?D(JE7>2?\@D8E-*(VWnIo'LP5-/uglg[GsC+&,&:A+G[d&B48(o-"ca+[2>@.n;6%LjMj5PYCJ%9SFIn[:JF[Lh'W@ViVWZ'!o`<2"V/WY?NBB;4`\P@2+FN8?LO<'l]dXWZH%mSm!%3&BT?XKeeIg5=0D33_0>re\Hg.;@gVPdK$%]%-DFts3PK&mQ+]5bWG.GP27I/BD.fQm<$BSZ_\/Ed;'4AK7>[oX4+<)OpE3gLVJ.STa78kW-d0Ni9G!grq`dUi%hCO54Kt-?@AP+[%dC(trUq42:F3GWso"RBdm_Abiq1&=OJ,>S!J,[V5rr&ae*e*jqs5TaOoah)c^]3p*rTOjmrp[,kn]u^a_rEu]gV:S;ndkb]r6+-8%rqdf:j8](Ms8Ieos7jA.kPkcTMN#l2pUgJ!p]'!crt!oOrtG~>%AI9_PrivateDataEnd